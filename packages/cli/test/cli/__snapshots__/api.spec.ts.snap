// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Types Content Test api-with-examples.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty>(config: Config<R>): Promise<HttpListener<R>> => openApi(config);

export type ResponseGet = ResponseOapi<unknown, 200, "application/json"> | ResponseOapi<unknown, 300, "application/json">;

export type PathGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseGet>;

export type ResponseV2Get = ResponseOapi<unknown, 200, "application/json"> | ResponseOapi<unknown, 203, "application/json">;

export type PathV2Get<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseV2Get>;

export interface Config<R extends Empty = Empty> extends OapiConfig<R> {
    paths: {
        "/": {
            get: PathGet<R>;
        };
        "/v2": {
            get: PathV2Get<R>;
        };
    };
}
"
`;

exports[`Types Content Test balance-service.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, OapiSecurityResolver, OapiAuthInfo, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo>(config: Config<R, TAuthInfo>): Promise<HttpListener<R>> => openApi(config);

export type ResponseInternalStatusGet = ResponseOapi<unknown, 200, string>;

/**
 * Health check endpoint
 * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
 */
export interface RequestInternalStatusGet<TAuthInfo> extends OapiContext {
    authInfo: TAuthInfo;
}

/**
 * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
 */
export type PathInternalStatusGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestInternalStatusGet<TAuthInfo> & R) => Promise<ResponseInternalStatusGet>;

export type ResponseInternalSwaggeryamlGet = ResponseOapi<unknown, 200, string>;

/**
 * Returns application swagger definition
 */
export interface RequestInternalSwaggeryamlGet<TAuthInfo> extends OapiContext {
    authInfo: TAuthInfo;
}

export type PathInternalSwaggeryamlGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestInternalSwaggeryamlGet<TAuthInfo> & R) => Promise<ResponseInternalSwaggeryamlGet>;

export interface BalanceSummaryHttpResponse {
    balance?: number;
    /**
     * Last transaction date-time which updated the balance
     */
    effectiveAt?: string;
    /**
     * When balance service updated the balance
     */
    updatedAt?: string;
    [key: string]: unknown;
}

export interface HttpErrorResponse {
    /**
     * PLANNED. Currently not sent
     */
    errorCode?: string;
    message?: string;
    [key: string]: unknown;
}

export type ResponseApiV2AccountsAccountIdBalanceGet = ResponseOapi<BalanceSummaryHttpResponse, 200, "application/json"> | ResponseOapi<HttpErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 404, string> | ResponseOapi<HttpErrorResponse, 500, "application/json">;

/**
 * DEPRECATED: Find Balance for the given accountId
 * Returns the balance
 */
export interface RequestApiV2AccountsAccountIdBalanceGet<TAuthInfo> extends OapiContext {
    path: {
        /**
         * ID of the account to return
         */
        accountId: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Returns the balance
 */
export type PathApiV2AccountsAccountIdBalanceGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestApiV2AccountsAccountIdBalanceGet<TAuthInfo> & R) => Promise<ResponseApiV2AccountsAccountIdBalanceGet>;

export interface TransactionHistoryHttpResponseV2 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | ChargeTransactionEntity)[];
    [key: string]: unknown;
}

export interface TransactionHistorySummary {
    /**
     * Number of search hits
     */
    totalSize?: number;
    [key: string]: unknown;
}

export interface GenericTransactionEntity {
    transactionType?: "TopUp" | "BalanceAdjustment";
    amount?: number;
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit', 'AppPayment'
     */
    cause?: string;
    [key: string]: unknown;
}

export interface ChargeTransactionEntity {
    transactionType?: "ElectricityUsageCharge" | "ElectricityStandingCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    [key: string]: unknown;
}

export type ResponseApiV2AccountsAccountIdTransactionsGet = ResponseOapi<TransactionHistoryHttpResponseV2, 200, "application/json"> | ResponseOapi<HttpErrorResponse, 400, "application/json"> | ResponseOapi<HttpErrorResponse, 500, "application/json">;

/**
 * DEPRECATED: Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
 * Returns the transaction history
 */
export interface RequestApiV2AccountsAccountIdTransactionsGet<TAuthInfo> extends OapiContext {
    path: {
        /**
         * ID of the account to return
         */
        accountId: string;
    };
    headers: {
        scenario?: string;
    };
    cookies: {
        session?: string;
    };
    query: {
        /**
         * Start date for the search period (inclusive)
         */
        fromDate: Date;
        /**
         * End date for the search period (inclusive)
         */
        toDate: Date;
        /**
         * Transaction type to search. If not provided every transaction will be fetched relevant for the account/period
         */
        transactionType?: ("TopUp" | "ElectricityUsageCharge" | "ElectricityStandingCharge" | "BalanceAdjustment")[];
    };
    authInfo: TAuthInfo;
}

/**
 * Returns the transaction history
 */
export type PathApiV2AccountsAccountIdTransactionsGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestApiV2AccountsAccountIdTransactionsGet<TAuthInfo> & R) => Promise<ResponseApiV2AccountsAccountIdTransactionsGet>;

export interface AdjustBalanceRequest {
    transactionId?: string;
    /**
     * Signed amount to adjust the balance with
     */
    amount?: number;
    /**
     * Adjustment date-time
     */
    transactionDateTime?: Date;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit'
     */
    cause?: string;
    [key: string]: unknown;
}

export type ResponseApiV2AccountsAccountIdAdjustbalancePost = ResponseOapi<BalanceSummaryHttpResponse, 200, "application/json"> | ResponseOapi<HttpErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 404, string> | ResponseOapi<HttpErrorResponse, 500, "application/json">;

/**
 * DEPRECATED: Adjust balance for a given accountId
 * Returns with the adjusted balance
 */
export interface RequestApiV2AccountsAccountIdAdjustbalancePost<TAuthInfo> extends OapiContext {
    path: {
        /**
         * ID of the account
         */
        accountId: string;
    };
    body: AdjustBalanceRequest;
    authInfo: TAuthInfo;
}

/**
 * Returns with the adjusted balance
 */
export type PathApiV2AccountsAccountIdAdjustbalancePost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestApiV2AccountsAccountIdAdjustbalancePost<TAuthInfo> & R) => Promise<ResponseApiV2AccountsAccountIdAdjustbalancePost>;

export type ResponseApiV3AccountsAccountIdBalanceGet = ResponseOapi<BalanceSummaryHttpResponse, 200, "application/json"> | ResponseOapi<HttpErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 404, string> | ResponseOapi<HttpErrorResponse, 500, "application/json">;

/**
 * Find Balance for the given accountId
 * Returns the balance
 */
export interface RequestApiV3AccountsAccountIdBalanceGet<TAuthInfo> extends OapiContext {
    path: {
        /**
         * ID of the account to return
         */
        accountId: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Returns the balance
 */
export type PathApiV3AccountsAccountIdBalanceGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestApiV3AccountsAccountIdBalanceGet<TAuthInfo> & R) => Promise<ResponseApiV3AccountsAccountIdBalanceGet>;

export interface TransactionHistoryHttpResponseV3 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | UsageChargeTransactionEntity | StandingChargeTransactionEntity)[];
    [key: string]: unknown;
}

export interface UsageChargeTransactionEntity {
    transactionType?: "ElectricityUsageCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    /**
     * Meter Serial Number
     */
    msn?: string;
    /**
     * The meter read that triggered the charge.
     */
    read?: number;
    /**
     * The consumption amount (kwH) corresponding to this charge.
     */
    consumption?: number;
    [key: string]: unknown;
}

export interface StandingChargeTransactionEntity {
    transactionType?: "ElectricityStandingCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    [key: string]: unknown;
}

export type ResponseApiV3AccountsAccountIdTransactionsGet = ResponseOapi<TransactionHistoryHttpResponseV3, 200, "application/json"> | ResponseOapi<HttpErrorResponse, 400, "application/json"> | ResponseOapi<HttpErrorResponse, 500, "application/json">;

/**
 * Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
 * Returns the transaction history
 */
export interface RequestApiV3AccountsAccountIdTransactionsGet<TAuthInfo> extends OapiContext {
    path: {
        /**
         * ID of the account to return
         */
        accountId: string;
    };
    query: {
        /**
         * Start date for the search period (inclusive)
         */
        fromDate: Date;
        /**
         * End date for the search period (inclusive)
         */
        toDate: Date;
        /**
         * Transaction type to search. If not provided every transaction will be fetched relevant for the account/period
         */
        transactionType?: ("TopUp" | "ElectricityUsageCharge" | "ElectricityStandingCharge" | "BalanceAdjustment")[];
    };
    authInfo: TAuthInfo;
}

/**
 * Returns the transaction history
 */
export type PathApiV3AccountsAccountIdTransactionsGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestApiV3AccountsAccountIdTransactionsGet<TAuthInfo> & R) => Promise<ResponseApiV3AccountsAccountIdTransactionsGet>;

export type ResponseApiV3AccountsAccountIdAdjustbalancePost = ResponseOapi<BalanceSummaryHttpResponse, 200, "application/json"> | ResponseOapi<HttpErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 404, string> | ResponseOapi<HttpErrorResponse, 500, "application/json">;

/**
 * Adjust balance for a given accountId
 * Returns with the adjusted balance
 */
export interface RequestApiV3AccountsAccountIdAdjustbalancePost<TAuthInfo> extends OapiContext {
    path: {
        /**
         * ID of the account
         */
        accountId: string;
    };
    body: AdjustBalanceRequest;
    authInfo: TAuthInfo;
}

/**
 * Returns with the adjusted balance
 */
export type PathApiV3AccountsAccountIdAdjustbalancePost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestApiV3AccountsAccountIdAdjustbalancePost<TAuthInfo> & R) => Promise<ResponseApiV3AccountsAccountIdAdjustbalancePost>;

export interface Config<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> extends OapiConfig<R> {
    paths: {
        "/internal/status": {
            /**
             * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
             */
            get: PathInternalStatusGet<R, TAuthInfo>;
        };
        "/internal/swagger.yaml": {
            get: PathInternalSwaggeryamlGet<R, TAuthInfo>;
        };
        "/api/v2/accounts/{accountId}/balance": {
            /**
             * Returns the balance
             */
            get: PathApiV2AccountsAccountIdBalanceGet<R, TAuthInfo>;
        };
        "/api/v2/accounts/{accountId}/transactions": {
            /**
             * Returns the transaction history
             */
            get: PathApiV2AccountsAccountIdTransactionsGet<R, TAuthInfo>;
        };
        "/api/v2/accounts/{accountId}/adjust-balance": {
            /**
             * Returns with the adjusted balance
             */
            post: PathApiV2AccountsAccountIdAdjustbalancePost<R, TAuthInfo>;
        };
        "/api/v3/accounts/{accountId}/balance": {
            /**
             * Returns the balance
             */
            get: PathApiV3AccountsAccountIdBalanceGet<R, TAuthInfo>;
        };
        "/api/v3/accounts/{accountId}/transactions": {
            /**
             * Returns the transaction history
             */
            get: PathApiV3AccountsAccountIdTransactionsGet<R, TAuthInfo>;
        };
        "/api/v3/accounts/{accountId}/adjust-balance": {
            /**
             * Returns with the adjusted balance
             */
            post: PathApiV3AccountsAccountIdAdjustbalancePost<R, TAuthInfo>;
        };
    };
    security: {
        BasicAuth: OapiSecurityResolver<R, TAuthInfo>;
        BearerAuth: OapiSecurityResolver<R, TAuthInfo>;
        ApiKeyAuth: OapiSecurityResolver<R, TAuthInfo>;
    };
}
"
`;

exports[`Types Content Test cloudtasks.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, OapiSecurityResolver, OapiAuthInfo, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo>(config: Config<R, TAuthInfo>): Promise<HttpListener<R>> => openApi(config);

export interface Empty {
    [key: string]: unknown;
}

export type ResponseV2NameDelete = ResponseOapi<Empty, 200, string>;

/**
 * Deletes a task.
 *
 * A task can be deleted if it is scheduled or dispatched. A task
 * cannot be deleted if it has executed successfully or permanently
 * failed.
 */
export interface RequestV2NameDelete<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * Required. The task name. For example:
         * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID\`
         */
        name: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Deletes a task.
 *
 * A task can be deleted if it is scheduled or dispatched. A task
 * cannot be deleted if it has executed successfully or permanently
 * failed.
 */
export type PathV2NameDelete<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NameDelete<TAuthInfo> & R) => Promise<ResponseV2NameDelete>;

export interface Task {
    /**
     * App Engine HTTP request.
     *
     * The message defines the HTTP request that is sent to an App Engine app when
     * the task is dispatched.
     *
     * Using AppEngineHttpRequest requires
     * [\`appengine.applications.get\`](https://cloud.google.com/appengine/docs/admin-api/access-control)
     * Google IAM permission for the project
     * and the following scope:
     *
     * \`https://www.googleapis.com/auth/cloud-platform\`
     *
     * The task will be delivered to the App Engine app which belongs to the same
     * project as the queue. For more information, see
     * [How Requests are
     * Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
     * and how routing is affected by
     * [dispatch
     * files](https://cloud.google.com/appengine/docs/python/config/dispatchref).
     * Traffic is encrypted during transport and never leaves Google datacenters.
     * Because this traffic is carried over a communication mechanism internal to
     * Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS).
     * The request to the handler, however, will appear to have used the HTTP
     * protocol.
     *
     * The AppEngineRouting used to construct the URL that the task is
     * delivered to can be set at the queue-level or task-level:
     *
     * * If app_engine_routing_override is set on the
     *    queue, this value is used for all
     *    tasks in the queue, no matter what the setting is for the task-level
     *    app_engine_routing.
     *
     *
     * The \`url\` that the task will be sent to is:
     *
     * * \`url =\` host \`+\`
     *   relative_uri
     *
     * Tasks can be dispatched to secure app handlers, unsecure app handlers, and
     * URIs restricted with
     * [\`login:
     * admin\`](https://cloud.google.com/appengine/docs/standard/python/config/appref).
     * Because tasks are not run as any user, they cannot be dispatched to URIs
     * restricted with
     * [\`login:
     * required\`](https://cloud.google.com/appengine/docs/standard/python/config/appref)
     * Task dispatches also do not follow redirects.
     *
     * The task attempt has succeeded if the app's request handler returns an HTTP
     * response code in the range [\`200\` - \`299\`]. The task attempt has failed if
     * the app's handler returns a non-2xx response code or Cloud Tasks does
     * not receive response before the deadline. Failed
     * tasks will be retried according to the
     * retry configuration. \`503\` (Service Unavailable) is
     * considered an App Engine system error instead of an application error and
     * will cause Cloud Tasks' traffic congestion control to temporarily throttle
     * the queue's dispatches. Unlike other types of task targets, a \`429\` (Too Many
     * Requests) response from an app handler does not cause traffic congestion
     * control to throttle the queue.
     */
    appEngineHttpRequest?: AppEngineHttpRequest;
    /**
     * Output only. The time that the task was created.
     *
     * \`create_time\` will be truncated to the nearest second.
     */
    createTime?: string;
    /**
     * Output only. The number of attempts dispatched.
     *
     * This count includes attempts which have been dispatched but haven't
     * received a response.
     */
    dispatchCount?: number;
    /**
     * The deadline for requests sent to the worker. If the worker does not
     * respond by this deadline then the request is cancelled and the attempt
     * is marked as a \`DEADLINE_EXCEEDED\` failure. Cloud Tasks will retry the
     * task according to the RetryConfig.
     *
     * Note that when the request is cancelled, Cloud Tasks will stop listing for
     * the response, but whether the worker stops processing depends on the
     * worker. For example, if the worker is stuck, it may not react to cancelled
     * requests.
     *
     * The default and maximum values depend on the type of request:
     *
     *
     * * For App Engine tasks, 0 indicates that the
     *   request has the default deadline. The default deadline depends on the
     *   [scaling
     *   type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling)
     *   of the service: 10 minutes for standard apps with automatic scaling, 24
     *   hours for standard apps with manual and basic scaling, and 60 minutes for
     *   flex apps. If the request deadline is set, it must be in the interval [15
     *   seconds, 24 hours 15 seconds]. Regardless of the task's
     *   \`dispatch_deadline\`, the app handler will not run for longer than than
     *   the service's timeout. We recommend setting the \`dispatch_deadline\` to
     *   at most a few seconds more than the app handler's timeout. For more
     *   information see
     *   [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts).
     *
     * \`dispatch_deadline\` will be truncated to the nearest millisecond. The
     * deadline is an approximate deadline.
     */
    dispatchDeadline?: string;
    /**
     * The status of a task attempt.
     */
    firstAttempt?: Attempt;
    /**
     * The status of a task attempt.
     */
    lastAttempt?: Attempt;
    /**
     * Optionally caller-specified in CreateTask.
     *
     * The task name.
     *
     * The task name must have the following format:
     * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID\`
     *
     * * \`PROJECT_ID\` can contain letters ([A-Za-z]), numbers ([0-9]),
     *    hyphens (-), colons (:), or periods (.).
     *    For more information, see
     *    [Identifying
     *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
     * * \`LOCATION_ID\` is the canonical ID for the task's location.
     *    The list of available locations can be obtained by calling
     *    ListLocations.
     *    For more information, see https://cloud.google.com/about/locations/.
     * * \`QUEUE_ID\` can contain letters ([A-Za-z]), numbers ([0-9]), or
     *   hyphens (-). The maximum length is 100 characters.
     * * \`TASK_ID\` can contain only letters ([A-Za-z]), numbers ([0-9]),
     *   hyphens (-), or underscores (_). The maximum length is 500 characters.
     */
    name?: string;
    /**
     * Output only. The number of attempts which have received a response.
     */
    responseCount?: number;
    /**
     * The time when the task is scheduled to be attempted or retried.
     *
     * \`schedule_time\` will be truncated to the nearest microsecond.
     */
    scheduleTime?: string;
    /**
     * Output only. The view specifies which subset of the Task has
     * been returned.
     */
    view?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    [key: string]: unknown;
}

export interface AppEngineHttpRequest {
    /**
     * App Engine Routing.
     *
     * Defines routing characteristics specific to App Engine - service, version,
     * and instance.
     *
     * For more information about services, versions, and instances see
     * [An Overview of App
     * Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
     * [Microservices Architecture on Google App
     * Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
     * [App Engine Standard request
     * routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
     * and [App Engine Flex request
     * routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
     *
     * Using AppEngineRouting requires
     * [\`appengine.applications.get\`](https://cloud.google.com/appengine/docs/admin-api/access-control)
     * Google IAM permission for the project
     * and the following scope:
     *
     * \`https://www.googleapis.com/auth/cloud-platform\`
     */
    appEngineRouting?: AppEngineRouting;
    /**
     * HTTP request body.
     *
     * A request body is allowed only if the HTTP method is POST or PUT. It is
     * an error to set a body on a task with an incompatible HttpMethod.
     */
    body?: string;
    /**
     * HTTP request headers.
     *
     * This map contains the header field names and values.
     * Headers can be set when the
     * task is created.
     * Repeated headers are not supported but a header value can contain commas.
     *
     * Cloud Tasks sets some headers to default values:
     *
     * * \`User-Agent\`: By default, this header is
     *   \`"AppEngine-Google; (+http://code.google.com/appengine)"\`.
     *   This header can be modified, but Cloud Tasks will append
     *   \`"AppEngine-Google; (+http://code.google.com/appengine)"\` to the
     *   modified \`User-Agent\`.
     *
     * If the task has a body, Cloud
     * Tasks sets the following headers:
     *
     * * \`Content-Type\`: By default, the \`Content-Type\` header is set to
     *   \`"application/octet-stream"\`. The default can be overridden by explicitly
     *   setting \`Content-Type\` to a particular media type when the
     *   task is created.
     *   For example, \`Content-Type\` can be set to \`"application/json"\`.
     * * \`Content-Length\`: This is computed by Cloud Tasks. This value is
     *   output only.   It cannot be changed.
     *
     * The headers below cannot be set or overridden:
     *
     * * \`Host\`
     * * \`X-Google-*\`
     * * \`X-AppEngine-*\`
     *
     * In addition, Cloud Tasks sets some headers when the task is dispatched,
     * such as headers containing information about the task; see
     * [request
     * headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers).
     * These headers are set only when the task is dispatched, so they are not
     * visible when the task is returned in a Cloud Tasks response.
     *
     * Although there is no specific limit for the maximum number of headers or
     * the size, there is a limit on the maximum size of the Task. For more
     * information, see the CreateTask documentation.
     */
    headers?: any;
    /**
     * The HTTP method to use for the request. The default is POST.
     *
     * The app's request handler for the task's target URL must be able to handle
     * HTTP requests with this http_method, otherwise the task attempt will fail
     * with error code 405 (Method Not Allowed). See
     * [Writing a push task request
     * handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler)
     * and the documentation for the request handlers in the language your app is
     * written in e.g.
     * [Python Request
     * Handler](https://cloud.google.com/appengine/docs/python/tools/webapp/requesthandlerclass).
     */
    httpMethod?: "HTTP_METHOD_UNSPECIFIED" | "POST" | "GET" | "HEAD" | "PUT" | "DELETE" | "PATCH" | "OPTIONS";
    /**
     * The relative URI.
     *
     * The relative URI must begin with "/" and must be a valid HTTP relative URI.
     * It can contain a path and query string arguments.
     * If the relative URI is empty, then the root path "/" will be used.
     * No spaces are allowed, and the maximum length allowed is 2083 characters.
     */
    relativeUri?: string;
    [key: string]: unknown;
}

export interface AppEngineRouting {
    /**
     * Output only. The host that the task is sent to.
     *
     * The host is constructed from the domain name of the app associated with
     * the queue's project ID (for example <app-id>.appspot.com), and the
     * service, version,
     * and instance. Tasks which were created using
     * the App Engine SDK might have a custom domain name.
     *
     * For more information, see
     * [How Requests are
     * Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
     */
    host?: string;
    /**
     * App instance.
     *
     * By default, the task is sent to an instance which is available when
     * the task is attempted.
     *
     * Requests can only be sent to a specific instance if
     * [manual scaling is used in App Engine
     * Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
     * App Engine Flex does not support instances. For more information, see
     * [App Engine Standard request
     * routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
     * and [App Engine Flex request
     * routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
     */
    instance?: string;
    /**
     * App service.
     *
     * By default, the task is sent to the service which is the default
     * service when the task is attempted.
     *
     * For some queues or tasks which were created using the App Engine
     * Task Queue API, host is not parsable
     * into service,
     * version, and
     * instance. For example, some tasks
     * which were created using the App Engine SDK use a custom domain
     * name; custom domains are not parsed by Cloud Tasks. If
     * host is not parsable, then
     * service,
     * version, and
     * instance are the empty string.
     */
    service?: string;
    /**
     * App version.
     *
     * By default, the task is sent to the version which is the default
     * version when the task is attempted.
     *
     * For some queues or tasks which were created using the App Engine
     * Task Queue API, host is not parsable
     * into service,
     * version, and
     * instance. For example, some tasks
     * which were created using the App Engine SDK use a custom domain
     * name; custom domains are not parsed by Cloud Tasks. If
     * host is not parsable, then
     * service,
     * version, and
     * instance are the empty string.
     */
    version?: string;
    [key: string]: unknown;
}

export interface Attempt {
    /**
     * Output only. The time that this attempt was dispatched.
     *
     * \`dispatch_time\` will be truncated to the nearest microsecond.
     */
    dispatchTime?: string;
    /**
     * The \`Status\` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each \`Status\` message contains
     * three pieces of data: error code, error message, and error details.
     *
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    responseStatus?: Status;
    /**
     * Output only. The time that this attempt response was received.
     *
     * \`response_time\` will be truncated to the nearest microsecond.
     */
    responseTime?: string;
    /**
     * Output only. The time that this attempt was scheduled.
     *
     * \`schedule_time\` will be truncated to the nearest microsecond.
     */
    scheduleTime?: string;
    [key: string]: unknown;
}

export interface Status {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code?: number;
    /**
     * A list of messages that carry the error details.  There is a common set of
     * message types for APIs to use.
     */
    details?: any[];
    /**
     * A developer-facing error message, which should be in English. Any
     * user-facing error message should be localized and sent in the
     * google.rpc.Status.details field, or localized by the client.
     */
    message?: string;
    [key: string]: unknown;
}

export type ResponseV2NameGet = ResponseOapi<Task, 200, string>;

/**
 * Gets a task.
 */
export interface RequestV2NameGet<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
        /**
         * The response_view specifies which subset of the Task will be
         * returned.
         *
         * By default response_view is BASIC; not all
         * information is retrieved by default because some data, such as
         * payloads, might be desirable to return only when needed because
         * of its large size or because of the sensitivity of data that it
         * contains.
         *
         * Authorization for FULL requires
         * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
         * permission on the Task resource.
         */
        responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    };
    path: {
        /**
         * Required. The task name. For example:
         * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID\`
         */
        name: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Gets a task.
 */
export type PathV2NameGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NameGet<TAuthInfo> & R) => Promise<ResponseV2NameGet>;

export interface Queue {
    /**
     * App Engine Routing.
     *
     * Defines routing characteristics specific to App Engine - service, version,
     * and instance.
     *
     * For more information about services, versions, and instances see
     * [An Overview of App
     * Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
     * [Microservices Architecture on Google App
     * Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
     * [App Engine Standard request
     * routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
     * and [App Engine Flex request
     * routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
     *
     * Using AppEngineRouting requires
     * [\`appengine.applications.get\`](https://cloud.google.com/appengine/docs/admin-api/access-control)
     * Google IAM permission for the project
     * and the following scope:
     *
     * \`https://www.googleapis.com/auth/cloud-platform\`
     */
    appEngineRoutingOverride?: AppEngineRouting;
    /**
     * Caller-specified and required in CreateQueue,
     * after which it becomes output only.
     *
     * The queue name.
     *
     * The queue name must have the following format:
     * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID\`
     *
     * * \`PROJECT_ID\` can contain letters ([A-Za-z]), numbers ([0-9]),
     *    hyphens (-), colons (:), or periods (.).
     *    For more information, see
     *    [Identifying
     *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
     * * \`LOCATION_ID\` is the canonical ID for the queue's location.
     *    The list of available locations can be obtained by calling
     *    ListLocations.
     *    For more information, see https://cloud.google.com/about/locations/.
     * * \`QUEUE_ID\` can contain letters ([A-Za-z]), numbers ([0-9]), or
     *   hyphens (-). The maximum length is 100 characters.
     */
    name?: string;
    /**
     * Output only. The last time this queue was purged.
     *
     * All tasks that were created before this time
     * were purged.
     *
     * A queue can be purged using PurgeQueue, the
     * [App Engine Task Queue SDK, or the Cloud
     * Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue).
     *
     * Purge time will be truncated to the nearest microsecond. Purge
     * time will be unset if the queue has never been purged.
     */
    purgeTime?: string;
    /**
     * Rate limits.
     *
     * This message determines the maximum rate that tasks can be dispatched by a
     * queue, regardless of whether the dispatch is a first task attempt or a retry.
     *
     * Note: The debugging command, RunTask, will run a task
     * even if the queue has reached its RateLimits.
     */
    rateLimits?: RateLimits;
    /**
     * Retry config.
     *
     * These settings determine when a failed task attempt is retried.
     */
    retryConfig?: RetryConfig;
    /**
     * Output only. The state of the queue.
     *
     * \`state\` can only be changed by called
     * PauseQueue,
     * ResumeQueue, or uploading
     * [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref).
     * UpdateQueue cannot be used to change \`state\`.
     */
    state?: "STATE_UNSPECIFIED" | "RUNNING" | "PAUSED" | "DISABLED";
    [key: string]: unknown;
}

export interface RateLimits {
    /**
     * Output only. The max burst size.
     *
     * Max burst size limits how fast tasks in queue are processed when
     * many tasks are in the queue and the rate is high. This field
     * allows the queue to have a high rate so processing starts shortly
     * after a task is enqueued, but still limits resource usage when
     * many tasks are enqueued in a short period of time.
     *
     * The [token bucket](https://wikipedia.org/wiki/Token_Bucket)
     * algorithm is used to control the rate of task dispatches. Each
     * queue has a token bucket that holds tokens, up to the maximum
     * specified by \`max_burst_size\`. Each time a task is dispatched, a
     * token is removed from the bucket. Tasks will be dispatched until
     * the queue's bucket runs out of tokens. The bucket will be
     * continuously refilled with new tokens based on
     * max_dispatches_per_second.
     *
     * Cloud Tasks will pick the value of \`max_burst_size\` based on the
     * value of
     * max_dispatches_per_second.
     *
     * For queues that were created or updated using
     * \`queue.yaml/xml\`, \`max_burst_size\` is equal to
     * [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size).
     * Since \`max_burst_size\` is output only, if
     * UpdateQueue is called on a queue
     * created by \`queue.yaml/xml\`, \`max_burst_size\` will be reset based
     * on the value of
     * max_dispatches_per_second,
     * regardless of whether
     * max_dispatches_per_second
     * is updated.
     *
     */
    maxBurstSize?: number;
    /**
     * The maximum number of concurrent tasks that Cloud Tasks allows
     * to be dispatched for this queue. After this threshold has been
     * reached, Cloud Tasks stops dispatching tasks until the number of
     * concurrent requests decreases.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * The maximum allowed value is 5,000.
     *
     *
     * This field has the same meaning as
     * [max_concurrent_requests in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
     */
    maxConcurrentDispatches?: number;
    /**
     * The maximum rate at which tasks are dispatched from this queue.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     * * The maximum allowed value is 500.
     *
     *
     * This field has the same meaning as
     * [rate in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
     */
    maxDispatchesPerSecond?: number;
    [key: string]: unknown;
}

export interface RetryConfig {
    /**
     * Number of attempts per task.
     *
     * Cloud Tasks will attempt the task \`max_attempts\` times (that is, if the
     * first attempt fails, then there will be \`max_attempts - 1\` retries). Must
     * be >= -1.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     * -1 indicates unlimited attempts.
     *
     * This field has the same meaning as
     * [task_retry_limit in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxAttempts?: number;
    /**
     * A task will be scheduled for retry between
     * min_backoff and
     * max_backoff duration after it fails,
     * if the queue's RetryConfig specifies that the task should be
     * retried.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * \`max_backoff\` will be truncated to the nearest second.
     *
     * This field has the same meaning as
     * [max_backoff_seconds in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxBackoff?: string;
    /**
     * The time between retries will double \`max_doublings\` times.
     *
     * A task's retry interval starts at
     * min_backoff, then doubles
     * \`max_doublings\` times, then increases linearly, and finally
     * retries retries at intervals of
     * max_backoff up to
     * max_attempts times.
     *
     * For example, if min_backoff is 10s,
     * max_backoff is 300s, and
     * \`max_doublings\` is 3, then the a task will first be retried in
     * 10s. The retry interval will double three times, and then
     * increase linearly by 2^3 * 10s.  Finally, the task will retry at
     * intervals of max_backoff until the
     * task has been attempted max_attempts
     * times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s,
     * 240s, 300s, 300s, ....
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * This field has the same meaning as
     * [max_doublings in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxDoublings?: number;
    /**
     * If positive, \`max_retry_duration\` specifies the time limit for
     * retrying a failed task, measured from when the task was first
     * attempted. Once \`max_retry_duration\` time has passed *and* the
     * task has been attempted max_attempts
     * times, no further attempts will be made and the task will be
     * deleted.
     *
     * If zero, then the task age is unlimited.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * \`max_retry_duration\` will be truncated to the nearest second.
     *
     * This field has the same meaning as
     * [task_age_limit in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxRetryDuration?: string;
    /**
     * A task will be scheduled for retry between
     * min_backoff and
     * max_backoff duration after it fails,
     * if the queue's RetryConfig specifies that the task should be
     * retried.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * \`min_backoff\` will be truncated to the nearest second.
     *
     * This field has the same meaning as
     * [min_backoff_seconds in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    minBackoff?: string;
    [key: string]: unknown;
}

export type ResponseV2NamePatch = ResponseOapi<Queue, 200, string>;

/**
 * Updates a queue.
 *
 * This method creates the queue if it does not exist and updates
 * the queue if it does exist.
 *
 * Queues created with this method allow tasks to live for a maximum of 31
 * days. After a task is 31 days old, the task will be deleted regardless of whether
 * it was dispatched or not.
 *
 * WARNING: Using this method may have unintended side effects if you are
 * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
 * Read
 * [Overview of Queue Management and
 * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
 * this method.
 */
export interface RequestV2NamePatch<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
        /**
         * A mask used to specify which fields of the queue are being updated.
         *
         * If empty, then all fields will be updated.
         */
        updateMask?: string;
    };
    path: {
        /**
         * Caller-specified and required in CreateQueue,
         * after which it becomes output only.
         *
         * The queue name.
         *
         * The queue name must have the following format:
         * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID\`
         *
         * * \`PROJECT_ID\` can contain letters ([A-Za-z]), numbers ([0-9]),
         *    hyphens (-), colons (:), or periods (.).
         *    For more information, see
         *    [Identifying
         *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
         * * \`LOCATION_ID\` is the canonical ID for the queue's location.
         *    The list of available locations can be obtained by calling
         *    ListLocations.
         *    For more information, see https://cloud.google.com/about/locations/.
         * * \`QUEUE_ID\` can contain letters ([A-Za-z]), numbers ([0-9]), or
         *   hyphens (-). The maximum length is 100 characters.
         */
        name: string;
    };
    body?: Queue;
    authInfo: TAuthInfo;
}

/**
 * Updates a queue.
 *
 * This method creates the queue if it does not exist and updates
 * the queue if it does exist.
 *
 * Queues created with this method allow tasks to live for a maximum of 31
 * days. After a task is 31 days old, the task will be deleted regardless of whether
 * it was dispatched or not.
 *
 * WARNING: Using this method may have unintended side effects if you are
 * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
 * Read
 * [Overview of Queue Management and
 * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
 * this method.
 */
export type PathV2NamePatch<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NamePatch<TAuthInfo> & R) => Promise<ResponseV2NamePatch>;

export interface ListLocationsResponse {
    /**
     * A list of locations that matches the specified filter in the request.
     */
    locations?: Location[];
    /**
     * The standard List next-page token.
     */
    nextPageToken?: string;
    [key: string]: unknown;
}

export interface Location {
    /**
     * The friendly name for this location, typically a nearby city name.
     * For example, "Tokyo".
     */
    displayName?: string;
    /**
     * Cross-service attributes for the location. For example
     *
     *     {"cloud.googleapis.com/region": "us-east1"}
     */
    labels?: any;
    /**
     * The canonical id for this location. For example: \`"us-east1"\`.
     */
    locationId?: string;
    /**
     * Service-specific metadata. For example the available capacity at the given
     * location.
     */
    metadata?: any;
    /**
     * Resource name for the location, which may vary between implementations.
     * For example: \`"projects/example-project/locations/us-east1"\`
     */
    name?: string;
    [key: string]: unknown;
}

export type ResponseV2NameLocationsGet = ResponseOapi<ListLocationsResponse, 200, string>;

/**
 * Lists information about the supported locations for this service.
 */
export interface RequestV2NameLocationsGet<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
        /**
         * The standard list filter.
         */
        filter?: string;
        /**
         * The standard list page size.
         */
        pageSize?: number;
        /**
         * The standard list page token.
         */
        pageToken?: string;
    };
    path: {
        /**
         * The resource that owns the locations collection, if applicable.
         */
        name: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Lists information about the supported locations for this service.
 */
export type PathV2NameLocationsGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NameLocationsGet<TAuthInfo> & R) => Promise<ResponseV2NameLocationsGet>;

export interface PauseQueueRequest {
    [key: string]: unknown;
}

export type ResponseV2NamepausePost = ResponseOapi<Queue, 200, string>;

/**
 * Pauses the queue.
 *
 * If a queue is paused then the system will stop dispatching tasks
 * until the queue is resumed via
 * ResumeQueue. Tasks can still be added
 * when the queue is paused. A queue is paused if its
 * state is PAUSED.
 */
export interface RequestV2NamepausePost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * Required. The queue name. For example:
         * \`projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID\`
         */
        name: string;
    };
    body?: PauseQueueRequest;
    authInfo: TAuthInfo;
}

/**
 * Pauses the queue.
 *
 * If a queue is paused then the system will stop dispatching tasks
 * until the queue is resumed via
 * ResumeQueue. Tasks can still be added
 * when the queue is paused. A queue is paused if its
 * state is PAUSED.
 */
export type PathV2NamepausePost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NamepausePost<TAuthInfo> & R) => Promise<ResponseV2NamepausePost>;

export interface PurgeQueueRequest {
    [key: string]: unknown;
}

export type ResponseV2NamepurgePost = ResponseOapi<Queue, 200, string>;

/**
 * Purges a queue by deleting all of its tasks.
 *
 * All tasks created before this method is called are permanently deleted.
 *
 * Purge operations can take up to one minute to take effect. Tasks
 * might be dispatched before the purge takes effect. A purge is irreversible.
 */
export interface RequestV2NamepurgePost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * Required. The queue name. For example:
         * \`projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID\`
         */
        name: string;
    };
    body?: PurgeQueueRequest;
    authInfo: TAuthInfo;
}

/**
 * Purges a queue by deleting all of its tasks.
 *
 * All tasks created before this method is called are permanently deleted.
 *
 * Purge operations can take up to one minute to take effect. Tasks
 * might be dispatched before the purge takes effect. A purge is irreversible.
 */
export type PathV2NamepurgePost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NamepurgePost<TAuthInfo> & R) => Promise<ResponseV2NamepurgePost>;

export interface ResumeQueueRequest {
    [key: string]: unknown;
}

export type ResponseV2NameresumePost = ResponseOapi<Queue, 200, string>;

/**
 * Resume a queue.
 *
 * This method resumes a queue after it has been
 * PAUSED or
 * DISABLED. The state of a queue is stored
 * in the queue's state; after calling this method it
 * will be set to RUNNING.
 *
 * WARNING: Resuming many high-QPS queues at the same time can
 * lead to target overloading. If you are resuming high-QPS
 * queues, follow the 500/50/5 pattern described in
 * [Managing Cloud Tasks Scaling
 * Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
 */
export interface RequestV2NameresumePost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * Required. The queue name. For example:
         * \`projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID\`
         */
        name: string;
    };
    body?: ResumeQueueRequest;
    authInfo: TAuthInfo;
}

/**
 * Resume a queue.
 *
 * This method resumes a queue after it has been
 * PAUSED or
 * DISABLED. The state of a queue is stored
 * in the queue's state; after calling this method it
 * will be set to RUNNING.
 *
 * WARNING: Resuming many high-QPS queues at the same time can
 * lead to target overloading. If you are resuming high-QPS
 * queues, follow the 500/50/5 pattern described in
 * [Managing Cloud Tasks Scaling
 * Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
 */
export type PathV2NameresumePost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NameresumePost<TAuthInfo> & R) => Promise<ResponseV2NameresumePost>;

export interface RunTaskRequest {
    /**
     * The response_view specifies which subset of the Task will be
     * returned.
     *
     * By default response_view is BASIC; not all
     * information is retrieved by default because some data, such as
     * payloads, might be desirable to return only when needed because
     * of its large size or because of the sensitivity of data that it
     * contains.
     *
     * Authorization for FULL requires
     * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
     * permission on the Task resource.
     */
    responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    [key: string]: unknown;
}

export type ResponseV2NamerunPost = ResponseOapi<Task, 200, string>;

/**
 * Forces a task to run now.
 *
 * When this method is called, Cloud Tasks will dispatch the task, even if
 * the task is already running, the queue has reached its RateLimits or
 * is PAUSED.
 *
 * This command is meant to be used for manual debugging. For
 * example, RunTask can be used to retry a failed
 * task after a fix has been made or to manually force a task to be
 * dispatched now.
 *
 * The dispatched task is returned. That is, the task that is returned
 * contains the status after the task is dispatched but
 * before the task is received by its target.
 *
 * If Cloud Tasks receives a successful response from the task's
 * target, then the task will be deleted; otherwise the task's
 * schedule_time will be reset to the time that
 * RunTask was called plus the retry delay specified
 * in the queue's RetryConfig.
 *
 * RunTask returns
 * NOT_FOUND when it is called on a
 * task that has already succeeded or permanently failed.
 */
export interface RequestV2NamerunPost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * Required. The task name. For example:
         * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID\`
         */
        name: string;
    };
    body?: RunTaskRequest;
    authInfo: TAuthInfo;
}

/**
 * Forces a task to run now.
 *
 * When this method is called, Cloud Tasks will dispatch the task, even if
 * the task is already running, the queue has reached its RateLimits or
 * is PAUSED.
 *
 * This command is meant to be used for manual debugging. For
 * example, RunTask can be used to retry a failed
 * task after a fix has been made or to manually force a task to be
 * dispatched now.
 *
 * The dispatched task is returned. That is, the task that is returned
 * contains the status after the task is dispatched but
 * before the task is received by its target.
 *
 * If Cloud Tasks receives a successful response from the task's
 * target, then the task will be deleted; otherwise the task's
 * schedule_time will be reset to the time that
 * RunTask was called plus the retry delay specified
 * in the queue's RetryConfig.
 *
 * RunTask returns
 * NOT_FOUND when it is called on a
 * task that has already succeeded or permanently failed.
 */
export type PathV2NamerunPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2NamerunPost<TAuthInfo> & R) => Promise<ResponseV2NamerunPost>;

export interface ListQueuesResponse {
    /**
     * A token to retrieve next page of results.
     *
     * To return the next page of results, call
     * ListQueues with this value as the
     * page_token.
     *
     * If the next_page_token is empty, there are no more results.
     *
     * The page token is valid for only 2 hours.
     */
    nextPageToken?: string;
    /**
     * The list of queues.
     */
    queues?: Queue[];
    [key: string]: unknown;
}

export type ResponseV2ParentQueuesGet = ResponseOapi<ListQueuesResponse, 200, string>;

/**
 * Lists queues.
 *
 * Queues are returned in lexicographical order.
 */
export interface RequestV2ParentQueuesGet<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
        /**
         * \`filter\` can be used to specify a subset of queues. Any Queue
         * field can be used as a filter and several operators as supported.
         * For example: \`<=, <, >=, >, !=, =, :\`. The filter syntax is the same as
         * described in
         * [Stackdriver's Advanced Logs
         * Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
         *
         * Sample filter "state: PAUSED".
         *
         * Note that using filters might cause fewer queues than the
         * requested page_size to be returned.
         */
        filter?: string;
        /**
         * Requested page size.
         *
         * The maximum page size is 9800. If unspecified, the page size will
         * be the maximum. Fewer queues than requested might be returned,
         * even if more queues exist; use the
         * next_page_token in the
         * response to determine if more queues exist.
         */
        pageSize?: number;
        /**
         * A token identifying the page of results to return.
         *
         * To request the first page results, page_token must be empty. To
         * request the next page of results, page_token must be the value of
         * next_page_token returned
         * from the previous call to ListQueues
         * method. It is an error to switch the value of the
         * filter while iterating through pages.
         */
        pageToken?: string;
    };
    path: {
        /**
         * Required. The location name.
         * For example: \`projects/PROJECT_ID/locations/LOCATION_ID\`
         */
        parent: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Lists queues.
 *
 * Queues are returned in lexicographical order.
 */
export type PathV2ParentQueuesGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2ParentQueuesGet<TAuthInfo> & R) => Promise<ResponseV2ParentQueuesGet>;

export type ResponseV2ParentQueuesPost = ResponseOapi<Queue, 200, string>;

/**
 * Creates a queue.
 *
 * Queues created with this method allow tasks to live for a maximum of 31
 * days. After a task is 31 days old, the task will be deleted regardless of whether
 * it was dispatched or not.
 *
 * WARNING: Using this method may have unintended side effects if you are
 * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
 * Read
 * [Overview of Queue Management and
 * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
 * this method.
 */
export interface RequestV2ParentQueuesPost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * Required. The location name in which the queue will be created.
         * For example: \`projects/PROJECT_ID/locations/LOCATION_ID\`
         *
         * The list of allowed locations can be obtained by calling Cloud
         * Tasks' implementation of
         * ListLocations.
         */
        parent: string;
    };
    body?: Queue;
    authInfo: TAuthInfo;
}

/**
 * Creates a queue.
 *
 * Queues created with this method allow tasks to live for a maximum of 31
 * days. After a task is 31 days old, the task will be deleted regardless of whether
 * it was dispatched or not.
 *
 * WARNING: Using this method may have unintended side effects if you are
 * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
 * Read
 * [Overview of Queue Management and
 * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
 * this method.
 */
export type PathV2ParentQueuesPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2ParentQueuesPost<TAuthInfo> & R) => Promise<ResponseV2ParentQueuesPost>;

export interface ListTasksResponse {
    /**
     * A token to retrieve next page of results.
     *
     * To return the next page of results, call
     * ListTasks with this value as the
     * page_token.
     *
     * If the next_page_token is empty, there are no more results.
     */
    nextPageToken?: string;
    /**
     * The list of tasks.
     */
    tasks?: Task[];
    [key: string]: unknown;
}

export type ResponseV2ParentTasksGet = ResponseOapi<ListTasksResponse, 200, string>;

/**
 * Lists the tasks in a queue.
 *
 * By default, only the BASIC view is retrieved
 * due to performance considerations;
 * response_view controls the
 * subset of information which is returned.
 *
 * The tasks may be returned in any order. The ordering may change at any
 * time.
 */
export interface RequestV2ParentTasksGet<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
        /**
         * Maximum page size.
         *
         * Fewer tasks than requested might be returned, even if more tasks exist; use
         * next_page_token in the response to
         * determine if more tasks exist.
         *
         * The maximum page size is 1000. If unspecified, the page size will be the
         * maximum.
         */
        pageSize?: number;
        /**
         * A token identifying the page of results to return.
         *
         * To request the first page results, page_token must be empty. To
         * request the next page of results, page_token must be the value of
         * next_page_token returned
         * from the previous call to ListTasks
         * method.
         *
         * The page token is valid for only 2 hours.
         */
        pageToken?: string;
        /**
         * The response_view specifies which subset of the Task will be
         * returned.
         *
         * By default response_view is BASIC; not all
         * information is retrieved by default because some data, such as
         * payloads, might be desirable to return only when needed because
         * of its large size or because of the sensitivity of data that it
         * contains.
         *
         * Authorization for FULL requires
         * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
         * permission on the Task resource.
         */
        responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    };
    path: {
        /**
         * Required. The queue name. For example:
         * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID\`
         */
        parent: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Lists the tasks in a queue.
 *
 * By default, only the BASIC view is retrieved
 * due to performance considerations;
 * response_view controls the
 * subset of information which is returned.
 *
 * The tasks may be returned in any order. The ordering may change at any
 * time.
 */
export type PathV2ParentTasksGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2ParentTasksGet<TAuthInfo> & R) => Promise<ResponseV2ParentTasksGet>;

export interface CreateTaskRequest {
    /**
     * The response_view specifies which subset of the Task will be
     * returned.
     *
     * By default response_view is BASIC; not all
     * information is retrieved by default because some data, such as
     * payloads, might be desirable to return only when needed because
     * of its large size or because of the sensitivity of data that it
     * contains.
     *
     * Authorization for FULL requires
     * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
     * permission on the Task resource.
     */
    responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    /**
     * A unit of scheduled work.
     */
    task?: Task;
    [key: string]: unknown;
}

export type ResponseV2ParentTasksPost = ResponseOapi<Task, 200, string>;

/**
 * Creates a task and adds it to a queue.
 *
 * Tasks cannot be updated after creation; there is no UpdateTask command.
 *
 * * The maximum task size is 100KB.
 */
export interface RequestV2ParentTasksPost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * Required. The queue name. For example:
         * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID\`
         *
         * The queue must already exist.
         */
        parent: string;
    };
    body?: CreateTaskRequest;
    authInfo: TAuthInfo;
}

/**
 * Creates a task and adds it to a queue.
 *
 * Tasks cannot be updated after creation; there is no UpdateTask command.
 *
 * * The maximum task size is 100KB.
 */
export type PathV2ParentTasksPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2ParentTasksPost<TAuthInfo> & R) => Promise<ResponseV2ParentTasksPost>;

export interface GetIamPolicyRequest {
    /**
     * Encapsulates settings provided to GetIamPolicy.
     */
    options?: GetPolicyOptions;
    [key: string]: unknown;
}

export interface GetPolicyOptions {
    /**
     * Optional. The policy format version to be returned.
     * Acceptable values are 0, 1, and 3.
     * If the value is 0, or the field is omitted, policy format version 1 will be
     * returned.
     */
    requestedPolicyVersion?: number;
    [key: string]: unknown;
}

export interface Policy {
    /**
     * Associates a list of \`members\` to a \`role\`.
     * \`bindings\` with no members will result in an error.
     */
    bindings?: Binding[];
    /**
     * \`etag\` is used for optimistic concurrency control as a way to help
     * prevent simultaneous updates of a policy from overwriting each other.
     * It is strongly suggested that systems make use of the \`etag\` in the
     * read-modify-write cycle to perform policy updates in order to avoid race
     * conditions: An \`etag\` is returned in the response to \`getIamPolicy\`, and
     * systems are expected to put that etag in the request to \`setIamPolicy\` to
     * ensure that their change will be applied to the same version of the policy.
     *
     * If no \`etag\` is provided in the call to \`setIamPolicy\`, then the existing
     * policy is overwritten.
     */
    etag?: string;
    /**
     * Deprecated.
     */
    version?: number;
    [key: string]: unknown;
}

export interface Binding {
    /**
     * Represents an expression text. Example:
     *
     *     title: "User account presence"
     *     description: "Determines whether the request has a user account"
     *     expression: "size(request.user) > 0"
     */
    condition?: Expr;
    /**
     * Specifies the identities requesting access for a Cloud Platform resource.
     * \`members\` can have the following values:
     *
     * * \`allUsers\`: A special identifier that represents anyone who is
     *    on the internet; with or without a Google account.
     *
     * * \`allAuthenticatedUsers\`: A special identifier that represents anyone
     *    who is authenticated with a Google account or a service account.
     *
     * * \`user:{emailid}\`: An email address that represents a specific Google
     *    account. For example, \`alice@example.com\` .
     *
     *
     * * \`serviceAccount:{emailid}\`: An email address that represents a service
     *    account. For example, \`my-other-app@appspot.gserviceaccount.com\`.
     *
     * * \`group:{emailid}\`: An email address that represents a Google group.
     *    For example, \`admins@example.com\`.
     *
     *
     * * \`domain:{domain}\`: The G Suite domain (primary) that represents all the
     *    users of that domain. For example, \`google.com\` or \`example.com\`.
     */
    members?: string[];
    /**
     * Role that is assigned to \`members\`.
     * For example, \`roles/viewer\`, \`roles/editor\`, or \`roles/owner\`.
     */
    role?: string;
    [key: string]: unknown;
}

export interface Expr {
    /**
     * An optional description of the expression. This is a longer text which
     * describes the expression, e.g. when hovered over it in a UI.
     */
    description?: string;
    /**
     * Textual representation of an expression in
     * Common Expression Language syntax.
     *
     * The application context of the containing message determines which
     * well-known feature set of CEL is supported.
     */
    expression?: string;
    /**
     * An optional string indicating the location of the expression for error
     * reporting, e.g. a file name and a position in the file.
     */
    location?: string;
    /**
     * An optional title for the expression, i.e. a short string describing
     * its purpose. This can be used e.g. in UIs which allow to enter the
     * expression.
     */
    title?: string;
    [key: string]: unknown;
}

export type ResponseV2ResourcegetIamPolicyPost = ResponseOapi<Policy, 200, string>;

/**
 * Gets the access control policy for a Queue.
 * Returns an empty policy if the resource exists and does not have a policy
 * set.
 *
 * Authorization requires the following
 * [Google IAM](https://cloud.google.com/iam) permission on the specified
 * resource parent:
 *
 * * \`cloudtasks.queues.getIamPolicy\`
 */
export interface RequestV2ResourcegetIamPolicyPost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * REQUIRED: The resource for which the policy is being requested.
         * See the operation documentation for the appropriate value for this field.
         */
        resource: string;
    };
    body?: GetIamPolicyRequest;
    authInfo: TAuthInfo;
}

/**
 * Gets the access control policy for a Queue.
 * Returns an empty policy if the resource exists and does not have a policy
 * set.
 *
 * Authorization requires the following
 * [Google IAM](https://cloud.google.com/iam) permission on the specified
 * resource parent:
 *
 * * \`cloudtasks.queues.getIamPolicy\`
 */
export type PathV2ResourcegetIamPolicyPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2ResourcegetIamPolicyPost<TAuthInfo> & R) => Promise<ResponseV2ResourcegetIamPolicyPost>;

export interface SetIamPolicyRequest {
    /**
     * Defines an Identity and Access Management (IAM) policy. It is used to
     * specify access control policies for Cloud Platform resources.
     *
     *
     * A \`Policy\` consists of a list of \`bindings\`. A \`binding\` binds a list of
     * \`members\` to a \`role\`, where the members can be user accounts, Google groups,
     * Google domains, and service accounts. A \`role\` is a named list of permissions
     * defined by IAM.
     *
     * **JSON Example**
     *
     *     {
     *       "bindings": [
     *         {
     *           "role": "roles/owner",
     *           "members": [
     *             "user:mike@example.com",
     *             "group:admins@example.com",
     *             "domain:google.com",
     *             "serviceAccount:my-other-app@appspot.gserviceaccount.com"
     *           ]
     *         },
     *         {
     *           "role": "roles/viewer",
     *           "members": ["user:sean@example.com"]
     *         }
     *       ]
     *     }
     *
     * **YAML Example**
     *
     *     bindings:
     *     - members:
     *       - user:mike@example.com
     *       - group:admins@example.com
     *       - domain:google.com
     *       - serviceAccount:my-other-app@appspot.gserviceaccount.com
     *       role: roles/owner
     *     - members:
     *       - user:sean@example.com
     *       role: roles/viewer
     *
     *
     * For a description of IAM and its features, see the
     * [IAM developer's guide](https://cloud.google.com/iam/docs).
     */
    policy?: Policy;
    [key: string]: unknown;
}

export type ResponseV2ResourcesetIamPolicyPost = ResponseOapi<Policy, 200, string>;

/**
 * Sets the access control policy for a Queue. Replaces any existing
 * policy.
 *
 * Note: The Cloud Console does not check queue-level IAM permissions yet.
 * Project-level permissions are required to use the Cloud Console.
 *
 * Authorization requires the following
 * [Google IAM](https://cloud.google.com/iam) permission on the specified
 * resource parent:
 *
 * * \`cloudtasks.queues.setIamPolicy\`
 */
export interface RequestV2ResourcesetIamPolicyPost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * REQUIRED: The resource for which the policy is being specified.
         * See the operation documentation for the appropriate value for this field.
         */
        resource: string;
    };
    body?: SetIamPolicyRequest;
    authInfo: TAuthInfo;
}

/**
 * Sets the access control policy for a Queue. Replaces any existing
 * policy.
 *
 * Note: The Cloud Console does not check queue-level IAM permissions yet.
 * Project-level permissions are required to use the Cloud Console.
 *
 * Authorization requires the following
 * [Google IAM](https://cloud.google.com/iam) permission on the specified
 * resource parent:
 *
 * * \`cloudtasks.queues.setIamPolicy\`
 */
export type PathV2ResourcesetIamPolicyPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2ResourcesetIamPolicyPost<TAuthInfo> & R) => Promise<ResponseV2ResourcesetIamPolicyPost>;

export interface TestIamPermissionsRequest {
    /**
     * The set of permissions to check for the \`resource\`. Permissions with
     * wildcards (such as '*' or 'storage.*') are not allowed. For more
     * information see
     * [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     */
    permissions?: string[];
    [key: string]: unknown;
}

export interface TestIamPermissionsResponse {
    /**
     * A subset of \`TestPermissionsRequest.permissions\` that the caller is
     * allowed.
     */
    permissions?: string[];
    [key: string]: unknown;
}

export type ResponseV2ResourcetestIamPermissionsPost = ResponseOapi<TestIamPermissionsResponse, 200, string>;

/**
 * Returns permissions that a caller has on a Queue.
 * If the resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building permission-aware
 * UIs and command-line tools, not for authorization checking. This operation
 * may "fail open" without warning.
 */
export interface RequestV2ResourcetestIamPermissionsPost<TAuthInfo> extends OapiContext {
    query: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt: "json" | "media" | "proto";
    };
    path: {
        /**
         * REQUIRED: The resource for which the policy detail is being requested.
         * See the operation documentation for the appropriate value for this field.
         */
        resource: string;
    };
    body?: TestIamPermissionsRequest;
    authInfo: TAuthInfo;
}

/**
 * Returns permissions that a caller has on a Queue.
 * If the resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building permission-aware
 * UIs and command-line tools, not for authorization checking. This operation
 * may "fail open" without warning.
 */
export type PathV2ResourcetestIamPermissionsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV2ResourcetestIamPermissionsPost<TAuthInfo> & R) => Promise<ResponseV2ResourcetestIamPermissionsPost>;

export interface Config<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> extends OapiConfig<R> {
    paths: {
        "/v2/{+name}": {
            /**
             * Deletes a task.
             *
             * A task can be deleted if it is scheduled or dispatched. A task
             * cannot be deleted if it has executed successfully or permanently
             * failed.
             */
            delete: PathV2NameDelete<R, TAuthInfo>;
            /**
             * Gets a task.
             */
            get: PathV2NameGet<R, TAuthInfo>;
            /**
             * Updates a queue.
             *
             * This method creates the queue if it does not exist and updates
             * the queue if it does exist.
             *
             * Queues created with this method allow tasks to live for a maximum of 31
             * days. After a task is 31 days old, the task will be deleted regardless of whether
             * it was dispatched or not.
             *
             * WARNING: Using this method may have unintended side effects if you are
             * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
             * Read
             * [Overview of Queue Management and
             * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
             * this method.
             */
            patch: PathV2NamePatch<R, TAuthInfo>;
        };
        "/v2/{+name}/locations": {
            /**
             * Lists information about the supported locations for this service.
             */
            get: PathV2NameLocationsGet<R, TAuthInfo>;
        };
        "/v2/{+name}:pause": {
            /**
             * Pauses the queue.
             *
             * If a queue is paused then the system will stop dispatching tasks
             * until the queue is resumed via
             * ResumeQueue. Tasks can still be added
             * when the queue is paused. A queue is paused if its
             * state is PAUSED.
             */
            post: PathV2NamepausePost<R, TAuthInfo>;
        };
        "/v2/{+name}:purge": {
            /**
             * Purges a queue by deleting all of its tasks.
             *
             * All tasks created before this method is called are permanently deleted.
             *
             * Purge operations can take up to one minute to take effect. Tasks
             * might be dispatched before the purge takes effect. A purge is irreversible.
             */
            post: PathV2NamepurgePost<R, TAuthInfo>;
        };
        "/v2/{+name}:resume": {
            /**
             * Resume a queue.
             *
             * This method resumes a queue after it has been
             * PAUSED or
             * DISABLED. The state of a queue is stored
             * in the queue's state; after calling this method it
             * will be set to RUNNING.
             *
             * WARNING: Resuming many high-QPS queues at the same time can
             * lead to target overloading. If you are resuming high-QPS
             * queues, follow the 500/50/5 pattern described in
             * [Managing Cloud Tasks Scaling
             * Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
             */
            post: PathV2NameresumePost<R, TAuthInfo>;
        };
        "/v2/{+name}:run": {
            /**
             * Forces a task to run now.
             *
             * When this method is called, Cloud Tasks will dispatch the task, even if
             * the task is already running, the queue has reached its RateLimits or
             * is PAUSED.
             *
             * This command is meant to be used for manual debugging. For
             * example, RunTask can be used to retry a failed
             * task after a fix has been made or to manually force a task to be
             * dispatched now.
             *
             * The dispatched task is returned. That is, the task that is returned
             * contains the status after the task is dispatched but
             * before the task is received by its target.
             *
             * If Cloud Tasks receives a successful response from the task's
             * target, then the task will be deleted; otherwise the task's
             * schedule_time will be reset to the time that
             * RunTask was called plus the retry delay specified
             * in the queue's RetryConfig.
             *
             * RunTask returns
             * NOT_FOUND when it is called on a
             * task that has already succeeded or permanently failed.
             */
            post: PathV2NamerunPost<R, TAuthInfo>;
        };
        "/v2/{+parent}/queues": {
            /**
             * Lists queues.
             *
             * Queues are returned in lexicographical order.
             */
            get: PathV2ParentQueuesGet<R, TAuthInfo>;
            /**
             * Creates a queue.
             *
             * Queues created with this method allow tasks to live for a maximum of 31
             * days. After a task is 31 days old, the task will be deleted regardless of whether
             * it was dispatched or not.
             *
             * WARNING: Using this method may have unintended side effects if you are
             * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
             * Read
             * [Overview of Queue Management and
             * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
             * this method.
             */
            post: PathV2ParentQueuesPost<R, TAuthInfo>;
        };
        "/v2/{+parent}/tasks": {
            /**
             * Lists the tasks in a queue.
             *
             * By default, only the BASIC view is retrieved
             * due to performance considerations;
             * response_view controls the
             * subset of information which is returned.
             *
             * The tasks may be returned in any order. The ordering may change at any
             * time.
             */
            get: PathV2ParentTasksGet<R, TAuthInfo>;
            /**
             * Creates a task and adds it to a queue.
             *
             * Tasks cannot be updated after creation; there is no UpdateTask command.
             *
             * * The maximum task size is 100KB.
             */
            post: PathV2ParentTasksPost<R, TAuthInfo>;
        };
        "/v2/{+resource}:getIamPolicy": {
            /**
             * Gets the access control policy for a Queue.
             * Returns an empty policy if the resource exists and does not have a policy
             * set.
             *
             * Authorization requires the following
             * [Google IAM](https://cloud.google.com/iam) permission on the specified
             * resource parent:
             *
             * * \`cloudtasks.queues.getIamPolicy\`
             */
            post: PathV2ResourcegetIamPolicyPost<R, TAuthInfo>;
        };
        "/v2/{+resource}:setIamPolicy": {
            /**
             * Sets the access control policy for a Queue. Replaces any existing
             * policy.
             *
             * Note: The Cloud Console does not check queue-level IAM permissions yet.
             * Project-level permissions are required to use the Cloud Console.
             *
             * Authorization requires the following
             * [Google IAM](https://cloud.google.com/iam) permission on the specified
             * resource parent:
             *
             * * \`cloudtasks.queues.setIamPolicy\`
             */
            post: PathV2ResourcesetIamPolicyPost<R, TAuthInfo>;
        };
        "/v2/{+resource}:testIamPermissions": {
            /**
             * Returns permissions that a caller has on a Queue.
             * If the resource does not exist, this will return an empty set of
             * permissions, not a NOT_FOUND error.
             *
             * Note: This operation is designed to be used for building permission-aware
             * UIs and command-line tools, not for authorization checking. This operation
             * may "fail open" without warning.
             */
            post: PathV2ResourcetestIamPermissionsPost<R, TAuthInfo>;
        };
    };
    security: {
        Oauth2: OapiSecurityResolver<R, TAuthInfo>;
        Oauth2c: OapiSecurityResolver<R, TAuthInfo>;
    };
}
"
`;

exports[`Types Content Test converter.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty>(config: Config<R>): Promise<HttpListener<R>> => openApi(config);

export type ResponseWellknownDocsGet = ResponseOapi<unknown, 200, "text/html">;

export type PathWellknownDocsGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownDocsGet>;

export type ResponseWellknownOpenapiyamlGet = ResponseOapi<unknown, 200, "text/yaml">;

export type PathWellknownOpenapiyamlGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownOpenapiyamlGet>;

export interface HttpError {
    message?: string;
}

export type ResponseHtmlPost = ResponseOapi<unknown, 200, "application/pdf"> | ResponseOapi<HttpError, number, "application/json">;

/**
 * Generate PDF from html
 */
export interface RequestHtmlPost extends OapiContext {
    body: any;
}

export type PathHtmlPost<R extends Empty = Empty> = (req: RequestHtmlPost & R) => Promise<ResponseHtmlPost>;

export interface Config<R extends Empty = Empty> extends OapiConfig<R> {
    paths: {
        "/.well-known/docs": {
            get: PathWellknownDocsGet<R>;
        };
        "/.well-known/openapi.yaml": {
            get: PathWellknownOpenapiyamlGet<R>;
        };
        "/html": {
            post: PathHtmlPost<R>;
        };
    };
}
"
`;

exports[`Types Content Test link-example.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty>(config: Config<R>): Promise<HttpListener<R>> => openApi(config);

export interface user {
    username?: string;
    uuid?: string;
    [key: string]: unknown;
}

export type Response20UsersUsernameGet = ResponseOapi<user, 200, "application/json">;

export interface Request20UsersUsernameGet extends OapiContext {
    path: {
        username: string;
    };
}

export type Path20UsersUsernameGet<R extends Empty = Empty> = (req: Request20UsersUsernameGet & R) => Promise<Response20UsersUsernameGet>;

export interface repository {
    slug?: string;
    owner?: user;
    [key: string]: unknown;
}

export type Response20RepositoriesUsernameGet = ResponseOapi<repository[], 200, "application/json">;

export interface Request20RepositoriesUsernameGet extends OapiContext {
    path: {
        username: string;
    };
}

export type Path20RepositoriesUsernameGet<R extends Empty = Empty> = (req: Request20RepositoriesUsernameGet & R) => Promise<Response20RepositoriesUsernameGet>;

export type Response20RepositoriesUsernameSlugGet = ResponseOapi<repository, 200, "application/json">;

export interface Request20RepositoriesUsernameSlugGet extends OapiContext {
    path: {
        username: string;
        slug: string;
    };
}

export type Path20RepositoriesUsernameSlugGet<R extends Empty = Empty> = (req: Request20RepositoriesUsernameSlugGet & R) => Promise<Response20RepositoriesUsernameSlugGet>;

export interface pullrequest {
    id?: number;
    title?: string;
    repository?: repository;
    author?: user;
    [key: string]: unknown;
}

export type Response20RepositoriesUsernameSlugPullrequestsGet = ResponseOapi<pullrequest[], 200, "application/json">;

export interface Request20RepositoriesUsernameSlugPullrequestsGet extends OapiContext {
    path: {
        username: string;
        slug: string;
    };
    query: {
        state?: "open" | "merged" | "declined";
    };
}

export type Path20RepositoriesUsernameSlugPullrequestsGet<R extends Empty = Empty> = (req: Request20RepositoriesUsernameSlugPullrequestsGet & R) => Promise<Response20RepositoriesUsernameSlugPullrequestsGet>;

export type Response20RepositoriesUsernameSlugPullrequestsPidGet = ResponseOapi<pullrequest, 200, "application/json">;

export interface Request20RepositoriesUsernameSlugPullrequestsPidGet extends OapiContext {
    path: {
        username: string;
        slug: string;
        pid: string;
    };
}

export type Path20RepositoriesUsernameSlugPullrequestsPidGet<R extends Empty = Empty> = (req: Request20RepositoriesUsernameSlugPullrequestsPidGet & R) => Promise<Response20RepositoriesUsernameSlugPullrequestsPidGet>;

export type Response20RepositoriesUsernameSlugPullrequestsPidMergePost = ResponseOapi<unknown, 204, string>;

export interface Request20RepositoriesUsernameSlugPullrequestsPidMergePost extends OapiContext {
    path: {
        username: string;
        slug: string;
        pid: string;
    };
}

export type Path20RepositoriesUsernameSlugPullrequestsPidMergePost<R extends Empty = Empty> = (req: Request20RepositoriesUsernameSlugPullrequestsPidMergePost & R) => Promise<Response20RepositoriesUsernameSlugPullrequestsPidMergePost>;

export interface Config<R extends Empty = Empty> extends OapiConfig<R> {
    paths: {
        "/2.0/users/{username}": {
            get: Path20UsersUsernameGet<R>;
        };
        "/2.0/repositories/{username}": {
            get: Path20RepositoriesUsernameGet<R>;
        };
        "/2.0/repositories/{username}/{slug}": {
            get: Path20RepositoriesUsernameSlugGet<R>;
        };
        "/2.0/repositories/{username}/{slug}/pullrequests": {
            get: Path20RepositoriesUsernameSlugPullrequestsGet<R>;
        };
        "/2.0/repositories/{username}/{slug}/pullrequests/{pid}": {
            get: Path20RepositoriesUsernameSlugPullrequestsPidGet<R>;
        };
        "/2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge": {
            post: Path20RepositoriesUsernameSlugPullrequestsPidMergePost<R>;
        };
    };
}
"
`;

exports[`Types Content Test petstore.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty>(config: Config<R>): Promise<HttpListener<R>> => openApi(config);

export type Pets = Pet[];

export interface Pet {
    id: number;
    name: string;
    tag?: string;
    [key: string]: unknown;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: unknown;
}

export type ResponsePetsGet = ResponseOapi<Pets, 200, "application/json"> | ResponseOapi<Error, number, "application/json">;

/**
 * List all pets
 */
export interface RequestPetsGet extends OapiContext {
    query: {
        /**
         * How many items to return at one time (max 100)
         */
        limit?: number;
    };
}

export type PathPetsGet<R extends Empty = Empty> = (req: RequestPetsGet & R) => Promise<ResponsePetsGet>;

export type ResponsePetsPost = ResponseOapi<unknown, 201, string> | ResponseOapi<Error, number, "application/json">;

export type PathPetsPost<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponsePetsPost>;

export type ResponsePetsPetIdGet = ResponseOapi<Pets, 200, "application/json"> | ResponseOapi<Error, number, "application/json">;

/**
 * Info for a specific pet
 */
export interface RequestPetsPetIdGet extends OapiContext {
    path: {
        /**
         * The id of the pet to retrieve
         */
        petId: string;
    };
}

export type PathPetsPetIdGet<R extends Empty = Empty> = (req: RequestPetsPetIdGet & R) => Promise<ResponsePetsPetIdGet>;

export interface Config<R extends Empty = Empty> extends OapiConfig<R> {
    paths: {
        "/pets": {
            get: PathPetsGet<R>;
            post: PathPetsPost<R>;
        };
        "/pets/{petId}": {
            get: PathPetsPetIdGet<R>;
        };
    };
}
"
`;

exports[`Types Content Test petstore-expanded.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty>(config: Config<R>): Promise<HttpListener<R>> => openApi(config);

export type Pet = NewPet & {
    id: number;
    [key: string]: unknown;
};

export interface NewPet {
    name: string;
    tag?: string;
    [key: string]: unknown;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: unknown;
}

export type ResponsePetsGet = ResponseOapi<Pet[], 200, "application/json"> | ResponseOapi<Error, number, "application/json">;

/**
 * Returns all pets from the system that the user has access to
 * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
 *
 * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
 *
 */
export interface RequestPetsGet extends OapiContext {
    query: {
        /**
         * tags to filter by
         */
        tags?: string[];
        /**
         * maximum number of results to return
         */
        limit?: number;
    };
}

/**
 * Returns all pets from the system that the user has access to
 * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
 *
 * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
 *
 */
export type PathPetsGet<R extends Empty = Empty> = (req: RequestPetsGet & R) => Promise<ResponsePetsGet>;

export type ResponsePetsPost = ResponseOapi<Pet, 200, "application/json"> | ResponseOapi<Error, number, "application/json">;

/**
 * Creates a new pet in the store.  Duplicates are allowed
 */
export interface RequestPetsPost extends OapiContext {
    body: NewPet;
}

/**
 * Creates a new pet in the store.  Duplicates are allowed
 */
export type PathPetsPost<R extends Empty = Empty> = (req: RequestPetsPost & R) => Promise<ResponsePetsPost>;

export type ResponsePetsIdGet = ResponseOapi<Pet, 200, "application/json"> | ResponseOapi<Error, number, "application/json">;

/**
 * Returns a user based on a single ID, if the user does not have access to the pet
 */
export interface RequestPetsIdGet extends OapiContext {
    path: {
        /**
         * ID of pet to fetch
         */
        id: number;
    };
}

/**
 * Returns a user based on a single ID, if the user does not have access to the pet
 */
export type PathPetsIdGet<R extends Empty = Empty> = (req: RequestPetsIdGet & R) => Promise<ResponsePetsIdGet>;

export type ResponsePetsIdDelete = ResponseOapi<unknown, 204, string> | ResponseOapi<Error, number, "application/json">;

/**
 * deletes a single pet based on the ID supplied
 */
export interface RequestPetsIdDelete extends OapiContext {
    path: {
        /**
         * ID of pet to delete
         */
        id: number;
    };
}

/**
 * deletes a single pet based on the ID supplied
 */
export type PathPetsIdDelete<R extends Empty = Empty> = (req: RequestPetsIdDelete & R) => Promise<ResponsePetsIdDelete>;

export interface Config<R extends Empty = Empty> extends OapiConfig<R> {
    paths: {
        "/pets": {
            /**
             * Returns all pets from the system that the user has access to
             * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
             *
             * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
             *
             */
            get: PathPetsGet<R>;
            /**
             * Creates a new pet in the store.  Duplicates are allowed
             */
            post: PathPetsPost<R>;
        };
        "/pets/{id}": {
            /**
             * Returns a user based on a single ID, if the user does not have access to the pet
             */
            get: PathPetsIdGet<R>;
            /**
             * deletes a single pet based on the ID supplied
             */
            delete: PathPetsIdDelete<R>;
        };
    };
}
"
`;

exports[`Types Content Test pol.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, OapiSecurityResolver, OapiAuthInfo, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo>(config: Config<R, TAuthInfo>): Promise<HttpListener<R>> => openApi(config);

export interface CreateAuthorizationToken {
    Data: {
        Audience: Audience;
        /**
         * Stringified UUIDv4.
         * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
         */
        ClientSecret: UUID;
        /**
         * Stringified UUIDv4.
         * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
         */
        ClientId: UUID;
        GrantType: "client_credentials";
        [key: string]: unknown;
    };
}

export type Audience = "BankAccounts" | "DirectDebits" | "PaymentSession" | "DirectCredits" | "InboundTransactions" | "FakeCoEvents" | "PlatformDatabaseApi";

export type UUID = string;

export type Response200AuthenticationTokenRead = AuthenticationToken;

export interface AuthenticationToken {
    Data: {
        ExpiresIn: number;
        TokenType: "Bearer";
        AccessToken: string;
        [key: string]: unknown;
    };
}

export type PolErrorResponse = OBErrorResponse1_PolErrorCode_;

export interface OBErrorResponse1_PolErrorCode_ {
    /**
     * A high level textual error code, to help categorize the errors. OBIE doesn't standardise this field.
     */
    Code: string;
    /**
     * A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
     */
    Id?: string;
    /**
     * Brief Error message, e.g., 'There is something wrong with the request parameters provided'
     */
    Message: string;
    /**
     * An array of detail error codes, and messages, and URLs to documentation to help remediation.
     */
    Errors: OBError1_PolErrorCode_[];
}

export interface OBError1_PolErrorCode_ {
    ErrorCode: PolErrorCode;
    /**
     * A description of the error that occurred. e.g. 'RequestedExecutionDateTime must be in future'. OBIE doesn't standardise this field
     */
    Message: string;
    /**
     * Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
     */
    Path?: string;
    /**
     * URL to help remediate the problem, or provide more information, or to API Reference, or help etc
     */
    Url?: string;
}

export type PolErrorCode = "Field.Expected" | "Field.Invalid" | "Field.InvalidDate" | "Field.Missing" | "Field.Unexpected" | "Header.Invalid" | "Header.Missing" | "Reauthenticate" | "Resource.ConsentMismatch" | "Resource.InvalidConsentStatus" | "Resource.InvalidFormat" | "Resource.NotFound" | "Rules.AfterCutOffDateTime" | "Rules.DuplicateReference" | "Signature.Invalid" | "Signature.InvalidClaim" | "Signature.Malformed" | "Signature.Missing" | "Signature.MissingClaim" | "Signature.Unexpected" | "UnexpectedError" | "Unsupported.AccountIdentifier" | "Unsupported.AccountSecondaryIdentifier" | "Unsupported.Currency" | "Unsupported.Frequency" | "Unsupported.LocalInstrument" | "Unsupported.Scheme" | "Body.Malformed" | "Conflict";

export type ResponseAuthenticationV100OauthTokenPost = ResponseOapi<Response200AuthenticationTokenRead, 200, "application/json"> | ResponseOapi<PolErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 404, string> | ResponseOapi<PolErrorResponse, 500, "application/json">;

/**
 * Request a Bearer token
 */
export interface RequestAuthenticationV100OauthTokenPost<TAuthInfo> extends OapiContext {
    body: CreateAuthorizationToken;
    authInfo: TAuthInfo;
}

/**
 * Request a Bearer token
 */
export type PathAuthenticationV100OauthTokenPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestAuthenticationV100OauthTokenPost<TAuthInfo> & R) => Promise<ResponseAuthenticationV100OauthTokenPost>;

export interface CreateUKBankAccountInformation {
    Data: {
        AccountNumber: AccountNumber;
        SortCode: SortCode;
        [key: string]: unknown;
    };
}

export type AccountNumber = string;

export type SortCode = string;

export type Response200UKBankAccountInformation = BankAccountResponse;

export interface BankAccountResponse {
    Data: {
        SupportsFasterPayments: boolean;
        SupportsDirectCredits: boolean;
        SupportsDirectDebits: boolean;
        AccountNumberExistsAtSortCode: boolean;
        AccountNumber: AccountNumber;
        SortCode: SortCode;
        [key: string]: unknown;
    };
}

export type ResponseBankaccountUkV100InformationPost = ResponseOapi<Response200UKBankAccountInformation, 200, "application/json"> | ResponseOapi<PolErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<PolErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<PolErrorResponse, 500, "application/json">;

/**
 * Retrieve information on a UK bank account
 *
 * Required OAuth Audience: <code>BankAccounts</code>
 */
export interface RequestBankaccountUkV100InformationPost<TAuthInfo> extends OapiContext {
    body: CreateUKBankAccountInformation;
    authInfo: TAuthInfo;
}

/**
 * Retrieve information on a UK bank account
 *
 * Required OAuth Audience: <code>BankAccounts</code>
 */
export type PathBankaccountUkV100InformationPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestBankaccountUkV100InformationPost<TAuthInfo> & R) => Promise<ResponseBankaccountUkV100InformationPost>;

export type IdempotencyKey = string;

export interface CreateDirectDebitCollection {
    Data: {
        DirectDebitCollection?: OBCreateDirectDebitCollection;
        [key: string]: unknown;
    };
}

export interface OBCreateDirectDebitCollection {
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    PaymentAmount: Amount;
    PaymentDate: Date;
}

export interface Amount {
    /**
     * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     */
    Amount: string;
    Currency: "GBP";
}

export type Response200DirectDebitCollectionRead = OBReadDirectDebitCollection;

export interface OBReadDirectDebitCollection {
    Data: {
        DirectDebitCollection?: OBDirectDebitCollection;
        [key: string]: unknown;
    };
}

export interface OBDirectDebitCollection {
    /**
     * Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.
     */
    CollectionIdentification: string;
    PaymentAmount: {
        Currency: "GBP";
        Amount: string;
        [key: string]: unknown;
    };
    PaymentDate: string;
}

export type BacsErrorResponse = OBErrorResponse1_PolErrorCode_or_BacsErrorCode_;

export interface OBErrorResponse1_PolErrorCode_or_BacsErrorCode_ {
    /**
     * A high level textual error code, to help categorize the errors. OBIE doesn't standardise this field.
     */
    Code: string;
    /**
     * A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
     */
    Id?: string;
    /**
     * Brief Error message, e.g., 'There is something wrong with the request parameters provided'
     */
    Message: string;
    /**
     * An array of detail error codes, and messages, and URLs to documentation to help remediation.
     */
    Errors: OBError1_PolErrorCode_or_BacsErrorCode_[];
}

export interface OBError1_PolErrorCode_or_BacsErrorCode_ {
    /**
     * Low level textual error code, e.g., Field.Missing
     */
    ErrorCode: PolErrorCode | BacsErrorCode;
    /**
     * A description of the error that occurred. e.g. 'RequestedExecutionDateTime must be in future'. OBIE doesn't standardise this field
     */
    Message: string;
    /**
     * Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
     */
    Path?: string;
    /**
     * URL to help remediate the problem, or provide more information, or to API Reference, or help etc
     */
    Url?: string;
}

export type BacsErrorCode = "0" | "1" | "6" | "A";

export type ResponseDirectdebitV100InstructionsMandateIdentificationCollectionsPost = ResponseOapi<Response200DirectDebitCollectionRead, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<BacsErrorResponse, 500, "application/json">;

/**
 * Create Direct Debit Collections
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export interface RequestDirectdebitV100InstructionsMandateIdentificationCollectionsPost<TAuthInfo> extends OapiContext {
    path: {
        MandateIdentification: string;
    };
    headers: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
    body: CreateDirectDebitCollection;
    authInfo: TAuthInfo;
}

/**
 * Create Direct Debit Collections
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export type PathDirectdebitV100InstructionsMandateIdentificationCollectionsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebitV100InstructionsMandateIdentificationCollectionsPost<TAuthInfo> & R) => Promise<ResponseDirectdebitV100InstructionsMandateIdentificationCollectionsPost>;

export interface DirectDebitInstruction {
    Data: {
        DirectDebitInstruction?: OBCreateDirectDebitInstruction;
        [key: string]: unknown;
    };
    /**
     * MetaData
     * Meta Data relevant to the payload
     */
    Meta?: Meta;
}

export interface OBCreateDirectDebitInstruction {
    /**
     *
     * The Debtor object allows users to submit name of the client.
     */
    Debtor: Debtor;
    /**
     *
     * The DebtorAccount object allows users to submit direct debit account information.
     */
    DebtorAccount: DebtorAccount;
    Frequency: Frequency;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    RecurringPaymentAmount?: Amount;
    FirstPaymentDate?: Date;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    FirstPaymentAmount?: Amount;
}

export interface Debtor {
    Name: string;
}

export interface DebtorAccount {
    SchemeName: "SortCodeAccountNumber";
    Identification: string;
    Name: string;
}

export interface Frequency {
    Schedule: "Ad-hoc" | "Ad-hoc Plus" | "Monthly";
    /**
     * Required if Schedule is \`Monthly\`. Zero-indexed, max value 30
     */
    DayOfMonth?: number;
}

export type Meta = any;

export type Response200DirectDebitInstructionRead = OBReadDirectDebit;

export interface OBReadDirectDebit {
    Data: {
        /**
         * Account to or from which a cash entry is made.
         */
        DirectDebitInstruction?: OBDirectDebit;
        [key: string]: unknown;
    };
    /**
     * MetaData
     * Meta Data relevant to the payload
     */
    Meta?: Meta;
}

export interface OBDirectDebit {
    /**
     * Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.
     */
    MandateIdentification: string;
    /**
     *
     * The Debtor object allows users to submit name of the client.
     */
    Debtor: Debtor;
    /**
     *
     * The DebtorAccount object allows users to submit direct debit account information.
     */
    DebtorAccount: DebtorAccount;
    Frequency: Frequency;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    RecurringPaymentAmount?: Amount;
    /**
     * Specifies the status of the direct debit in code form.
     */
    StatusCode: StatusCode;
    FirstPaymentDate?: string;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    FirstPaymentAmount?: Amount;
}

export type StatusCode = "Active" | "Suspended" | "Cancelled" | "Inactive";

export type ResponseDirectdebitV100InstructionsPost = ResponseOapi<Response200DirectDebitInstructionRead, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<BacsErrorResponse, 409, "application/json"> | ResponseOapi<BacsErrorResponse, 500, "application/json">;

/**
 * Create Direct Debit Instruction
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export interface RequestDirectdebitV100InstructionsPost<TAuthInfo> extends OapiContext {
    headers: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
    body: DirectDebitInstruction;
    authInfo: TAuthInfo;
}

/**
 * Create Direct Debit Instruction
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export type PathDirectdebitV100InstructionsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebitV100InstructionsPost<TAuthInfo> & R) => Promise<ResponseDirectdebitV100InstructionsPost>;

export interface OBReadUpdateDirectDebit {
    /**
     * MetaData
     * Meta Data relevant to the payload
     */
    Meta: Meta;
}

export type Response200UpdateDirectDebitInstructionRead = OBReadUpdateDirectDebit;

export type ResponseDirectdebitV100InstructionsMandateIdentificationPut = ResponseOapi<Response200UpdateDirectDebitInstructionRead, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<BacsErrorResponse, 409, "application/json"> | ResponseOapi<BacsErrorResponse, 500, "application/json">;

/**
 * Update Direct Debit Instruction
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export interface RequestDirectdebitV100InstructionsMandateIdentificationPut<TAuthInfo> extends OapiContext {
    path: {
        /**
         * The mandate identification (bacs reference)
         */
        MandateIdentification: string;
    };
    body: OBReadUpdateDirectDebit;
    authInfo: TAuthInfo;
}

/**
 * Update Direct Debit Instruction
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export type PathDirectdebitV100InstructionsMandateIdentificationPut<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebitV100InstructionsMandateIdentificationPut<TAuthInfo> & R) => Promise<ResponseDirectdebitV100InstructionsMandateIdentificationPut>;

export interface UpdateDirectDebitInstructionStatus {
    Data: {
        /**
         * Specifies the status of the direct debit in code form.
         */
        StatusCode: StatusCode;
        [key: string]: unknown;
    };
}

export type Response200DirectDebitInstructionUpdateStatus = UpdateDirectDebitInstructionStatus;

export type ResponseDirectdebitV100InstructionsMandateIdentificationStatusPut = ResponseOapi<Response200DirectDebitInstructionUpdateStatus, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<BacsErrorResponse, 409, "application/json"> | ResponseOapi<BacsErrorResponse, 500, "application/json">;

/**
 * Update Direct Debit Instruction Status
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export interface RequestDirectdebitV100InstructionsMandateIdentificationStatusPut<TAuthInfo> extends OapiContext {
    path: {
        /**
         * The mandate identification (bacs reference)
         */
        MandateIdentification: string;
    };
    body: UpdateDirectDebitInstructionStatus;
    authInfo: TAuthInfo;
}

/**
 * Update Direct Debit Instruction Status
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export type PathDirectdebitV100InstructionsMandateIdentificationStatusPut<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebitV100InstructionsMandateIdentificationStatusPut<TAuthInfo> & R) => Promise<ResponseDirectdebitV100InstructionsMandateIdentificationStatusPut>;

export interface Response200BulkCollectionsFileRead {
    Data: {
        CollectionFileIdentification: string;
        [key: string]: unknown;
    };
}

export type ResponseBulkcollectionsV100CollectionfilesPost = ResponseOapi<Response200BulkCollectionsFileRead, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<BacsErrorResponse, 500, "application/json">;

/**
 * Upload a Direct Debit collection file
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 *
 * Example file content:
 *
 * <code>{
 * "document": {
 *  "fi_to_fi_customer_direct_debit": {
 *    "group_header": {
 *      "message_identification": "cc60bfc5-7876-4fba-ae24-2d9c3e32e0b0",
 *      "creation_date_time": "2021-07-23T10:46:56.697Z",
 *      "number_of_transactions": 3
 *    },
 *    "direct_debit_transaction_information": [
 *      {
 *        "payment_identification": {
 *          "end_to_end_identification": "5231998b-d704-40e1-aea4-3ac952aa757b"
 *        },
 *        "interbank_settlement_amount": {
 *          "active_currency": "GBP",
 *          "currency_amount": "10.00"
 *        },
 *        "interbank_settlement_date": "2021-07-23",
 *        "direct_debit_transaction": {
 *          "mandate_related_information": {
 *            "mandate_id": "EXE-123456"
 *          }
 *        }
 *      }
 *    ]
 *  }
 * }
 * }</code>
 */
export interface RequestBulkcollectionsV100CollectionfilesPost<TAuthInfo> extends OapiContext {
    headers: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
    body: {
        file: string;
        [key: string]: unknown;
    };
    authInfo: TAuthInfo;
}

/**
 * Upload a Direct Debit collection file
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 *
 * Example file content:
 *
 * <code>{
 * "document": {
 *  "fi_to_fi_customer_direct_debit": {
 *    "group_header": {
 *      "message_identification": "cc60bfc5-7876-4fba-ae24-2d9c3e32e0b0",
 *      "creation_date_time": "2021-07-23T10:46:56.697Z",
 *      "number_of_transactions": 3
 *    },
 *    "direct_debit_transaction_information": [
 *      {
 *        "payment_identification": {
 *          "end_to_end_identification": "5231998b-d704-40e1-aea4-3ac952aa757b"
 *        },
 *        "interbank_settlement_amount": {
 *          "active_currency": "GBP",
 *          "currency_amount": "10.00"
 *        },
 *        "interbank_settlement_date": "2021-07-23",
 *        "direct_debit_transaction": {
 *          "mandate_related_information": {
 *            "mandate_id": "EXE-123456"
 *          }
 *        }
 *      }
 *    ]
 *  }
 * }
 * }</code>
 */
export type PathBulkcollectionsV100CollectionfilesPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestBulkcollectionsV100CollectionfilesPost<TAuthInfo> & R) => Promise<ResponseBulkcollectionsV100CollectionfilesPost>;

export interface Response200BulkCollectionsFileProgressRead {
    Data: {
        NumberOfProcessingErrors: number;
        ProcessingPercentageComplete: number;
        Status: BulkCollectionStatus;
        CollectionFileIdentification: string;
        [key: string]: unknown;
    };
}

export type BulkCollectionStatus = "INITIALISING" | "PROCESSING" | "PENDING_UPLOAD" | "COMPLETED";

export type ResponseBulkcollectionsV100CollectionfilesCollectionFileIdentificationGet = ResponseOapi<Response200BulkCollectionsFileProgressRead, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<BacsErrorResponse, 500, "application/json">;

/**
 * Get the status of a Direct Debit collection file
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export interface RequestBulkcollectionsV100CollectionfilesCollectionFileIdentificationGet<TAuthInfo> extends OapiContext {
    path: {
        CollectionFileIdentification: string;
    };
    authInfo: TAuthInfo;
}

/**
 * Get the status of a Direct Debit collection file
 *
 * Required OAuth Audience: <code>DirectDebits</code>
 */
export type PathBulkcollectionsV100CollectionfilesCollectionFileIdentificationGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestBulkcollectionsV100CollectionfilesCollectionFileIdentificationGet<TAuthInfo> & R) => Promise<ResponseBulkcollectionsV100CollectionfilesCollectionFileIdentificationGet>;

export interface AuddisBankReturnedReportBody {
    document: Document;
    [key: string]: unknown;
}

export interface Document {
    mandate_acceptance_report: MandateAcceptanceReportV07;
    [key: string]: unknown;
}

export interface MandateAcceptanceReportV07 {
    group_header: GroupHeader80;
    underlying_acceptance_details: MandateAcceptance7[];
    [key: string]: unknown;
}

export interface GroupHeader80 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    [key: string]: unknown;
}

export type Max35Text = string & string;

export type schemas_ISODateTime = Date;

export interface MandateAcceptance7 {
    acceptance_result: AcceptanceResult6;
    original_mandate?: OriginalMandate8Choice;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface AcceptanceResult6 {
    accepted: YesNoIndicator;
    reject_reason?: MandateReason1Choice;
    additional_reject_reason_information?: Max105Text[];
    [key: string]: unknown;
}

export type YesNoIndicator = boolean;

export interface MandateReason1Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export type Max105Text = string & string;

export interface OriginalMandate8Choice {
    original_mandate: Mandate16;
    [key: string]: unknown;
}

export interface Mandate16 {
    mandate_identification: Max35Text;
    type: MandateTypeInformation2;
    occurrences?: MandateOccurrences5Modified;
    creditor: PartyIdentification135;
    creditor_account: CashAccount40;
    creditor_agent: BranchAndFinancialInstitutionIdentification6;
    debtor: PartyIdentification135Modification1;
    debtor_account: CashAccount40;
    debtor_agent: BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface MandateTypeInformation2 {
    local_instrument?: LocalInstrument2Choice;
    [key: string]: unknown;
}

export interface LocalInstrument2Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export type MandateOccurrences5Modified = {
    first_collection_date?: ISODate;
    [key: string]: unknown;
} | undefined;

export type ISODate = Date;

export interface PartyIdentification135 {
    identification?: Party38Choice;
    [key: string]: unknown;
}

export interface Party38Choice {
    organisation_identification: OrganisationIdentification29;
    [key: string]: unknown;
}

export interface OrganisationIdentification29 {
    other?: GenericOrganisationIdentification1[];
    [key: string]: unknown;
}

export interface GenericOrganisationIdentification1 {
    identification: Max35Text;
    [key: string]: unknown;
}

export interface CashAccount40 {
    identification?: AccountIdentification4Choice;
    name?: Max70Text;
    [key: string]: unknown;
}

export interface AccountIdentification4Choice {
    other: GenericAccountIdentification1;
    [key: string]: unknown;
}

export interface GenericAccountIdentification1 {
    identification: Max34Text;
    [key: string]: unknown;
}

export type Max34Text = string & string;

export type Max70Text = string & string;

export interface BranchAndFinancialInstitutionIdentification6 {
    financial_institution_identification: FinancialInstitutionIdentification18;
    [key: string]: unknown;
}

export interface FinancialInstitutionIdentification18 {
    clearing_system_member_identification?: ClearingSystemMemberIdentification2;
    [key: string]: unknown;
}

export interface ClearingSystemMemberIdentification2 {
    member_identification: Max35Text;
    [key: string]: unknown;
}

export interface PartyIdentification135Modification1 {
    name?: Max140Text;
    [key: string]: unknown;
}

export type Max140Text = string & string;

export interface SupplementaryData1 {
    place_and_name?: Max350Text;
    envelope: SupplementaryDataEnvelope1;
    [key: string]: unknown;
}

export type Max350Text = string & string;

export type SupplementaryDataEnvelope1 = string | undefined;

export type ResponseDirectdebitwebhooksV100AuddisbankreturnedadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * AUDDIS Bank Returned Advice
 */
export interface RequestDirectdebitwebhooksV100AuddisbankreturnedadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: AuddisBankReturnedReportBody;
}

export type PathDirectdebitwebhooksV100AuddisbankreturnedadvicesPost<R extends Empty = Empty> = (req: RequestDirectdebitwebhooksV100AuddisbankreturnedadvicesPost & R) => Promise<ResponseDirectdebitwebhooksV100AuddisbankreturnedadvicesPost>;

export interface AruddReportBody {
    document: schemas_Document;
    [key: string]: unknown;
}

export interface schemas_Document {
    bank_to_customer_debit_credit_notification: BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: AccountNotification19[];
    [key: string]: unknown;
}

export interface GroupHeader81 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    [key: string]: unknown;
}

export interface AccountNotification19 {
    identification: Max35Text;
    creation_date_time?: schemas_ISODateTime;
    account: CashAccount41;
    entry?: ReportEntry11[];
    [key: string]: unknown;
}

export interface CashAccount41 {
    identification?: AccountIdentification4Choice;
    [key: string]: unknown;
}

export interface ReportEntry11 {
    reversal_indicator?: FixedFalseModified1;
    credit_debit_indicator?: CreditDebitCode;
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    status: EntryStatus1Choice;
    bank_transaction_code: BankTransactionCodeStructure4;
    entry_details?: EntryDetails10[];
    [key: string]: unknown;
}

export type FixedFalseModified1 = false;

export type CreditDebitCode = "DBIT";

export type ActiveOrHistoricCurrencyAndAmountModified1 = string;

export interface EntryStatus1Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export interface BankTransactionCodeStructure4 {
    domain?: BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export type ExternalBankTransactionDomain1CodeModified1 = "PMNT";

export interface BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type ExternalBankTransactionFamily1CodeModified1 = "IDDT";

export type ExternalBankTransactionSubFamily1CodeModified1 = "UPDD";

export interface ProprietaryBankTransactionCodeStructure1 {
    code: Max35Text;
    [key: string]: unknown;
}

export interface EntryDetails10 {
    transaction_details?: EntryTransaction11[];
    [key: string]: unknown;
}

export interface EntryTransaction11 {
    references?: TransactionReferences6;
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    credit_debit_indicator?: CreditDebitCode;
    bank_transaction_code?: BankTransactionCodeStructure4;
    related_parties?: TransactionParties9;
    related_agents?: TransactionAgents5;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface TransactionReferences6 {
    instruction_identification?: Max35Text;
    end_to_end_identification?: Max35TextNullable;
    [key: string]: unknown;
}

export type Max35TextNullable = string | undefined;

export interface TransactionParties9 {
    debtor_account?: CashAccount40;
    creditor?: Party40Choice;
    creditor_account?: CashAccount40Modified1;
    [key: string]: unknown;
}

export interface Party40Choice {
    party: schemas_PartyIdentification135;
    [key: string]: unknown;
}

export interface schemas_PartyIdentification135 {
    name?: Max140Text;
    identification?: Party38Choice;
    [key: string]: unknown;
}

export interface CashAccount40Modified1 {
    identification?: AccountIdentification4Choice;
    [key: string]: unknown;
}

export interface TransactionAgents5 {
    debtor_agent?: BranchAndFinancialInstitutionIdentification6Modified2;
    creditor_agent?: BranchAndFinancialInstitutionIdentification6Modified1;
    [key: string]: unknown;
}

export interface BranchAndFinancialInstitutionIdentification6Modified2 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18;
    branch_identification?: BranchData3;
    [key: string]: unknown;
}

export interface schemas_FinancialInstitutionIdentification18 {
    clearing_system_member_identification?: ClearingSystemMemberIdentification2;
    name?: Max140Text;
    [key: string]: unknown;
}

export interface BranchData3 {
    name?: Max140Text;
    [key: string]: unknown;
}

export interface BranchAndFinancialInstitutionIdentification6Modified1 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18;
    [key: string]: unknown;
}

export type ResponseDirectdebitwebhooksV100AruddunpaiddirectdebitadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * ARUDD Unpaid Direct Debit Advice
 */
export interface RequestDirectdebitwebhooksV100AruddunpaiddirectdebitadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: AruddReportBody;
}

export type PathDirectdebitwebhooksV100AruddunpaiddirectdebitadvicesPost<R extends Empty = Empty> = (req: RequestDirectdebitwebhooksV100AruddunpaiddirectdebitadvicesPost & R) => Promise<ResponseDirectdebitwebhooksV100AruddunpaiddirectdebitadvicesPost>;

export interface AddacsAmendmentsReportBody {
    document: components_schemas_Document;
    [key: string]: unknown;
}

export interface components_schemas_Document {
    mandate_amendment_request: MandateAmendmentRequestV07;
    [key: string]: unknown;
}

export interface MandateAmendmentRequestV07 {
    group_header: schemas_GroupHeader80;
    underlying_amendment_details: MandateAmendment7[];
    [key: string]: unknown;
}

export interface schemas_GroupHeader80 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    [key: string]: unknown;
}

export interface MandateAmendment7 {
    amendment_reason: MandateAmendmentReason2;
    mandate: Mandate18;
    original_mandate: OriginalMandate9Choice;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface MandateAmendmentReason2 {
    reason: schemas_MandateReason1Choice;
    [key: string]: unknown;
}

export interface schemas_MandateReason1Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export interface Mandate18 {
    debtor_account?: CashAccount40Modified1;
    debtor_agent?: BranchAndFinancialInstitutionIdentification6;
    tracking_indicator: TrueFalseIndicator;
    mandate_identification: Max35Text;
    [key: string]: unknown;
}

export type TrueFalseIndicator = boolean;

export interface OriginalMandate9Choice {
    original_mandate: Mandate17;
    [key: string]: unknown;
}

export interface Mandate17 {
    mandate_identification: Max35Text;
    creditor: PartyIdentification135;
    debtor_account?: CashAccount40;
    debtor_agent: BranchAndFinancialInstitutionIdentification6;
    tracking_indicator: TrueFalseIndicator;
    debtor: PartyIdentification135Modified1;
    [key: string]: unknown;
}

export interface PartyIdentification135Modified1 {
    name?: Max140Text;
    [key: string]: unknown;
}

export type ResponseDirectdebitwebhooksV100AddacsamendmentsadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * ADDACS Amendments Advice
 */
export interface RequestDirectdebitwebhooksV100AddacsamendmentsadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: AddacsAmendmentsReportBody;
}

export type PathDirectdebitwebhooksV100AddacsamendmentsadvicesPost<R extends Empty = Empty> = (req: RequestDirectdebitwebhooksV100AddacsamendmentsadvicesPost & R) => Promise<ResponseDirectdebitwebhooksV100AddacsamendmentsadvicesPost>;

export interface AddacsCancellationsReportBody {
    document: addacs_cancellations_components_schemas_Document;
    [key: string]: unknown;
}

export interface addacs_cancellations_components_schemas_Document {
    mandate_cancellation_request: MandateCancellationRequestV07;
    [key: string]: unknown;
}

export interface MandateCancellationRequestV07 {
    group_header: schemas_GroupHeader80;
    underlying_cancellation_details: MandateCancellation7[];
    [key: string]: unknown;
}

export interface MandateCancellation7 {
    cancellation_reason: MandateCancellationReason1;
    original_mandate: schemas_OriginalMandate9Choice;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface MandateCancellationReason1 {
    reason: schemas_MandateReason1Choice;
    [key: string]: unknown;
}

export interface schemas_OriginalMandate9Choice {
    original_mandate: schemas_Mandate17;
    [key: string]: unknown;
}

export interface schemas_Mandate17 {
    mandate_identification: Max35Text;
    tracking_indicator: TrueFalseIndicator;
    creditor: schemas_PartyIdentification135Modified1;
    debtor: components_schemas_PartyIdentification135;
    debtor_account?: CashAccount40;
    debtor_agent: BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface schemas_PartyIdentification135Modified1 {
    identification?: Party38ChoiceModified1;
    [key: string]: unknown;
}

export interface Party38ChoiceModified1 {
    organisation_identification: OrganisationIdentification29;
    [key: string]: unknown;
}

export interface components_schemas_PartyIdentification135 {
    name?: Max140Text;
    [key: string]: unknown;
}

export type ResponseDirectdebitwebhooksV100AddacscancellationsadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * ADDACS Cancellations Advice
 */
export interface RequestDirectdebitwebhooksV100AddacscancellationsadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: AddacsCancellationsReportBody;
}

export type PathDirectdebitwebhooksV100AddacscancellationsadvicesPost<R extends Empty = Empty> = (req: RequestDirectdebitwebhooksV100AddacscancellationsadvicesPost & R) => Promise<ResponseDirectdebitwebhooksV100AddacscancellationsadvicesPost>;

export interface DdicReportBody {
    document: ddic_components_schemas_Document;
    [key: string]: unknown;
}

export interface ddic_components_schemas_Document {
    bank_to_customer_debit_credit_notification: schemas_BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface schemas_BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: schemas_AccountNotification19[];
    [key: string]: unknown;
}

export interface schemas_AccountNotification19 {
    identification: Max35Text;
    creation_date_time?: schemas_ISODateTime;
    account: CashAccount41;
    entry?: schemas_ReportEntry11[];
    [key: string]: unknown;
}

export interface schemas_ReportEntry11 {
    additional_entry_information?: Max500Text;
    reversal_indicator?: FixedTrueModified1;
    credit_debit_indicator?: CreditDebitCodeModified1;
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    status: EntryStatus1Choice;
    bank_transaction_code: schemas_BankTransactionCodeStructure4;
    entry_details?: schemas_EntryDetails10[];
    [key: string]: unknown;
}

export type Max500Text = string & string;

export type FixedTrueModified1 = true;

export type CreditDebitCodeModified1 = "DBIT";

export interface schemas_BankTransactionCodeStructure4 {
    domain?: schemas_BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export interface schemas_BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: schemas_ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type schemas_ExternalBankTransactionSubFamily1CodeModified1 = "PRDD";

export interface schemas_EntryDetails10 {
    transaction_details?: schemas_EntryTransaction11[];
    [key: string]: unknown;
}

export interface schemas_EntryTransaction11 {
    references?: schemas_TransactionReferences6;
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    credit_debit_indicator?: CreditDebitCodeModified1;
    bank_transaction_code?: schemas_BankTransactionCodeStructure4;
    related_parties?: schemas_TransactionParties9;
    related_agents?: schemas_TransactionAgents5;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface schemas_TransactionReferences6 {
    mandate_identification?: Max35Text;
    [key: string]: unknown;
}

export interface schemas_TransactionParties9 {
    debtor_account?: CashAccount40;
    [key: string]: unknown;
}

export interface schemas_TransactionAgents5 {
    debtor_agent?: schemas_BranchAndFinancialInstitutionIdentification6Modified2;
    [key: string]: unknown;
}

export interface schemas_BranchAndFinancialInstitutionIdentification6Modified2 {
    financial_institution_identification: FinancialInstitutionIdentification18Modified1;
    [key: string]: unknown;
}

export interface FinancialInstitutionIdentification18Modified1 {
    name?: Max140Text;
    [key: string]: unknown;
}

export type ResponseDirectdebitwebhooksV100DdicindemnityclaimadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * DDIC Indemnity Claim Advice
 */
export interface RequestDirectdebitwebhooksV100DdicindemnityclaimadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: DdicReportBody;
}

export type PathDirectdebitwebhooksV100DdicindemnityclaimadvicesPost<R extends Empty = Empty> = (req: RequestDirectdebitwebhooksV100DdicindemnityclaimadvicesPost & R) => Promise<ResponseDirectdebitwebhooksV100DdicindemnityclaimadvicesPost>;

export interface CollectionAdvicesReportBody {
    document: collection_advices_components_schemas_Document;
    [key: string]: unknown;
}

export interface collection_advices_components_schemas_Document {
    bank_to_customer_debit_credit_notification: components_schemas_BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface components_schemas_BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: components_schemas_AccountNotification19[];
    [key: string]: unknown;
}

export interface components_schemas_AccountNotification19 {
    identification: Max35Text;
    creation_date_time?: schemas_ISODateTime;
    account: CashAccount41;
    entry?: components_schemas_ReportEntry11[];
    [key: string]: unknown;
}

export interface components_schemas_ReportEntry11 {
    reversal_indicator?: FixedFalseModified1;
    credit_debit_indicator?: schemas_CreditDebitCode;
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    status: EntryStatus1Choice;
    bank_transaction_code: components_schemas_BankTransactionCodeStructure4;
    entry_details?: components_schemas_EntryDetails10[];
    [key: string]: unknown;
}

export type schemas_CreditDebitCode = "CRDT";

export interface components_schemas_BankTransactionCodeStructure4 {
    domain?: components_schemas_BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface components_schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: components_schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export interface components_schemas_BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: components_schemas_ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type components_schemas_ExternalBankTransactionSubFamily1CodeModified1 = "UPDD" | "PMDD";

export interface components_schemas_EntryDetails10 {
    transaction_details?: components_schemas_EntryTransaction11[];
    [key: string]: unknown;
}

export interface components_schemas_EntryTransaction11 {
    references?: TransactionReferences6;
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    credit_debit_indicator?: schemas_CreditDebitCode;
    bank_transaction_code?: components_schemas_BankTransactionCodeStructure4;
    related_parties?: TransactionParties9;
    related_agents?: components_schemas_TransactionAgents5;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface components_schemas_TransactionAgents5 {
    debtor_agent?: components_schemas_BranchAndFinancialInstitutionIdentification6Modified2;
    creditor_agent?: BranchAndFinancialInstitutionIdentification6Modified1;
    [key: string]: unknown;
}

export interface components_schemas_BranchAndFinancialInstitutionIdentification6Modified2 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18Modified1;
    branch_identification?: schemas_BranchData3;
    [key: string]: unknown;
}

export interface schemas_FinancialInstitutionIdentification18Modified1 {
    name?: Max140TextAndMin0;
    clearing_system_member_identification?: ClearingSystemMemberIdentification2Modified;
    [key: string]: unknown;
}

export type Max140TextAndMin0 = string & string;

export interface ClearingSystemMemberIdentification2Modified {
    member_identification: Max35TextAndMin0;
    [key: string]: unknown;
}

export type Max35TextAndMin0 = string & string;

export interface schemas_BranchData3 {
    name?: Max140TextAndMin0;
    [key: string]: unknown;
}

export type ResponseDirectdebitwebhooksV100CollectionadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * Collection Advices
 */
export interface RequestDirectdebitwebhooksV100CollectionadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: CollectionAdvicesReportBody;
}

export type PathDirectdebitwebhooksV100CollectionadvicesPost<R extends Empty = Empty> = (req: RequestDirectdebitwebhooksV100CollectionadvicesPost & R) => Promise<ResponseDirectdebitwebhooksV100CollectionadvicesPost>;

export interface CreateDirectCredit {
    Data: {
        /**
         *
         * The DirectCreditInstruction object allows users to submit a direct credit to be created.
         */
        DirectCreditInstruction: DirectCreditInstruction;
        [key: string]: unknown;
    };
    Meta?: Meta1;
}

export interface DirectCreditInstruction {
    Creditor: {
        Name: string;
        [key: string]: unknown;
    };
    CreditorAccount: CreditorAccount;
    CreditAmount: CreditorAmount;
    MandateIdentification?: string;
}

export interface CreditorAccount {
    SchemeName: "SortCodeAccountNumber";
    Identification: string;
    Name: string;
}

export interface CreditorAmount {
    /**
     * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     */
    Amount: string;
    Currency: "GBP";
}

export type Meta1 = any;

export type Response200DirectCreditInstructionRead = CreateDirectCredit;

export type ResponseDirectcreditV100InstructionsPost = ResponseOapi<Response200DirectCreditInstructionRead, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<BacsErrorResponse, 500, "application/json">;

/**
 * Create Direct Credit
 *
 * Required OAuth Audience: <code>DirectCredits</code>
 */
export interface RequestDirectcreditV100InstructionsPost<TAuthInfo> extends OapiContext {
    headers: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
    body: CreateDirectCredit;
    authInfo: TAuthInfo;
}

/**
 * Create Direct Credit
 *
 * Required OAuth Audience: <code>DirectCredits</code>
 */
export type PathDirectcreditV100InstructionsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectcreditV100InstructionsPost<TAuthInfo> & R) => Promise<ResponseDirectcreditV100InstructionsPost>;

export interface AwacsWrongAccountForCreditsReportBody {
    document: awacs_components_schemas_Document;
    [key: string]: unknown;
}

export interface awacs_components_schemas_Document {
    identification_modification_advice: IdentificationModificationAdviceV03;
    [key: string]: unknown;
}

export interface IdentificationModificationAdviceV03 {
    assignment: IdentificationAssignment3;
    original_transaction_reference?: OriginalTransactionReference30;
    modification: IdentificationModification4[];
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface IdentificationAssignment3 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    assigner: Party40Choice;
    assignee: Party40Choice;
    [key: string]: unknown;
}

export interface OriginalTransactionReference30 {
    original_transaction?: PaymentIdentification5[];
    [key: string]: unknown;
}

export interface PaymentIdentification5 {
    instruction_identification?: Max35Text;
    end_to_end_identification: Max35Text;
    [key: string]: unknown;
}

export interface IdentificationModification4 {
    identification: Max35Text;
    original_party_and_account_identification?: IdentificationInformation4;
    updated_party_and_account_identification: IdentificationInformation4;
    additional_information?: Max140Text;
    [key: string]: unknown;
}

export interface IdentificationInformation4 {
    party?: PartyIdentification135Modified1;
    account?: schemas_CashAccount40;
    agent?: BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface schemas_CashAccount40 {
    identification?: AccountIdentification4Choice;
    [key: string]: unknown;
}

export type ResponseDirectcreditwebhooksV100AwacswrongaccountforcreditsadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * AWACS Wrong Account for Credits Advice
 */
export interface RequestDirectcreditwebhooksV100AwacswrongaccountforcreditsadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: AwacsWrongAccountForCreditsReportBody;
}

export type PathDirectcreditwebhooksV100AwacswrongaccountforcreditsadvicesPost<R extends Empty = Empty> = (req: RequestDirectcreditwebhooksV100AwacswrongaccountforcreditsadvicesPost & R) => Promise<ResponseDirectcreditwebhooksV100AwacswrongaccountforcreditsadvicesPost>;

export interface ArucsReportBody {
    document: arucs_components_schemas_Document;
    [key: string]: unknown;
}

export interface arucs_components_schemas_Document {
    bank_to_customer_debit_credit_notification: arucs_components_schemas_BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: arucs_components_schemas_AccountNotification19[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_AccountNotification19 {
    identification: Max35Text;
    account: CashAccount41;
    creation_date_time?: schemas_ISODateTime;
    entry?: arucs_components_schemas_ReportEntry11[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_ReportEntry11 {
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    bank_transaction_code: arucs_components_schemas_BankTransactionCodeStructure4;
    credit_debit_indicator: schemas_CreditDebitCode;
    status: EntryStatus1Choice;
    entry_details?: arucs_components_schemas_EntryDetails10[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankTransactionCodeStructure4 {
    domain?: arucs_components_schemas_BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: arucs_components_schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankTransactionCodeStructure6 {
    code: schemas_ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: arucs_components_schemas_ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type schemas_ExternalBankTransactionFamily1CodeModified1 = "ICDT";

export type arucs_components_schemas_ExternalBankTransactionSubFamily1CodeModified1 = "RRTN";

export interface arucs_components_schemas_EntryDetails10 {
    transaction_details?: arucs_components_schemas_EntryTransaction11[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_EntryTransaction11 {
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    related_agents?: arucs_components_schemas_TransactionAgents5;
    related_parties?: components_schemas_TransactionParties9;
    credit_debit_indicator?: schemas_CreditDebitCode;
    bank_transaction_code?: arucs_components_schemas_BankTransactionCodeStructure4;
    references?: components_schemas_TransactionReferences6;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_TransactionAgents5 {
    creditor_agent?: schemas_BranchAndFinancialInstitutionIdentification6;
    debtor_agent?: schemas_BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface schemas_BranchAndFinancialInstitutionIdentification6 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18;
    branch_identification?: BranchData3Nullable;
    [key: string]: unknown;
}

export type BranchData3Nullable = {
    name?: Max140Text;
    [key: string]: unknown;
} | undefined;

export interface components_schemas_TransactionParties9 {
    creditor_account?: CashAccount40;
    creditor?: Party40ChoiceModified1;
    debtor_account?: CashAccount40;
    debtor?: Party40Choice;
    [key: string]: unknown;
}

export interface Party40ChoiceModified1 {
    party: PartyIdentification135Modified1;
    [key: string]: unknown;
}

export interface components_schemas_TransactionReferences6 {
    instruction_identification?: Max35Text;
    [key: string]: unknown;
}

export type ResponseDirectcreditwebhooksV100ArucsunappliedcreditsadvicesPost = ResponseOapi<unknown, 200, string>;

/**
 * ARUCS Unapplied Credits Advice
 */
export interface RequestDirectcreditwebhooksV100ArucsunappliedcreditsadvicesPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: ArucsReportBody;
}

export type PathDirectcreditwebhooksV100ArucsunappliedcreditsadvicesPost<R extends Empty = Empty> = (req: RequestDirectcreditwebhooksV100ArucsunappliedcreditsadvicesPost & R) => Promise<ResponseDirectcreditwebhooksV100ArucsunappliedcreditsadvicesPost>;

export type UUID1 = string;

export interface CreatePaymentSession {
    Data: {
        Initiation: OBCreatePaymentSession;
        [key: string]: unknown;
    };
}

export interface OBCreatePaymentSession {
    LocalInstrument: LocalInstrument;
    InstructedAmount?: {
        Currency?: Currency;
        Amount?: string;
        [key: string]: unknown;
    };
    Metadata: {
        CustomerAddressCountry?: string;
        CustomerAddressPostCode?: string;
        CustomerAddressCity?: string;
        CustomerAddressCounty?: string;
        CustomerAddressLine2?: string;
        CustomerAddressLine1?: string;
        CustomerEmail?: string;
        [key: string]: any | undefined;
    };
}

export type LocalInstrument = "UK.POL.All" | "UK.POL.Cards";

export type Currency = "GBP";

export type ResponsePaymentsV100SessionsPost = ResponseOapi<unknown, 302, string> | ResponseOapi<PolErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<PolErrorResponse, 409, "application/json"> | ResponseOapi<PolErrorResponse, 500, "application/json">;

/**
 * Request Payment Session
 *
 * Required OAuth Audience: <code>PaymentSession</code>
 */
export interface RequestPaymentsV100SessionsPost<TAuthInfo> extends OapiContext {
    headers: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": UUID1;
    };
    body: CreatePaymentSession;
    authInfo: TAuthInfo;
}

/**
 * Request Payment Session
 *
 * Required OAuth Audience: <code>PaymentSession</code>
 */
export type PathPaymentsV100SessionsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestPaymentsV100SessionsPost<TAuthInfo> & R) => Promise<ResponsePaymentsV100SessionsPost>;

export interface PaymentApprovedEventBody {
    document: payment_approved_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_approved_components_schemas_Document {
    acceptor_authorisation_response: AcceptorAuthorisationResponseV10;
    [key: string]: unknown;
}

export interface AcceptorAuthorisationResponseV10 {
    header: Header59;
    authorisation_response: AcceptorAuthorisationResponse10;
    [key: string]: unknown;
}

export interface Header59 {
    message_function: MessageFunction42Code;
    protocol_version: Max6Text;
    exchange_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    initiating_party: GenericIdentification176;
    [key: string]: unknown;
}

export type MessageFunction42Code = "AUTQ" | "AUTP" | "CCAV" | "CCAK" | "CCAQ" | "CCAP" | "CMPV" | "CMPK" | "DCAV" | "DCRR" | "DCCQ" | "DCCP" | "DGNP" | "DGNQ" | "FAUQ" | "FAUP" | "FCMV" | "FCMK" | "FRVA" | "FRVR" | "RCLQ" | "RCLP" | "RVRA" | "RVRR" | "CDDQ" | "CDDK" | "CDDR" | "CDDP" | "TRNR" | "TRNA" | "NFRQ" | "NFRP" | "TRPQ" | "TRPP";

export type Max6Text = string & string;

export interface GenericIdentification176 {
    identification: InitiatingPartyIdentification;
    [key: string]: unknown;
}

export type InitiatingPartyIdentification = "CHECKOUT";

export interface AcceptorAuthorisationResponse10 {
    environment: CardPaymentEnvironment77;
    transaction: CardPaymentTransaction111;
    transaction_response: CardPaymentTransaction109;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface CardPaymentEnvironment77 {
    card?: PaymentCard31;
    cardholder?: Cardholder17;
    [key: string]: unknown;
}

export interface PaymentCard31 {
    issuer_bin?: Max15NumericText;
    card_country_code?: Max3Text;
    card_brand?: Max35TextNullable;
    card_product_type?: CardProductType1Code;
    [key: string]: unknown;
}

export type Max15NumericText = string | undefined;

export type Max3Text = string | undefined;

export type CardProductType1Code = "COMM" | "CONS" | any;

export type Cardholder17 = {
    identification?: PersonIdentification15;
    [key: string]: unknown;
} | undefined;

export type PersonIdentification15 = {
    email_address?: string | undefined;
    other?: GenericIdentification4[] | undefined;
    [key: string]: unknown;
} | undefined;

export interface GenericIdentification4 {
    identification: Max35Text;
    [key: string]: unknown;
}

export interface CardPaymentTransaction111 {
    transaction_identification: TransactionIdentifier1;
    transaction_details: CardPaymentTransactionDetails49;
    [key: string]: unknown;
}

export interface TransactionIdentifier1 {
    transaction_date_time: schemas_ISODateTime;
    transaction_reference: Max35TextNullable;
    [key: string]: unknown;
}

export interface CardPaymentTransactionDetails49 {
    currency?: ActiveCurrencyCode;
    total_amount: ImpliedCurrencyAndAmount;
    authorised_amount?: DecimalNumberAsString;
    account_type?: CardAccountType3Code;
    [key: string]: unknown;
}

export type ActiveCurrencyCode = string | undefined;

export type ImpliedCurrencyAndAmount = DecimalNumberAsString & number;

export type DecimalNumberAsString = string;

export type CardAccountType3Code = "CTDP" | "CHCK" | "CRDT" | "CURR" | "CDBT" | "DFLT" | "EPRS" | "HEQL" | "ISTL" | "INVS" | "LCDT" | "MBNW" | "MNMK" | "MNMC" | "MTGL" | "RTRM" | "RVLV" | "SVNG" | "STBD" | "UVRL" | "PRPD" | "FLTC" | any;

export interface CardPaymentTransaction109 {
    authorisation_result: AuthorisationResult14;
    [key: string]: unknown;
}

export interface AuthorisationResult14 {
    response_to_authorisation: ResponseType10;
    authorisation_code?: Min5Max6Text;
    [key: string]: unknown;
}

export interface ResponseType10 {
    response: Response9Code;
    [key: string]: unknown;
}

export type Response9Code = "APPR" | "DECL" | "PART" | "SUSP" | "TECH";

export type Min5Max6Text = string & string;

export type ResponseWebhookV100ApprovedPost = ResponseOapi<unknown, 200, string>;

/**
 * Payment approved
 */
export interface RequestWebhookV100ApprovedPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: PaymentApprovedEventBody;
}

export type PathWebhookV100ApprovedPost<R extends Empty = Empty> = (req: RequestWebhookV100ApprovedPost & R) => Promise<ResponseWebhookV100ApprovedPost>;

export interface PaymentVoidedEventBody {
    document: payment_voided_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_voided_components_schemas_Document {
    acceptor_cancellation_response: AcceptorCancellationResponseV09;
    [key: string]: unknown;
}

export interface AcceptorCancellationResponseV09 {
    header: Header59;
    cancellation_response: AcceptorCancellationResponse9;
    [key: string]: unknown;
}

export interface AcceptorCancellationResponse9 {
    environment: schemas_CardPaymentEnvironment77;
    transaction: CardPaymentTransaction97;
    transaction_response: CardPaymentTransaction105;
    [key: string]: unknown;
}

export type schemas_CardPaymentEnvironment77 = any;

export interface CardPaymentTransaction97 {
    transaction_identification: TransactionIdentifier1;
    transaction_details: CardPaymentTransactionDetails34;
    [key: string]: unknown;
}

export interface CardPaymentTransactionDetails34 {
    currency?: ActiveCurrencyCode;
    total_amount: ImpliedCurrencyAndAmount;
    [key: string]: unknown;
}

export interface CardPaymentTransaction105 {
    authorisation_result: AuthorisationResult16;
    [key: string]: unknown;
}

export interface AuthorisationResult16 {
    response_to_authorisation: ResponseType10;
    AuthstnCd?: Min6Max8Text;
    [key: string]: unknown;
}

export type Min6Max8Text = string & string;

export type ResponseWebhookV100VoidedPost = ResponseOapi<unknown, 200, string>;

/**
 * Payment voided
 */
export interface RequestWebhookV100VoidedPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: PaymentVoidedEventBody;
}

export type PathWebhookV100VoidedPost<R extends Empty = Empty> = (req: RequestWebhookV100VoidedPost & R) => Promise<ResponseWebhookV100VoidedPost>;

export interface PaymentCapturedEventBody {
    document: payment_captured_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_captured_components_schemas_Document {
    acceptor_completion_advice_response: AcceptorCompletionAdviceResponseV09;
    [key: string]: unknown;
}

export interface AcceptorCompletionAdviceResponseV09 {
    header: Header59;
    completion_advice_response: AcceptorCompletionAdviceResponse9;
    [key: string]: unknown;
}

export interface AcceptorCompletionAdviceResponse9 {
    environment: schemas_CardPaymentEnvironment77;
    transaction: CardPaymentTransactionAdviceResponse8;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface CardPaymentTransactionAdviceResponse8 {
    transaction_identification: TransactionIdentifier1;
    response: Response9Code;
    [key: string]: unknown;
}

export type ResponseWebhookV100CapturedPost = ResponseOapi<unknown, 200, string>;

/**
 * Payment captured
 */
export interface RequestWebhookV100CapturedPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: PaymentCapturedEventBody;
}

export type PathWebhookV100CapturedPost<R extends Empty = Empty> = (req: RequestWebhookV100CapturedPost & R) => Promise<ResponseWebhookV100CapturedPost>;

export interface PaymentDeclinedEventBody {
    document: payment_declined_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_declined_components_schemas_Document {
    acceptor_cancellation_response: schemas_AcceptorCancellationResponseV09;
    [key: string]: unknown;
}

export interface schemas_AcceptorCancellationResponseV09 {
    header: Header59;
    cancellation_response: schemas_AcceptorCancellationResponse9;
    [key: string]: unknown;
}

export interface schemas_AcceptorCancellationResponse9 {
    environment: components_schemas_CardPaymentEnvironment77;
    transaction: schemas_CardPaymentTransaction111;
    transaction_response: schemas_CardPaymentTransaction109;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface components_schemas_CardPaymentEnvironment77 {
    card?: schemas_PaymentCard31;
    cardholder?: schemas_Cardholder17;
    [key: string]: unknown;
}

export type schemas_PaymentCard31 = {
    issuer_bin?: Max15NumericText;
    card_country_code?: Max3Text;
    card_brand?: Max35TextNullable;
    card_product_type?: CardProductType1Code;
    [key: string]: unknown;
} | undefined;

export type schemas_Cardholder17 = {
    identification?: schemas_PersonIdentification15;
    [key: string]: unknown;
} | undefined;

export interface schemas_PersonIdentification15 {
    email_address?: string | undefined;
    other?: GenericIdentification4[] | undefined;
    [key: string]: unknown;
}

export interface schemas_CardPaymentTransaction111 {
    transaction_identification: TransactionIdentifier1;
    initiator_transaction_identification?: Max35Text;
    transaction_details: schemas_CardPaymentTransactionDetails49;
    [key: string]: unknown;
}

export interface schemas_CardPaymentTransactionDetails49 {
    currency?: ActiveCurrencyCode;
    total_amount: ImpliedCurrencyAndAmount;
    [key: string]: unknown;
}

export interface schemas_CardPaymentTransaction109 {
    authorisation_result: schemas_AuthorisationResult14;
    [key: string]: unknown;
}

export interface schemas_AuthorisationResult14 {
    response_to_authorisation: ResponseType10;
    authorisation_code?: Max6TextNullable;
    [key: string]: unknown;
}

export type Max6TextNullable = string | undefined;

export type ResponseWebhookV100DeclinedPost = ResponseOapi<unknown, 200, string>;

/**
 * Payment declined
 */
export interface RequestWebhookV100DeclinedPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: PaymentDeclinedEventBody;
}

export type PathWebhookV100DeclinedPost<R extends Empty = Empty> = (req: RequestWebhookV100DeclinedPost & R) => Promise<ResponseWebhookV100DeclinedPost>;

export interface PaymentRefundDeclinedEventBody {
    document: payment_refund_declined_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_refund_declined_components_schemas_Document {
    bank_to_customer_debit_credit_notification: BankToCustomerDebitCreditNotificationV10;
    [key: string]: unknown;
}

export interface BankToCustomerDebitCreditNotificationV10 {
    group_header: GroupHeader81;
    notification: AccountNotification20[];
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface AccountNotification20 {
    identification: Max35Text;
    account: schemas_CashAccount41;
    entry?: ReportEntry12[];
    [key: string]: unknown;
}

export interface schemas_CashAccount41 {
    identification?: schemas_AccountIdentification4Choice;
    [key: string]: unknown;
}

export interface schemas_AccountIdentification4Choice {
    IBAN: IBAN2007Identifier;
    other: schemas_GenericAccountIdentification1;
    [key: string]: unknown;
}

export type IBAN2007Identifier = string & string;

export interface schemas_GenericAccountIdentification1 {
    identification: Max34Text;
    schemeName?: AccountSchemeName1Choice;
    issuer?: Max35Text;
    [key: string]: unknown;
}

export interface AccountSchemeName1Choice {
    code: ExternalAccountIdentification1Code;
    proprietary: Max35Text;
    [key: string]: unknown;
}

export type ExternalAccountIdentification1Code = string & string;

export interface ReportEntry12 {
    amount: ActiveOrHistoricCurrencyAndAmount;
    credit_debit_indicator: components_schemas_CreditDebitCode;
    reversal_indicator?: TrueFalseIndicator;
    status: EntryStatus1Choice;
    bank_transaction_code: payment_refund_declined_components_schemas_BankTransactionCodeStructure4;
    [key: string]: unknown;
}

export interface ActiveOrHistoricCurrencyAndAmount {
    currency: ActiveOrHistoricCurrencyCode;
    value: ActiveOrHistoricCurrencyAndAmount_SimpleType;
    [key: string]: unknown;
}

export type ActiveOrHistoricCurrencyCode = string & string;

export type ActiveOrHistoricCurrencyAndAmount_SimpleType = string;

export type components_schemas_CreditDebitCode = "CRDT" | "DBIT";

export interface payment_refund_declined_components_schemas_BankTransactionCodeStructure4 {
    domain?: payment_refund_declined_components_schemas_BankTransactionCodeStructure5;
    [key: string]: unknown;
}

export interface payment_refund_declined_components_schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1Code;
    family: payment_refund_declined_components_schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export type ExternalBankTransactionDomain1Code = string & string;

export interface payment_refund_declined_components_schemas_BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1Code;
    sub_family_code: ExternalBankTransactionSubFamily1Code;
    [key: string]: unknown;
}

export type ExternalBankTransactionFamily1Code = string & string;

export type ExternalBankTransactionSubFamily1Code = string & string;

export type ResponseWebhookV100RefunddeclinedPost = ResponseOapi<unknown, 200, string>;

/**
 * Payment refund declined
 */
export interface RequestWebhookV100RefunddeclinedPost extends OapiContext {
    headers: {
        "x-client-signature": string;
    };
    body: PaymentRefundDeclinedEventBody;
}

export type PathWebhookV100RefunddeclinedPost<R extends Empty = Empty> = (req: RequestWebhookV100RefunddeclinedPost & R) => Promise<ResponseWebhookV100RefunddeclinedPost>;

export interface CreatePaymentRefund {
    Data: {
        Amount?: string;
        [key: string]: unknown;
    };
}

export interface SuccessResponseBody {
    Data: {
        RefundIdentifier: string;
        Amount?: string;
        [key: string]: unknown;
    };
}

export interface ErrorResponseBody {
    Code: string;
    Id?: string;
    Message: string;
    Errors: ErrorList;
}

export type ErrorList = ErrorItem[];

export interface ErrorItem {
    ErrorCode?: string;
    Message: string;
    Path?: string;
    Url?: string;
}

export type ResponsePaymentsV100IdRefundsPost = ResponseOapi<SuccessResponseBody, 202, "application/json"> | ResponseOapi<ErrorResponseBody, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<ErrorResponseBody, 403, "application/json"> | ResponseOapi<ErrorResponseBody, 404, "application/json"> | ResponseOapi<ErrorResponseBody, 409, "application/json"> | ResponseOapi<ErrorResponseBody, 500, "application/json">;

/**
 * Payment Refund
 * Request Payment Refund
 *
 * Required OAuth Audience: <code>PaymentSession</code>
 */
export interface RequestPaymentsV100IdRefundsPost<TAuthInfo> extends OapiContext {
    headers: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": string;
    };
    path: {
        /**
         * A GUID representing the payment reference
         */
        id: string;
    };
    body?: CreatePaymentRefund;
    authInfo: TAuthInfo;
}

/**
 * Request Payment Refund
 *
 * Required OAuth Audience: <code>PaymentSession</code>
 */
export type PathPaymentsV100IdRefundsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestPaymentsV100IdRefundsPost<TAuthInfo> & R) => Promise<ResponsePaymentsV100IdRefundsPost>;

export interface OBTransaction6 {
    /**
     * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     */
    AccountId: AccountId;
    /**
     * Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
     */
    TransactionId?: TransactionId;
    /**
     * Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.
     */
    TransactionReference?: TransactionReference;
    /**
     * Indicates whether the transaction is a credit or a debit entry.
     */
    CreditDebitIndicator: OBCreditDebitCode1;
    /**
     * Status of a transaction entry on the books of the account servicer.
     */
    Status: OBEntryStatus1Code;
    /**
     * Date and time when a transaction entry is posted to an account on the account servicer's books.
     * Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    BookingDateTime: BookingDateTime;
    /**
     * Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
     * Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
     * For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    ValueDateTime?: ValueDateTime;
    /**
     * Amount of money in the cash transaction entry.
     */
    Amount: OBActiveOrHistoricCurrencyAndAmount9;
    /**
     * Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
     */
    Balance?: OBTransactionCashBalance;
    /**
     * Financial institution servicing an account for the creditor.
     */
    CreditorAgent?: OBBranchAndFinancialInstitutionIdentification61;
    /**
     * Unambiguous identification of the account of the creditor, in the case of a debit transaction.
     */
    CreditorAccount?: OBCashAccount60;
    /**
     * Financial institution servicing an account for the debtor.
     */
    DebtorAgent?: OBBranchAndFinancialInstitutionIdentification62;
    /**
     * Unambiguous identification of the account of the debtor, in the case of a crebit transaction.
     */
    DebtorAccount?: OBCashAccount61;
    /**
     * Construct a type with a set of properties K of type T
     */
    SupplementaryData?: OBSupplementaryData1;
}

export type AccountId = string;

export type TransactionId = string;

export type TransactionReference = string;

export type OBCreditDebitCode1 = "Credit" | "Debit";

export type OBEntryStatus1Code = "Booked" | "Pending" | "Rejected";

export type BookingDateTime = string;

export type ValueDateTime = string;

export interface OBActiveOrHistoricCurrencyAndAmount9 {
    /**
     * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     */
    Amount: OBActiveCurrencyAndAmountSimpleType;
    /**
     * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
     */
    Currency: ActiveOrHistoricCurrencyCode1;
}

export type OBActiveCurrencyAndAmountSimpleType = string;

export type ActiveOrHistoricCurrencyCode1 = string;

export interface OBTransactionCashBalance {
    /**
     * Indicates whether the balance is a credit or a debit balance.
     * Usage: A zero balance is considered to be a credit balance.
     */
    CreditDebitIndicator: OBCreditDebitCode2;
    /**
     * Balance type, in a coded form.
     */
    Type: OBBalanceType1Code;
    /**
     * Amount of money of the cash balance after a transaction entry is applied to the account..
     */
    Amount: {
        /**
         * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
         */
        Currency: ActiveOrHistoricCurrencyCode1;
        /**
         * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
         */
        Amount: OBActiveCurrencyAndAmountSimpleType;
        [key: string]: unknown;
    };
}

export type OBCreditDebitCode2 = "Credit" | "Debit";

export type OBBalanceType1Code = "ClosingAvailable" | "ClosingBooked" | "ClosingCleared" | "Expected" | "ForwardAvailable" | "Information" | "InterimAvailable" | "InterimBooked" | "InterimCleared" | "OpeningAvailable" | "OpeningBooked" | "OpeningCleared" | "PreviouslyClosedBooked";

export interface OBBranchAndFinancialInstitutionIdentification61 {
    /**
     * Unique and unambiguous identification of a financial institution or a branch of a financial institution.
     */
    Identification?: Identification2;
    /**
     * Name by which an agent is known and which is usually used to identify that agent.
     */
    Name?: Name1;
}

export type Identification2 = string;

export type Name1 = string;

export interface OBCashAccount60 {
    /**
     * Name of the identification scheme, in a coded form as published in an external list.
     */
    SchemeName?: OBExternalAccountIdentification4Code;
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     */
    Identification?: Identification0;
    /**
     * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
     * Note, the account name is not the product name or the nickname of the account.
     */
    Name?: Name0;
    /**
     * This is secondary identification of the account, as assigned by the account servicing institution.
     * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
     */
    SecondaryIdentification?: SecondaryIdentification;
}

export type OBExternalAccountIdentification4Code = "UK.OBIE.BBAN" | "UK.OBIE.IBAN" | "UK.OBIE.PAN" | "UK.OBIE.Paym" | "UK.OBIE.SortCodeAccountNumber";

export type Identification0 = string;

export type Name0 = string;

export type SecondaryIdentification = string;

export interface OBBranchAndFinancialInstitutionIdentification62 {
    /**
     * Unique and unambiguous identification of a financial institution or a branch of a financial institution.
     */
    Identification?: Identification2;
    /**
     * Name by which an agent is known and which is usually used to identify that agent.
     */
    Name?: Name1;
}

export interface OBCashAccount61 {
    /**
     * Name of the identification scheme, in a coded form as published in an external list.
     */
    SchemeName?: OBExternalAccountIdentification4Code;
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     */
    Identification?: Identification0;
    /**
     * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
     * Note, the account name is not the product name or the nickname of the account.
     */
    Name?: Name0;
    /**
     * This is secondary identification of the account, as assigned by the account servicing institution.
     * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
     */
    SecondaryIdentification?: SecondaryIdentification;
}

export type OBSupplementaryData1 = Record_string_any_;

export interface Record_string_any_ {
    [key: string]: unknown;
}

export type TransactionsErrorResponse = OBErrorResponse1_PolErrorCode_;

export type ResponseInboundtransactionsV100TransactionsIdCommitPost = ResponseOapi<{
    /**
     * Provides further details on an entry in the report.
     */
    Data: OBTransaction6;
    [key: string]: unknown;
}, 200, "application/json"> | ResponseOapi<TransactionsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<unknown, 405, string> | ResponseOapi<TransactionsErrorResponse, 409, "application/json"> | ResponseOapi<TransactionsErrorResponse, 500, "application/json">;

export interface RequestInboundtransactionsV100TransactionsIdCommitPost<TAuthInfo> extends OapiContext {
    headers: {
        "x-idempotency-key": string;
    };
    path: {
        id: string;
    };
    authInfo: TAuthInfo;
}

export type PathInboundtransactionsV100TransactionsIdCommitPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestInboundtransactionsV100TransactionsIdCommitPost<TAuthInfo> & R) => Promise<ResponseInboundtransactionsV100TransactionsIdCommitPost>;

export type PageParam = number;

export type FromBookingDateTimeParam = Date;

export type ToBookingDateTimeParam = Date;

export interface OBReadTransaction6 {
    Data: OBReadDataTransaction6;
    /**
     * Links relevant to the payload
     */
    Links: Links;
    /**
     * Meta Data relevant to the payload
     */
    Meta?: Meta2;
}

export interface OBReadDataTransaction6 {
    Transaction?: OBTransaction6[];
}

export interface Links {
    Self: string;
    First?: string;
    Prev?: string;
    Next?: string;
    Last?: string;
}

export interface Meta2 {
    TotalPages?: number;
    /**
     * All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    FirstAvailableDateTime?: ISODateTime;
    /**
     * All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    LastAvailableDateTime?: ISODateTime;
}

export type ISODateTime = string;

export type ResponseInboundtransactionsV100AccountsAccountIdTransactionsGet = ResponseOapi<OBReadTransaction6, 200, "application/json"> | ResponseOapi<TransactionsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<TransactionsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<TransactionsErrorResponse, 500, "application/json">;

export interface RequestInboundtransactionsV100AccountsAccountIdTransactionsGet<TAuthInfo> extends OapiContext {
    path: {
        accountId: string;
    };
    query: {
        page?: PageParam;
        fromBookingDateTime?: FromBookingDateTimeParam;
        toBookingDateTime?: ToBookingDateTimeParam;
    };
    authInfo: TAuthInfo;
}

export type PathInboundtransactionsV100AccountsAccountIdTransactionsGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestInboundtransactionsV100AccountsAccountIdTransactionsGet<TAuthInfo> & R) => Promise<ResponseInboundtransactionsV100AccountsAccountIdTransactionsGet>;

export type ResponseInboundtransactionsV100TransactionsGet = ResponseOapi<OBReadTransaction6, 200, "application/json"> | ResponseOapi<TransactionsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<unknown, 405, string> | ResponseOapi<TransactionsErrorResponse, 500, "application/json">;

export interface RequestInboundtransactionsV100TransactionsGet<TAuthInfo> extends OapiContext {
    query: {
        page?: PageParam;
        fromBookingDateTime?: FromBookingDateTimeParam;
        toBookingDateTime?: ToBookingDateTimeParam;
    };
    authInfo: TAuthInfo;
}

export type PathInboundtransactionsV100TransactionsGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestInboundtransactionsV100TransactionsGet<TAuthInfo> & R) => Promise<ResponseInboundtransactionsV100TransactionsGet>;

export interface UpdateTransactionBody {
    Data: {
        Brand: BillingSystem;
        CustomerAccountNumber: string;
        [key: string]: unknown;
    };
}

export type BillingSystem = "Gentrack" | "Orion";

export type ResponseInboundtransactionsV100TransactionsIdPatch = ResponseOapi<{
    /**
     * Provides further details on an entry in the report.
     */
    Data: OBTransaction6;
    [key: string]: unknown;
}, 200, "application/json"> | ResponseOapi<TransactionsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<unknown, 405, string> | ResponseOapi<TransactionsErrorResponse, 500, "application/json">;

export interface RequestInboundtransactionsV100TransactionsIdPatch<TAuthInfo> extends OapiContext {
    path: {
        id: string;
    };
    body: UpdateTransactionBody;
    authInfo: TAuthInfo;
}

export type PathInboundtransactionsV100TransactionsIdPatch<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestInboundtransactionsV100TransactionsIdPatch<TAuthInfo> & R) => Promise<ResponseInboundtransactionsV100TransactionsIdPatch>;

export interface AddacsReport {
    Data: AddacsData;
    UploadToSFTP: boolean;
}

export interface AddacsData {
    AddacsRecordCount?: number;
    PayerName?: string;
    AccountNumber?: string;
    SortCode?: string;
    ReasonCode?: string;
    NewAccountNumber?: string;
    NewSortCode?: string;
    DdiReference?: string;
    Sun?: string;
    InvalidBody?: boolean;
}

export interface DirectDebitReportResponse {
    Data: DirectDebitReportResponseData;
    UploadToSFTP: boolean;
}

export interface DirectDebitReportResponseData {
    ReportId: string;
    ReportType: DirectDebitReportType;
    ReportContent: string;
    ReportName: string;
}

export type DirectDebitReportType = "AUDDIS" | "ADDACS" | "ARUDD" | "DDIC" | "AWACS" | "ARUCS";

export type ResponseDirectdebittestharnessV100ReportsAddacsPost = ResponseOapi<DirectDebitReportResponse, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<unknown, 500, string>;

/**
 *
 * NewAccountNumber and New only required if ReasonCode === "3" || ReasonCode === "C"
 */
export interface RequestDirectdebittestharnessV100ReportsAddacsPost<TAuthInfo> extends OapiContext {
    body: AddacsReport;
    authInfo: TAuthInfo;
}

/**
 *
 * NewAccountNumber and New only required if ReasonCode === "3" || ReasonCode === "C"
 */
export type PathDirectdebittestharnessV100ReportsAddacsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebittestharnessV100ReportsAddacsPost<TAuthInfo> & R) => Promise<ResponseDirectdebittestharnessV100ReportsAddacsPost>;

export interface ArucsReport {
    Data: ArucsData;
    UploadToSFTP: boolean;
}

export interface ArucsData {
    ArucsRecordCount?: number;
    Amount?: number;
    Currency?: string;
    AccountNumber?: string;
    DdiReference?: string;
    AccountName?: string;
    SortCode?: string;
    BankName?: string;
    BranchName?: string;
    ReturnCode?: string;
    ReturnDescription?: string;
    Sun?: string;
}

export type ResponseDirectdebittestharnessV100ReportsArucsPost = ResponseOapi<DirectDebitReportResponse, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<unknown, 500, string>;

export interface RequestDirectdebittestharnessV100ReportsArucsPost<TAuthInfo> extends OapiContext {
    body: ArucsReport;
    authInfo: TAuthInfo;
}

export type PathDirectdebittestharnessV100ReportsArucsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebittestharnessV100ReportsArucsPost<TAuthInfo> & R) => Promise<ResponseDirectdebittestharnessV100ReportsArucsPost>;

export interface AruddReport {
    Data: AruddData;
    UploadToSFTP: boolean;
}

export interface AruddData {
    AruddRecordCount?: number;
    Amount?: number;
    Currency?: string;
    AccountNumber?: string;
    DdiReference?: string;
    AccountName?: string;
    SortCode?: string;
    AccountType?: string;
    BankName?: string;
    BranchName?: string;
    returnCode?: string;
    returnDescription?: string;
    Sun?: string;
    InvalidBody?: boolean;
}

export type ResponseDirectdebittestharnessV100ReportsAruddPost = ResponseOapi<DirectDebitReportResponse, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<unknown, 500, string>;

/**
 *
 * User will either need to provide both returnCode and returnDescription fields or leave both fields as ""
 */
export interface RequestDirectdebittestharnessV100ReportsAruddPost<TAuthInfo> extends OapiContext {
    body: AruddReport;
    authInfo: TAuthInfo;
}

/**
 *
 * User will either need to provide both returnCode and returnDescription fields or leave both fields as ""
 */
export type PathDirectdebittestharnessV100ReportsAruddPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebittestharnessV100ReportsAruddPost<TAuthInfo> & R) => Promise<ResponseDirectdebittestharnessV100ReportsAruddPost>;

export interface AuddisReport {
    Data: AuddisData;
    UploadToSFTP: boolean;
}

export interface AuddisData {
    AuddisRecordCount?: number;
    PayerName?: string;
    PayerAccountNumber?: string;
    PayerSortCode?: string;
    ReasonCode?: string;
    NewSortCode?: string;
    NewAccountNumber?: string;
    Sun?: string;
    DdiReference?: string;
    InvalidBody?: boolean;
}

export type ResponseDirectdebittestharnessV100ReportsAuddisPost = ResponseOapi<DirectDebitReportResponse, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<unknown, 500, string>;

/**
 * NewAccountNumber and NewSortcode only required if ReasonCode === "C"
 */
export interface RequestDirectdebittestharnessV100ReportsAuddisPost<TAuthInfo> extends OapiContext {
    body: AuddisReport;
    authInfo: TAuthInfo;
}

/**
 * NewAccountNumber and NewSortcode only required if ReasonCode === "C"
 */
export type PathDirectdebittestharnessV100ReportsAuddisPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebittestharnessV100ReportsAuddisPost<TAuthInfo> & R) => Promise<ResponseDirectdebittestharnessV100ReportsAuddisPost>;

export interface AwacsReport {
    Data: AwacsData;
    UploadToSFTP: boolean;
}

export interface AwacsData {
    AwacsRecordCount?: number;
    Sun?: string;
    ReasonCode?: string;
    PayerName?: string;
    PayerAccountNumber?: string;
    PayerSortCode?: string;
    PayerNewSortCode?: string;
    PayerNewAccountNumber?: string;
    TransactionCode?: string;
    OriginalSortCode?: string;
    OriginalAccountNumber?: string;
    DdiReference?: string;
}

export type ResponseDirectdebittestharnessV100ReportsAwacsPost = ResponseOapi<DirectDebitReportResponse, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<unknown, 500, string>;

export interface RequestDirectdebittestharnessV100ReportsAwacsPost<TAuthInfo> extends OapiContext {
    body: AwacsReport;
    authInfo: TAuthInfo;
}

export type PathDirectdebittestharnessV100ReportsAwacsPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebittestharnessV100ReportsAwacsPost<TAuthInfo> & R) => Promise<ResponseDirectdebittestharnessV100ReportsAwacsPost>;

export interface DDICReport {
    Data: DDICData;
    UploadToSFTP: boolean;
}

export interface DDICData {
    DDICRecordCount?: number;
    PayingBankReference?: string;
    SUReference?: string;
    ReasonCode?: string;
    PayerSortCode?: string;
    PayerAccount?: string;
    PayerName?: string;
    Sun?: string;
    InvalidBody?: boolean;
}

export type ResponseDirectdebittestharnessV100ReportsDdicPost = ResponseOapi<DirectDebitReportResponse, 200, "application/json"> | ResponseOapi<BacsErrorResponse, 400, "application/json"> | ResponseOapi<unknown, 401, string> | ResponseOapi<BacsErrorResponse, 403, "application/json"> | ResponseOapi<unknown, 405, string> | ResponseOapi<unknown, 500, string>;

export interface RequestDirectdebittestharnessV100ReportsDdicPost<TAuthInfo> extends OapiContext {
    body: DDICReport;
    authInfo: TAuthInfo;
}

export type PathDirectdebittestharnessV100ReportsDdicPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestDirectdebittestharnessV100ReportsDdicPost<TAuthInfo> & R) => Promise<ResponseDirectdebittestharnessV100ReportsDdicPost>;

export interface Config<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> extends OapiConfig<R> {
    paths: {
        "/authentication/v1.0.0/oauth/token": {
            /**
             * Request a Bearer token
             */
            post: PathAuthenticationV100OauthTokenPost<R, TAuthInfo>;
        };
        "/bank-account/uk/v1.0.0/information": {
            /**
             * Retrieve information on a UK bank account
             *
             * Required OAuth Audience: <code>BankAccounts</code>
             */
            post: PathBankaccountUkV100InformationPost<R, TAuthInfo>;
        };
        "/direct-debit/v1.0.0/instructions/{MandateIdentification}/collections": {
            /**
             * Create Direct Debit Collections
             *
             * Required OAuth Audience: <code>DirectDebits</code>
             */
            post: PathDirectdebitV100InstructionsMandateIdentificationCollectionsPost<R, TAuthInfo>;
        };
        "/direct-debit/v1.0.0/instructions": {
            /**
             * Create Direct Debit Instruction
             *
             * Required OAuth Audience: <code>DirectDebits</code>
             */
            post: PathDirectdebitV100InstructionsPost<R, TAuthInfo>;
        };
        "/direct-debit/v1.0.0/instructions/{MandateIdentification}": {
            /**
             * Update Direct Debit Instruction
             *
             * Required OAuth Audience: <code>DirectDebits</code>
             */
            put: PathDirectdebitV100InstructionsMandateIdentificationPut<R, TAuthInfo>;
        };
        "/direct-debit/v1.0.0/instructions/{MandateIdentification}/status": {
            /**
             * Update Direct Debit Instruction Status
             *
             * Required OAuth Audience: <code>DirectDebits</code>
             */
            put: PathDirectdebitV100InstructionsMandateIdentificationStatusPut<R, TAuthInfo>;
        };
        "/bulk-collections/v1.0.0/collection-files": {
            /**
             * Upload a Direct Debit collection file
             *
             * Required OAuth Audience: <code>DirectDebits</code>
             *
             * Example file content:
             *
             * <code>{
             * "document": {
             *  "fi_to_fi_customer_direct_debit": {
             *    "group_header": {
             *      "message_identification": "cc60bfc5-7876-4fba-ae24-2d9c3e32e0b0",
             *      "creation_date_time": "2021-07-23T10:46:56.697Z",
             *      "number_of_transactions": 3
             *    },
             *    "direct_debit_transaction_information": [
             *      {
             *        "payment_identification": {
             *          "end_to_end_identification": "5231998b-d704-40e1-aea4-3ac952aa757b"
             *        },
             *        "interbank_settlement_amount": {
             *          "active_currency": "GBP",
             *          "currency_amount": "10.00"
             *        },
             *        "interbank_settlement_date": "2021-07-23",
             *        "direct_debit_transaction": {
             *          "mandate_related_information": {
             *            "mandate_id": "EXE-123456"
             *          }
             *        }
             *      }
             *    ]
             *  }
             * }
             * }</code>
             */
            post: PathBulkcollectionsV100CollectionfilesPost<R, TAuthInfo>;
        };
        "/bulk-collections/v1.0.0/collection-files/{CollectionFileIdentification}": {
            /**
             * Get the status of a Direct Debit collection file
             *
             * Required OAuth Audience: <code>DirectDebits</code>
             */
            get: PathBulkcollectionsV100CollectionfilesCollectionFileIdentificationGet<R, TAuthInfo>;
        };
        "/direct-debit-webhooks/v1.0.0/auddis-bank-returned-advices": {
            post: PathDirectdebitwebhooksV100AuddisbankreturnedadvicesPost<R>;
        };
        "/direct-debit-webhooks/v1.0.0/arudd-unpaid-direct-debit-advices": {
            post: PathDirectdebitwebhooksV100AruddunpaiddirectdebitadvicesPost<R>;
        };
        "/direct-debit-webhooks/v1.0.0/addacs-amendments-advices": {
            post: PathDirectdebitwebhooksV100AddacsamendmentsadvicesPost<R>;
        };
        "/direct-debit-webhooks/v1.0.0/addacs-cancellations-advices": {
            post: PathDirectdebitwebhooksV100AddacscancellationsadvicesPost<R>;
        };
        "/direct-debit-webhooks/v1.0.0/ddic-indemnity-claim-advices": {
            post: PathDirectdebitwebhooksV100DdicindemnityclaimadvicesPost<R>;
        };
        "/direct-debit-webhooks/v1.0.0/collection-advices": {
            post: PathDirectdebitwebhooksV100CollectionadvicesPost<R>;
        };
        "/direct-credit/v1.0.0/instructions": {
            /**
             * Create Direct Credit
             *
             * Required OAuth Audience: <code>DirectCredits</code>
             */
            post: PathDirectcreditV100InstructionsPost<R, TAuthInfo>;
        };
        "/direct-credit-webhooks/v1.0.0/awacs-wrong-account-for-credits-advices": {
            post: PathDirectcreditwebhooksV100AwacswrongaccountforcreditsadvicesPost<R>;
        };
        "/direct-credit-webhooks/v1.0.0/arucs-unapplied-credits-advices": {
            post: PathDirectcreditwebhooksV100ArucsunappliedcreditsadvicesPost<R>;
        };
        "/payments/v1.0.0/sessions": {
            /**
             * Request Payment Session
             *
             * Required OAuth Audience: <code>PaymentSession</code>
             */
            post: PathPaymentsV100SessionsPost<R, TAuthInfo>;
        };
        "/webhook/v1.0.0/approved": {
            post: PathWebhookV100ApprovedPost<R>;
        };
        "/webhook/v1.0.0/voided": {
            post: PathWebhookV100VoidedPost<R>;
        };
        "/webhook/v1.0.0/captured": {
            post: PathWebhookV100CapturedPost<R>;
        };
        "/webhook/v1.0.0/declined": {
            post: PathWebhookV100DeclinedPost<R>;
        };
        "/webhook/v1.0.0/refund-declined": {
            post: PathWebhookV100RefunddeclinedPost<R>;
        };
        "/payments/v1.0.0/{id}/refunds": {
            /**
             * Request Payment Refund
             *
             * Required OAuth Audience: <code>PaymentSession</code>
             */
            post: PathPaymentsV100IdRefundsPost<R, TAuthInfo>;
        };
        "/inbound-transactions/v1.0.0/transactions/{id}/commit": {
            post: PathInboundtransactionsV100TransactionsIdCommitPost<R, TAuthInfo>;
        };
        "/inbound-transactions/v1.0.0/accounts/{accountId}/transactions": {
            get: PathInboundtransactionsV100AccountsAccountIdTransactionsGet<R, TAuthInfo>;
        };
        "/inbound-transactions/v1.0.0/transactions": {
            get: PathInboundtransactionsV100TransactionsGet<R, TAuthInfo>;
        };
        "/inbound-transactions/v1.0.0/transactions/{id}": {
            patch: PathInboundtransactionsV100TransactionsIdPatch<R, TAuthInfo>;
        };
        "/direct-debit-test-harness/v1.0.0/reports/addacs": {
            /**
             *
             * NewAccountNumber and New only required if ReasonCode === "3" || ReasonCode === "C"
             */
            post: PathDirectdebittestharnessV100ReportsAddacsPost<R, TAuthInfo>;
        };
        "/direct-debit-test-harness/v1.0.0/reports/arucs": {
            post: PathDirectdebittestharnessV100ReportsArucsPost<R, TAuthInfo>;
        };
        "/direct-debit-test-harness/v1.0.0/reports/arudd": {
            /**
             *
             * User will either need to provide both returnCode and returnDescription fields or leave both fields as ""
             */
            post: PathDirectdebittestharnessV100ReportsAruddPost<R, TAuthInfo>;
        };
        "/direct-debit-test-harness/v1.0.0/reports/auddis": {
            /**
             * NewAccountNumber and NewSortcode only required if ReasonCode === "C"
             */
            post: PathDirectdebittestharnessV100ReportsAuddisPost<R, TAuthInfo>;
        };
        "/direct-debit-test-harness/v1.0.0/reports/awacs": {
            post: PathDirectdebittestharnessV100ReportsAwacsPost<R, TAuthInfo>;
        };
        "/direct-debit-test-harness/v1.0.0/reports/ddic": {
            post: PathDirectdebittestharnessV100ReportsDdicPost<R, TAuthInfo>;
        };
    };
    security: {
        ClientCredentials: OapiSecurityResolver<R, TAuthInfo>;
    };
}
"
`;

exports[`Types Content Test schemes.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, OapiSecurityResolver, OapiAuthInfo, ResponseOapi } from "@laminar/laminar";

import { Readable } from "stream";

export const openApiTyped = <R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo>(config: Config<R, TAuthInfo>): Promise<HttpListener<R>> => openApi(config);

export interface HttpError {
    message: string;
}

export type ResponseWellknownHealthcheckGet = ResponseOapi<{
    success: boolean;
}, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Health check endpoint
 */
export type PathWellknownHealthcheckGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownHealthcheckGet>;

export type ResponseWellknownOpenapiyamlGet = ResponseOapi<string | Readable | Buffer, 200, string>;

/**
 * The open api spec for the service. OpenAPI v3.
 */
export type PathWellknownOpenapiyamlGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownOpenapiyamlGet>;

export type ResponseWellknownComponentsyamlGet = ResponseOapi<string | Readable | Buffer, 200, string>;

/**
 * Shared schemas for the open api spec. OpenAPI v3.
 */
export type PathWellknownComponentsyamlGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownComponentsyamlGet>;

export type ResponseWellknownLevelisationsyamlGet = ResponseOapi<string | Readable | Buffer, 200, string>;

/**
 * Schemas for Levelisation endpoints. OpenAPI v3.
 */
export type PathWellknownLevelisationsyamlGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownLevelisationsyamlGet>;

export type ResponseWellknownReadchecksyamlGet = ResponseOapi<string | Readable | Buffer, 200, string>;

/**
 * Schemas for Read Checks endpoints. OpenAPI v3.
 */
export type PathWellknownReadchecksyamlGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownReadchecksyamlGet>;

export type ResponseWellknownOpenapihtmlGet = ResponseOapi<string | Readable | Buffer, 200, "text/html">;

/**
 * The open api spec for the service. OpenAPI v3.
 */
export type PathWellknownOpenapihtmlGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseWellknownOpenapihtmlGet>;

export interface Session {
    jwt: string;
    expiresAt?: string;
    user: {
        fullName?: string;
        email: string;
        avatar?: string;
        scopes?: string[];
        [key: string]: unknown;
    };
    [key: string]: unknown;
}

export type ResponseV1SessionPost = ResponseOapi<Session, 200, "application/json"> | ResponseOapi<HttpError, 400, "application/json"> | ResponseOapi<HttpError, 401, "application/json"> | ResponseOapi<HttpError, 403, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Create a session for the current user
 */
export interface RequestV1SessionPost extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    body: {
        type: "oauth" | "jwt";
        token: string;
    };
}

export type PathV1SessionPost<R extends Empty = Empty> = (req: RequestV1SessionPost & R) => Promise<ResponseV1SessionPost>;

export interface List {
    total: number;
    [key: string]: unknown;
}

export interface CommBatchList {
    id: number;
    type: CommBatchType;
    filename: string;
    itemsPending?: number;
    itemsDelivered?: number;
    itemsScheduled?: number;
    itemsFailed?: number;
    itemsExpired?: number;
    createdAt: string;
    updatedAt?: string;
}

export type CommBatchType = "FITMeterInspectionDue" | "Statement";

export type ResponseV1CommbatchesGet = ResponseOapi<List & {
    data: CommBatchList[];
    [key: string]: unknown;
}, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get Comm Batches.
 */
export interface RequestV1CommbatchesGet<TAuthInfo> extends OapiContext {
    query: {
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
    };
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    authInfo: TAuthInfo;
}

export type PathV1CommbatchesGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV1CommbatchesGet<TAuthInfo> & R) => Promise<ResponseV1CommbatchesGet>;

export type NewCommBatch = NewCommBatchFITMeterInspectionDue | NewCommBatchStatement;

export interface NewCommBatchFITMeterInspectionDue {
    type: "FITMeterInspectionDue";
    filename: string;
    items: {
        templateParams: {
            fitId: string;
        };
        contactAddress?: CommContactAddress;
    }[];
    [key: string]: unknown;
}

export type CommContactAddress = CommsEmailAddress | CommsPostalAddress | CommsPhoneNumber;

export interface CommsEmailAddress {
    emailAddress: string;
}

export interface CommsPostalAddress {
    postalAddress: Address;
}

export interface Address {
    contactName?: string;
    company?: string;
    line1?: string;
    line2?: string;
    line3?: string;
    town?: string;
    county?: string;
    postcode: string;
    country: string;
}

export interface CommsPhoneNumber {
    phoneNumber: string;
}

export interface NewCommBatchStatement {
    type: "Statement";
    filename: string;
    items: {
        templateParams: {
            accountNumber: string;
            payment: {
                startDate: string;
                startDateLong?: string;
                endDate: string;
                endDateLong?: string;
                generation?: {
                    endDate?: string;
                    value?: string;
                };
                deemedExport?: {
                    endDate?: string;
                    value?: string;
                };
                export?: {
                    endDate?: string;
                    value?: string;
                };
                vat?: string;
                total: string;
            };
            reads?: {
                generationOpening?: {
                    date?: string;
                    value?: string;
                };
                generationClosing?: {
                    date?: string;
                    value?: string;
                };
                exportOpening?: {
                    date?: string;
                    value?: string;
                };
                exportClosing?: {
                    date?: string;
                    value?: string;
                };
                percentageSplit?: string;
            };
            rates?: {
                from?: string;
                export?: string;
                generationOld?: string;
                exportOld?: string;
                generation?: string;
                genPeriod?: string;
                expPeriod?: string;
            };
            emailAddress?: string;
        };
        contactAddress?: CommContactAddress;
    }[];
    [key: string]: unknown;
}

export interface CommBatch {
    id: number;
    createdAt: string;
    itemsPending?: number;
    itemsDelivered?: number;
    itemsScheduled?: number;
    itemsFailed?: number;
    itemsExpired?: number;
    type: CommBatchType;
    filename: string;
    items: {
        id: number;
        commId?: string;
        commBatchId: number;
        status: CommBatchItemStatus;
        createdAt: string;
        updatedAt?: string;
        error?: string;
        templateParams: any;
        contactAddress: any;
    }[];
}

export type CommBatchItemStatus = "Scheduled" | "Pending" | "Delivered" | "Expired" | "Failed";

export type ResponseV1CommbatchesPost = ResponseOapi<CommBatch, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Create New Comm Batch
 * Create new Comm Batch that will be processed and can be monitored responses
 *
 */
export interface RequestV1CommbatchesPost<TAuthInfo> extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    body: NewCommBatch;
    authInfo: TAuthInfo;
}

/**
 * Create new Comm Batch that will be processed and can be monitored responses
 *
 */
export type PathV1CommbatchesPost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV1CommbatchesPost<TAuthInfo> & R) => Promise<ResponseV1CommbatchesPost>;

export type ResponseV1CommbatchesIdGet = ResponseOapi<CommBatch, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get Comm Batch by ID
 */
export interface RequestV1CommbatchesIdGet<TAuthInfo> extends OapiContext {
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    authInfo: TAuthInfo;
}

export type PathV1CommbatchesIdGet<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV1CommbatchesIdGet<TAuthInfo> & R) => Promise<ResponseV1CommbatchesIdGet>;

export type ResponseV1ProcessMeterreadstolerancePost = ResponseOapi<{
    success: boolean;
}, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Do a tolerance checks for all the reads that have not been checked
 */
export interface RequestV1ProcessMeterreadstolerancePost<TAuthInfo> extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    authInfo: TAuthInfo;
}

export type PathV1ProcessMeterreadstolerancePost<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> = (req: RequestV1ProcessMeterreadstolerancePost<TAuthInfo> & R) => Promise<ResponseV1ProcessMeterreadstolerancePost>;

export interface MeterReadCheck {
    id: number;
    cfrFitId: string;
    accountId: number;
    dateOn: string;
    value: number;
    type: "Closing" | "Meter Verification" | "Opening" | "Quarterly";
    reason?: string;
    createdAt: string;
    tolerance?: MeterReadTolerance;
    isAccepted: boolean;
    [key: string]: unknown;
}

export interface MeterReadTolerance {
    previousRead?: MeterReadToleranceRead;
    expected?: MeterReadToleranceRead;
    error?: string;
    [key: string]: unknown;
}

export interface MeterReadToleranceRead {
    dateOn: string;
    value: number;
    [key: string]: unknown;
}

export type ResponseV1ReadchecksGet = ResponseOapi<List & {
    data?: MeterReadCheck[];
    [key: string]: unknown;
}, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Tolerance checks
 * List of Meter Reads that have failed their tolernace checks and need to be reviewed
 */
export interface RequestV1ReadchecksGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
    };
}

/**
 * List of Meter Reads that have failed their tolernace checks and need to be reviewed
 */
export type PathV1ReadchecksGet<R extends Empty = Empty> = (req: RequestV1ReadchecksGet & R) => Promise<ResponseV1ReadchecksGet>;

export interface BulkUpdate {
    ids: ListOfIds;
    [key: string]: unknown;
}

export type ListOfIds = number[];

export interface MeterReadCheckSave {
    isAccepted: boolean;
    [key: string]: unknown;
}

export type ResponseV1ReadchecksPut = ResponseOapi<ListOfIds, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Bulk Save Tolerance Check
 * Update Multiple Tolerance check details at once
 */
export interface RequestV1ReadchecksPut extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    body: BulkUpdate & {
        data: MeterReadCheckSave;
        [key: string]: unknown;
    };
}

/**
 * Update Multiple Tolerance check details at once
 */
export type PathV1ReadchecksPut<R extends Empty = Empty> = (req: RequestV1ReadchecksPut & R) => Promise<ResponseV1ReadchecksPut>;

export interface BulkDelete {
    ids: ListOfIds;
    [key: string]: unknown;
}

export type ResponseV1ReadchecksDelete = ResponseOapi<ListOfIds, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Save Tolerance Check
 * Update Tolerance check details
 */
export interface RequestV1ReadchecksDelete extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    body: BulkDelete;
}

/**
 * Update Tolerance check details
 */
export type PathV1ReadchecksDelete<R extends Empty = Empty> = (req: RequestV1ReadchecksDelete & R) => Promise<ResponseV1ReadchecksDelete>;

export type ResponseV1ReadchecksIdGet = ResponseOapi<MeterReadCheck, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Single Tolerance check
 * Details on the meter read tolerance check
 */
export interface RequestV1ReadchecksIdGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Details on the meter read tolerance check
 */
export type PathV1ReadchecksIdGet<R extends Empty = Empty> = (req: RequestV1ReadchecksIdGet & R) => Promise<ResponseV1ReadchecksIdGet>;

export type ResponseV1ReadchecksIdPut = ResponseOapi<MeterReadCheck, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Save Tolerance Check
 * Update Tolerance check details
 */
export interface RequestV1ReadchecksIdPut extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
    body: MeterReadCheckSave;
}

/**
 * Update Tolerance check details
 */
export type PathV1ReadchecksIdPut<R extends Empty = Empty> = (req: RequestV1ReadchecksIdPut & R) => Promise<ResponseV1ReadchecksIdPut>;

export type ResponseV1ReadchecksIdDelete = ResponseOapi<{
    success: boolean;
}, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Save Tolerance Check
 * Update Tolerance check details
 */
export interface RequestV1ReadchecksIdDelete extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Update Tolerance check details
 */
export type PathV1ReadchecksIdDelete<R extends Empty = Empty> = (req: RequestV1ReadchecksIdDelete & R) => Promise<ResponseV1ReadchecksIdDelete>;

export interface LevelisationList {
    id: number;
    quarter: LevelisationQuarter;
    startOn?: string;
    endOn?: string;
    isAccepted: boolean;
    [key: string]: unknown;
}

export type LevelisationQuarter = string;

export type ResponseV1LevelisationsGet = ResponseOapi<List & {
    data?: LevelisationList[];
    [key: string]: unknown;
}, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Levelisations
 * List of Levelisation processes by quarters
 */
export interface RequestV1LevelisationsGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
    };
}

/**
 * List of Levelisation processes by quarters
 */
export type PathV1LevelisationsGet<R extends Empty = Empty> = (req: RequestV1LevelisationsGet & R) => Promise<ResponseV1LevelisationsGet>;

export interface LevelisationCreate {
    quarter: LevelisationQuarter;
    [key: string]: unknown;
}

export type Levelisation = LevelisationList & {
    totalCount?: number;
    pendingCount?: number;
    doneCount?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalGenerationPayment?: Pennies;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalExportPayment?: Pennies;
    totalMeteredExportEnergy?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalMeteredExportPayment?: Pennies;
    totalDeemedExportEnergy?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalDeemedExportPayment?: Pennies;
    [key: string]: unknown;
};

export type Pennies = number;

export type ResponseV1LevelisationsPost = ResponseOapi<Levelisation, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Create new Levelisation
 * Create a new Levelisation
 */
export interface RequestV1LevelisationsPost extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    body: LevelisationCreate;
}

/**
 * Create a new Levelisation
 */
export type PathV1LevelisationsPost<R extends Empty = Empty> = (req: RequestV1LevelisationsPost & R) => Promise<ResponseV1LevelisationsPost>;

export type ResponseV1LevelisationsIdGet = ResponseOapi<Levelisation, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Quater levelisation
 * Levelisation calculation for all accounts
 */
export interface RequestV1LevelisationsIdGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Levelisation calculation for all accounts
 */
export type PathV1LevelisationsIdGet<R extends Empty = Empty> = (req: RequestV1LevelisationsIdGet & R) => Promise<ResponseV1LevelisationsIdGet>;

export interface LevelisationSave {
    isAccepted: boolean;
    isRestarted?: boolean;
    [key: string]: unknown;
}

export type ResponseV1LevelisationsIdPut = ResponseOapi<Levelisation, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Save Levelisation
 * Update Levelisation
 */
export interface RequestV1LevelisationsIdPut extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
    body: LevelisationSave;
}

/**
 * Update Levelisation
 */
export type PathV1LevelisationsIdPut<R extends Empty = Empty> = (req: RequestV1LevelisationsIdPut & R) => Promise<ResponseV1LevelisationsIdPut>;

export type AccountLevelisation = AccountLevelisationList & {
    generationPeriods?: PeriodWithCalculatedAmount[];
    exportPeriods?: PeriodWithCalculatedAmount[];
    [key: string]: unknown;
};

export interface AccountLevelisationList {
    id: number;
    levelisationId: number;
    accountId: number;
    installationId: number;
    state: AccountLevelisationState;
    cfrFitId: string;
    isAccepted: boolean;
    generationStartReadOn?: string;
    generationStartReadValue?: number;
    generationEndReadOn?: string;
    generationEndReadValue?: number;
    generationPercentageSplit?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    generationPayment?: Pennies;
    generationEnergy?: number;
    exportStartReadOn?: string;
    exportStartReadValue?: number;
    exportEndReadOn?: string;
    exportEndReadValue?: number;
    exportPercentageSplit?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    exportPayment?: Pennies;
    exportEnergy?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalPayment?: Pennies;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    vatPayment?: Pennies;
    [key: string]: unknown;
}

export type AccountLevelisationState = "Pending" | "Done";

export interface PeriodWithCalculatedAmount {
    start?: LevelisationMeterRead;
    end?: LevelisationMeterRead;
    rate?: LevelisationRate;
    percentageSplit?: number;
    energy?: number;
    amount?: string;
    [key: string]: unknown;
}

export interface LevelisationMeterRead {
    dateOn: string;
    value: number;
    [key: string]: unknown;
}

export interface LevelisationRate {
    startOn: string;
    endOn: string;
    rate: number;
    [key: string]: unknown;
}

export type ResponseV1AccountlevelisationsGet = ResponseOapi<List & {
    data?: AccountLevelisation[];
    [key: string]: unknown;
}, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Levelisations
 * List of Levelisation processes by quarters
 */
export interface RequestV1AccountlevelisationsGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
    };
}

/**
 * List of Levelisation processes by quarters
 */
export type PathV1AccountlevelisationsGet<R extends Empty = Empty> = (req: RequestV1AccountlevelisationsGet & R) => Promise<ResponseV1AccountlevelisationsGet>;

export interface BulkAccountLevelisationSave {
    isAccepted: boolean;
    [key: string]: unknown;
}

export type ResponseV1AccountlevelisationsPut = ResponseOapi<ListOfIds, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Bulk Save Account Levelisations
 * Update Account Levelisations at once
 */
export interface RequestV1AccountlevelisationsPut extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    body: BulkUpdate & {
        data: BulkAccountLevelisationSave;
        [key: string]: unknown;
    };
}

/**
 * Update Account Levelisations at once
 */
export type PathV1AccountlevelisationsPut<R extends Empty = Empty> = (req: RequestV1AccountlevelisationsPut & R) => Promise<ResponseV1AccountlevelisationsPut>;

export type ResponseV1AccountlevelisationsIdGet = ResponseOapi<AccountLevelisation, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Account levelisation tariff
 * Levelisation tariff for a single account
 */
export interface RequestV1AccountlevelisationsIdGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Levelisation tariff for a single account
 */
export type PathV1AccountlevelisationsIdGet<R extends Empty = Empty> = (req: RequestV1AccountlevelisationsIdGet & R) => Promise<ResponseV1AccountlevelisationsIdGet>;

export interface AccountLevelisationSave {
    id: number;
    isAccepted: boolean;
    [key: string]: unknown;
}

export type ResponseV1AccountlevelisationsIdPut = ResponseOapi<AccountLevelisation, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Save Account Levelisation
 * Update Account Levelisation
 */
export interface RequestV1AccountlevelisationsIdPut extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
    body: AccountLevelisationSave;
}

/**
 * Update Account Levelisation
 */
export type PathV1AccountlevelisationsIdPut<R extends Empty = Empty> = (req: RequestV1AccountlevelisationsIdPut & R) => Promise<ResponseV1AccountlevelisationsIdPut>;

export type ResponseV1PaymentexportGet = ResponseOapi<string | Readable | Buffer, 200, "text/csv"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Payment CSV Export
 * Cheque Payments
 */
export interface RequestV1PaymentexportGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * Just single page parameter
         */
        page: number;
    };
    body: {
        paymentType: "Cheque" | "BACS";
        quarter: string;
    };
}

/**
 * Cheque Payments
 */
export type PathV1PaymentexportGet<R extends Empty = Empty> = (req: RequestV1PaymentexportGet & R) => Promise<ResponseV1PaymentexportGet>;

export interface AccountListItem {
    id: number;
    firstName: string;
    lastName: string;
    email?: string;
    state?: AccountStateType;
    address?: string;
    fitIds?: ListOfStrings;
    [key: string]: unknown;
}

export type AccountStateType = "Active" | "Pending" | "Dispute" | "Closed";

export type ListOfStrings = string[];

export type ResponseV1AccountGet = ResponseOapi<List & {
    data: AccountListItem[];
    [key: string]: unknown;
}, 200, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Accounts
 * A list of fit and seg accounts
 */
export interface RequestV1AccountGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
    };
}

/**
 * A list of fit and seg accounts
 */
export type PathV1AccountGet<R extends Empty = Empty> = (req: RequestV1AccountGet & R) => Promise<ResponseV1AccountGet>;

export interface MeterRead {
    id: number;
    meterId: number;
    dateOn: string;
    value: number;
    type: MeterReadType;
    reason?: string;
    createdAt: string;
    updatedAt?: string;
    sourceSystemId?: number;
}

export type MeterReadType = "Closing" | "Meter Verification" | "Opening" | "Quarterly";

export type ResponseV1AccountIdReadsGet = ResponseOapi<MeterRead[], 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get reads for the account
 * Account reads
 */
export interface RequestV1AccountIdReadsGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Account reads
 */
export type PathV1AccountIdReadsGet<R extends Empty = Empty> = (req: RequestV1AccountIdReadsGet & R) => Promise<ResponseV1AccountIdReadsGet>;

export interface Account {
    id: number;
    state: AccountStateType;
    companyRegNumber?: string;
    companyVatNumber?: string;
    companyName?: string;
    primaryContactId?: number;
    secondaryContactId?: number;
    primaryContact?: Contact;
    secondaryContact?: Contact;
    paymentSuspended: boolean;
    beneficiaryName?: string;
    beneficiarySortCode?: string;
    beneficiaryAccountNumber?: string;
    paymentPlan?: "Cheque" | "BACS";
    startOn?: string;
    endOn?: string;
    tosReceived: boolean;
    contracts?: AccountContract[];
}

export interface Contact {
    id: number;
    title?: string;
    fullName?: string;
    email?: string;
    phone?: string;
    addressLine1?: string;
    addressLine2?: string;
    addressLine3?: string;
    city?: string;
    country?: string;
    county?: string;
    postCode?: string;
}

export interface AccountContract {
    contractId: number;
    schemeAccountReference: string;
    schemeType: SchemeType;
    createdAt?: string;
    confirmationOn?: string;
    exportSplit?: number;
    generationSplit?: number;
    tosAgreed?: boolean;
    installationId: number;
    contactId?: number;
    generationTariffId?: number;
    exportTariffId?: number;
    genTariffCode?: string;
    expTariffCode?: string;
    title?: string;
    fullName?: string;
}

export type SchemeType = "FIT" | "SEG";

export type ResponseV1AccountIdGet = ResponseOapi<Account, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get reads for the account
 * Account reads
 */
export interface RequestV1AccountIdGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Account reads
 */
export type PathV1AccountIdGet<R extends Empty = Empty> = (req: RequestV1AccountIdGet & R) => Promise<ResponseV1AccountIdGet>;

export type Contract = any;

export type ResponseV1AccountIdContractsGet = ResponseOapi<Contract[], 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get reads for the account
 * Account reads
 */
export interface RequestV1AccountIdContractsGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Account reads
 */
export type PathV1AccountIdContractsGet<R extends Empty = Empty> = (req: RequestV1AccountIdContractsGet & R) => Promise<ResponseV1AccountIdContractsGet>;

export type ResponseV1ContactIdGet = ResponseOapi<Contact, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get contact by id
 * Contacts
 */
export interface RequestV1ContactIdGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Contacts
 */
export type PathV1ContactIdGet<R extends Empty = Empty> = (req: RequestV1ContactIdGet & R) => Promise<ResponseV1ContactIdGet>;

export interface Payment {
    id: number;
    accountId: number;
    sentAt?: string;
    amount: number;
    type: PaymentType;
    genMeterId: number;
    genMeterStartReadDate?: string;
    genMeterStartReadId?: number;
    genMeterStartReadValue?: number;
    genMeterEndReadDate?: string;
    genMeterEndReadId?: number;
    genMeterEndReadValue?: number;
    genMeterTotalOutput?: number;
    exportMeterId?: number;
    exportMeterStartReadDate?: string;
    exportMeterStartReadId?: number;
    exportMeterStartReadValue?: number;
    exportMeterEndReadDate?: string;
    exportMeterEndReadId?: number;
    exportMeterEndReadValue?: number;
    exportTotalOutput?: number;
    deemedTotalOutput?: number;
    expTariffCode?: string;
    genTariffCode?: string;
    periods?: PaymentPeriods;
    isCompany?: boolean;
    createdAt?: string;
    fitReference: string;
    comment?: string;
    levelisationReference?: string;
}

export type PaymentType = "Levelisation";

export interface PaymentPeriods {
    deemed?: Period[];
    export?: Period[];
    generation?: Period[];
    [key: string]: unknown;
}

export interface Period {
    start: SimpleMeterRead;
    end: SimpleMeterRead;
    rate: number;
    energy?: number;
    amount: string;
    percentageSplit?: number;
}

export interface SimpleMeterRead {
    dateOn: string;
    value: number;
}

export type ResponseV1PaymentGet = ResponseOapi<{
    data: Payment[];
    total: number;
}, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get contact by id
 * Contacts
 */
export interface RequestV1PaymentGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Contacts
 */
export type PathV1PaymentGet<R extends Empty = Empty> = (req: RequestV1PaymentGet & R) => Promise<ResponseV1PaymentGet>;

export interface Installation {
    id: number;
    accountId?: number;
    name?: string;
    type: InstallationType;
    schemeReference?: string;
    confirmationOn?: string;
    generationPercentageSplit?: number;
    exportPercentageSplit?: number;
    termsAndConditionsAgreed?: boolean;
    scheme?: SchemeType;
    technologyType?: TechnologyType;
    propertyType: PropertyType;
    exportType?: ExportType;
    commissionedOn?: string;
    decommissionedOn?: string;
    installedOn: string;
    verifiedOn?: string;
    reverifiedOn?: string;
    inspectedOn?: string;
    mcsReference?: string;
    maxCapacity?: number;
    dncReference?: number;
    exportTariffId?: number;
    generationTariffId?: number;
    roofitReference?: string;
    hasBatteryStorage?: string;
    batteryInstallationDateOn?: string;
    tariffRates?: TariffRate[];
    exportMpan?: string;
    sourceSystemId?: number;
    nameOfGrant?: string;
    valueOfGrant?: number;
    eligibilityStartOn?: string;
    eligibilityEndOn?: string;
    dateGrantRepaid?: string;
    epcRate?: string;
    epcDate?: string;
    epcNumber?: number;
    legacyFitDbId?: string;
    supplyMpan?: string;
    switchedFrom?: string;
    switchedTo?: string;
    address?: Address;
    meters?: InstallationMeter[];
    createdAt: string;
    updatedAt?: string;
    addressId?: number;
    contracts?: AccountContract[];
}

export type InstallationType = "None" | "Extension of an existing FiT-accredited installation" | "Standalone" | "New build" | "Retrofit";

export type TechnologyType = "CHP" | "AD" | "W" | "H" | "PV";

export type PropertyType = "Other" | "School/Education" | "Not for profit" | "Industrial" | "Farm" | "Commercial" | "Domestic";

export type ExportType = "PPA" | "Off Grid" | "Metered Export" | "Deemed";

export interface TariffRate {
    startOn: string;
    endOn?: string;
    rate: number;
    tariffId: number;
    tariffCode: string;
    tariffType: TariffType;
}

export type TariffType = "Export" | "Generation" | "SEG";

export interface InstallationMeter {
    id: number;
    type: MeterType;
    meterId: number;
    installationId?: number;
    startOn?: string;
    endOn?: string;
    mpan?: string;
    shared: boolean;
    msn: string;
    make?: string;
    model?: string;
    gsp?: string;
    distributionRegion?: string;
    addedToInstallationAt: string;
    updatedAt?: string;
}

export type MeterType = "Export" | "Generation";

export type ResponseV1InstallationGet = ResponseOapi<{
    data: Installation[];
    total: number;
}, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get installations
 * Installations
 */
export interface RequestV1InstallationGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Installations
 */
export type PathV1InstallationGet<R extends Empty = Empty> = (req: RequestV1InstallationGet & R) => Promise<ResponseV1InstallationGet>;

export interface Meter {
    id: number;
    mpan?: string;
    shared?: boolean;
    msn: string;
    make?: string;
    model?: string;
    isExport: boolean;
    gsp?: string;
    distributionRegion?: string;
    createdAt: string;
    updatedAt?: string;
}

export type ResponseV1MeterIdGet = ResponseOapi<Meter, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get meter
 * Meter
 */
export interface RequestV1MeterIdGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    path: {
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Meter
 */
export type PathV1MeterIdGet<R extends Empty = Empty> = (req: RequestV1MeterIdGet & R) => Promise<ResponseV1MeterIdGet>;

export type ResponseV1MeterGet = ResponseOapi<{
    data: Meter[];
    total: number;
}, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get meters
 * Meters
 */
export interface RequestV1MeterGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

/**
 * Meters
 */
export type PathV1MeterGet<R extends Empty = Empty> = (req: RequestV1MeterGet & R) => Promise<ResponseV1MeterGet>;

export type ResponseV1ReadGet = ResponseOapi<{
    data: MeterRead[];
    total: number;
}, 200, "application/json"> | ResponseOapi<HttpError, 404, "application/json"> | ResponseOapi<HttpError, 500, "application/json">;

/**
 * Get meter reads
 * Meter reads
 */
export interface RequestV1ReadGet extends OapiContext {
    headers: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    query: {
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter: any;
        /**
         * React admin pagination object
         */
        pagination: {
            page: number;
            perPage: number;
        };
        /**
         * React admin sort object
         */
        sort: {
            field?: string;
            order: "ASC" | "DESC";
        };
        /**
         * Single resource identifier
         */
        id: number;
    };
}

/**
 * Meter reads
 */
export type PathV1ReadGet<R extends Empty = Empty> = (req: RequestV1ReadGet & R) => Promise<ResponseV1ReadGet>;

export interface Config<R extends Empty = Empty, TAuthInfo extends OapiAuthInfo = OapiAuthInfo> extends OapiConfig<R> {
    paths: {
        "/.well-known/health-check": {
            /**
             * Health check endpoint
             */
            get: PathWellknownHealthcheckGet<R>;
        };
        "/.well-known/openapi.yaml": {
            /**
             * The open api spec for the service. OpenAPI v3.
             */
            get: PathWellknownOpenapiyamlGet<R>;
        };
        "/.well-known/components.yaml": {
            /**
             * Shared schemas for the open api spec. OpenAPI v3.
             */
            get: PathWellknownComponentsyamlGet<R>;
        };
        "/.well-known/levelisations.yaml": {
            /**
             * Schemas for Levelisation endpoints. OpenAPI v3.
             */
            get: PathWellknownLevelisationsyamlGet<R>;
        };
        "/.well-known/read-checks.yaml": {
            /**
             * Schemas for Read Checks endpoints. OpenAPI v3.
             */
            get: PathWellknownReadchecksyamlGet<R>;
        };
        "/.well-known/openapi.html": {
            /**
             * The open api spec for the service. OpenAPI v3.
             */
            get: PathWellknownOpenapihtmlGet<R>;
        };
        "/v1/session": {
            post: PathV1SessionPost<R>;
        };
        "/v1/comm-batches": {
            get: PathV1CommbatchesGet<R, TAuthInfo>;
            /**
             * Create new Comm Batch that will be processed and can be monitored responses
             *
             */
            post: PathV1CommbatchesPost<R, TAuthInfo>;
        };
        "/v1/comm-batches/{id}": {
            get: PathV1CommbatchesIdGet<R, TAuthInfo>;
        };
        "/v1/process/meter-reads-tolerance": {
            post: PathV1ProcessMeterreadstolerancePost<R, TAuthInfo>;
        };
        "/v1/read-checks": {
            /**
             * List of Meter Reads that have failed their tolernace checks and need to be reviewed
             */
            get: PathV1ReadchecksGet<R>;
            /**
             * Update Multiple Tolerance check details at once
             */
            put: PathV1ReadchecksPut<R>;
            /**
             * Update Tolerance check details
             */
            delete: PathV1ReadchecksDelete<R>;
        };
        "/v1/read-checks/{id}": {
            /**
             * Details on the meter read tolerance check
             */
            get: PathV1ReadchecksIdGet<R>;
            /**
             * Update Tolerance check details
             */
            put: PathV1ReadchecksIdPut<R>;
            /**
             * Update Tolerance check details
             */
            delete: PathV1ReadchecksIdDelete<R>;
        };
        "/v1/levelisations": {
            /**
             * List of Levelisation processes by quarters
             */
            get: PathV1LevelisationsGet<R>;
            /**
             * Create a new Levelisation
             */
            post: PathV1LevelisationsPost<R>;
        };
        "/v1/levelisations/{id}": {
            /**
             * Levelisation calculation for all accounts
             */
            get: PathV1LevelisationsIdGet<R>;
            /**
             * Update Levelisation
             */
            put: PathV1LevelisationsIdPut<R>;
        };
        "/v1/account-levelisations": {
            /**
             * List of Levelisation processes by quarters
             */
            get: PathV1AccountlevelisationsGet<R>;
            /**
             * Update Account Levelisations at once
             */
            put: PathV1AccountlevelisationsPut<R>;
        };
        "/v1/account-levelisations/{id}": {
            /**
             * Levelisation tariff for a single account
             */
            get: PathV1AccountlevelisationsIdGet<R>;
            /**
             * Update Account Levelisation
             */
            put: PathV1AccountlevelisationsIdPut<R>;
        };
        "/v1/payment-export": {
            /**
             * Cheque Payments
             */
            get: PathV1PaymentexportGet<R>;
        };
        "/v1/account": {
            /**
             * A list of fit and seg accounts
             */
            get: PathV1AccountGet<R>;
        };
        "/v1/account/{id}/reads": {
            /**
             * Account reads
             */
            get: PathV1AccountIdReadsGet<R>;
        };
        "/v1/account/{id}": {
            /**
             * Account reads
             */
            get: PathV1AccountIdGet<R>;
        };
        "/v1/account/{id}/contracts": {
            /**
             * Account reads
             */
            get: PathV1AccountIdContractsGet<R>;
        };
        "/v1/contact/{id}": {
            /**
             * Contacts
             */
            get: PathV1ContactIdGet<R>;
        };
        "/v1/payment": {
            /**
             * Contacts
             */
            get: PathV1PaymentGet<R>;
        };
        "/v1/installation": {
            /**
             * Installations
             */
            get: PathV1InstallationGet<R>;
        };
        "/v1/meter/{id}": {
            /**
             * Meter
             */
            get: PathV1MeterIdGet<R>;
        };
        "/v1/meter": {
            /**
             * Meters
             */
            get: PathV1MeterGet<R>;
        };
        "/v1/read": {
            /**
             * Meter reads
             */
            get: PathV1ReadGet<R>;
        };
    };
    security: {
        JWTSecurity: OapiSecurityResolver<R, TAuthInfo>;
        ProductIdentitySecurity: OapiSecurityResolver<R, TAuthInfo>;
    };
}
"
`;

exports[`Types Content Test statements.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, ResponseOapi } from "@laminar/laminar";

export const openApiTyped = <R extends Empty = Empty>(config: Config<R>): Promise<HttpListener<R>> => openApi(config);

export type AccountId = string;

export type AccountMeter = AccountMeterElec | AccountMeterGas;

export type AccountMeterElec = AccountMeterBase & {
    meterType: "elec";
    profileClassId: string;
    meterTimeswitchCode: string;
    lineLossFactorClassId: string;
    [key: string]: unknown;
};

export interface AccountMeterBase {
    tariffName: string;
    plan: string;
    address: string;
    postCode: string;
    mpxn: string;
    msn: string;
    startDate: string;
    endDate: string;
    [key: string]: unknown;
}

export type AccountMeterGas = AccountMeterBase & {
    meterType: "gas";
    ldz: string;
    [key: string]: unknown;
};

export interface HttpError {
    message?: string;
}

export type ResponseAccountsAccountIdMetersGet = ResponseOapi<AccountMeter[], 200, "application/json"> | ResponseOapi<HttpError, number, "application/json">;

/**
 * Get Meters, associated with an account, and its service start and end dates (SSD...SED)
 */
export interface RequestAccountsAccountIdMetersGet extends OapiContext {
    path: {
        accountId: AccountId;
    };
}

export type PathAccountsAccountIdMetersGet<R extends Empty = Empty> = (req: RequestAccountsAccountIdMetersGet & R) => Promise<ResponseAccountsAccountIdMetersGet>;

export interface Config<R extends Empty = Empty> extends OapiConfig<R> {
    paths: {
        "/accounts/{accountId}/meters": {
            get: PathAccountsAccountIdMetersGet<R>;
        };
    };
}
"
`;

exports[`Types Content Test uspto.yaml 1`] = `
"import { OapiContext, OapiConfig, Empty, HttpListener, openApi, ResponseOapi } from "@laminar/laminar";

import { Readable } from "stream";

export const openApiTyped = <R extends Empty = Empty>(config: Config<R>): Promise<HttpListener<R>> => openApi(config);

export interface dataSetList {
    total?: number;
    apis?: {
        /**
         * To be used as a dataset parameter value
         */
        apiKey?: string;
        /**
         * To be used as a version parameter value
         */
        apiVersionNumber?: string;
        /**
         * The URL describing the dataset's fields
         */
        apiUrl?: string;
        /**
         * A URL to the API console for each API
         */
        apiDocumentationUrl?: string;
        [key: string]: unknown;
    }[];
    [key: string]: unknown;
}

export type ResponseGet = ResponseOapi<dataSetList, 200, "application/json">;

export type PathGet<R extends Empty = Empty> = (req: OapiContext & R) => Promise<ResponseGet>;

export type ResponseDatasetVersionFieldsGet = ResponseOapi<string | Readable | Buffer, 200, "application/json"> | ResponseOapi<string | Readable | Buffer, 404, "application/json">;

/**
 * Provides the general information about the API and the list of fields that can be used to query the dataset.
 * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
 */
export interface RequestDatasetVersionFieldsGet extends OapiContext {
    path: {
        /**
         * Name of the dataset.
         */
        dataset: string;
        /**
         * Version of the dataset.
         */
        version: string;
    };
}

/**
 * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
 */
export type PathDatasetVersionFieldsGet<R extends Empty = Empty> = (req: RequestDatasetVersionFieldsGet & R) => Promise<ResponseDatasetVersionFieldsGet>;

export type ResponseDatasetVersionRecordsPost = ResponseOapi<any[], 200, "application/json"> | ResponseOapi<unknown, 404, string>;

/**
 * Provides search capability for the data set with the given search criteria.
 * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
 */
export interface RequestDatasetVersionRecordsPost extends OapiContext {
    path: {
        /**
         * Version of the dataset.
         */
        version: string;
        /**
         * Name of the dataset. In this case, the default value is oa_citations
         */
        dataset: string;
    };
    body?: {
        /**
         * Uses Lucene Query Syntax in the format of propertyName:value, propertyName:[num1 TO num2] and date range format: propertyName:[yyyyMMdd TO yyyyMMdd]. In the response please see the 'docs' element which has the list of record objects. Each record structure would consist of all the fields and their corresponding values.
         */
        criteria: string;
        /**
         * Starting record number. Default value is 0.
         */
        start: number;
        /**
         * Specify number of rows to be returned. If you run the search with default values, in the response you will see 'numFound' attribute which will tell the number of records available in the dataset.
         */
        rows: number;
        [key: string]: unknown;
    };
}

/**
 * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
 */
export type PathDatasetVersionRecordsPost<R extends Empty = Empty> = (req: RequestDatasetVersionRecordsPost & R) => Promise<ResponseDatasetVersionRecordsPost>;

export interface Config<R extends Empty = Empty> extends OapiConfig<R> {
    paths: {
        "/": {
            get: PathGet<R>;
        };
        "/{dataset}/{version}/fields": {
            /**
             * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
             */
            get: PathDatasetVersionFieldsGet<R>;
        };
        "/{dataset}/{version}/records": {
            /**
             * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
             */
            post: PathDatasetVersionRecordsPost<R>;
        };
    };
}
"
`;
