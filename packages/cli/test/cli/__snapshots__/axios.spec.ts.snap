// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Axios Content Test api-with-examples.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Simple API overview
 *
 * Version: 2.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * List API versions
     */
    "GET /": config => api.get(\`/\`, config),
    /**
     * Show API version details
     */
    "GET /v2": config => api.get(\`/v2\`, config),
    api: api
});

export interface AxiosOapiInstance {
    /**
     * List API versions
     */
    "GET /": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Show API version details
     */
    "GET /v2": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test api-with-examples.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Simple API overview
 *
 * Version: 2.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * List API versions
     */
    "GET /": config => api.get(\`/\`, config),
    /**
     * Show API version details
     */
    "GET /v2": config => api.get(\`/v2\`, config),
    api: api
});

export interface AxiosOapiInstance {
    /**
     * List API versions
     */
    "GET /": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Show API version details
     */
    "GET /v2": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test balance-service.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Swagger Balance Service
 *
 * Version: 0.1.0
 *
 * Description:
 * Balance Service Endpoint definitions.
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Health check endpoint
     * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
     */
    "GET /internal/status": config => api.get(\`/internal/status\`, config),
    /**
     * Returns application swagger definition
     */
    "GET /internal/swagger.yaml": config => api.get(\`/internal/swagger.yaml\`, config),
    /**
     * DEPRECATED: Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v2/accounts/{accountId}/balance": (accountId, config) => api.get<BalanceSummaryHttpResponse>(\`/api/v2/accounts/\${accountId}/balance\`, config),
    /**
     * DEPRECATED: Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v2/accounts/{accountId}/transactions": (accountId, config) => api.get<TransactionHistoryHttpResponseV2>(\`/api/v2/accounts/\${accountId}/transactions\`, config),
    /**
     * DEPRECATED: Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v2/accounts/{accountId}/adjust-balance": (accountId, data, config) => api.post<BalanceSummaryHttpResponse>(\`/api/v2/accounts/\${accountId}/adjust-balance\`, data, config),
    /**
     * Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v3/accounts/{accountId}/balance": (accountId, config) => api.get<BalanceSummaryHttpResponse>(\`/api/v3/accounts/\${accountId}/balance\`, config),
    /**
     * Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v3/accounts/{accountId}/transactions": (accountId, config) => api.get<TransactionHistoryHttpResponseV3>(\`/api/v3/accounts/\${accountId}/transactions\`, config),
    /**
     * Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v3/accounts/{accountId}/adjust-balance": (accountId, data, config) => api.post<BalanceSummaryHttpResponse>(\`/api/v3/accounts/\${accountId}/adjust-balance\`, data, config),
    api: api
});

export interface BalanceSummaryHttpResponse {
    balance?: number;
    /**
     * Last transaction date-time which updated the balance
     */
    effectiveAt?: string;
    /**
     * When balance service updated the balance
     */
    updatedAt?: string;
    [key: string]: unknown;
}

export interface TransactionHistoryHttpResponseV2 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | ChargeTransactionEntity)[];
    [key: string]: unknown;
}

export interface TransactionHistorySummary {
    /**
     * Number of search hits
     */
    totalSize?: number;
    [key: string]: unknown;
}

export interface GenericTransactionEntity {
    transactionType?: "TopUp" | "BalanceAdjustment";
    amount?: number;
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit', 'AppPayment'
     */
    cause?: string;
    [key: string]: unknown;
}

export interface ChargeTransactionEntity {
    transactionType?: "ElectricityUsageCharge" | "ElectricityStandingCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    [key: string]: unknown;
}

export interface GetApiV2AccountsAccountIdTransactions {
    headers?: {
        scenario?: string;
    };
    params?: {
        /**
         * Start date for the search period (inclusive)
         */
        fromDate: string;
        /**
         * End date for the search period (inclusive)
         */
        toDate: string;
        /**
         * Transaction type to search. If not provided every transaction will be fetched relevant for the account/period
         */
        transactionType?: ("TopUp" | "ElectricityUsageCharge" | "ElectricityStandingCharge" | "BalanceAdjustment")[];
    };
}

export interface AdjustBalanceRequest {
    transactionId?: string;
    /**
     * Signed amount to adjust the balance with
     */
    amount?: number;
    /**
     * Adjustment date-time
     */
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit'
     */
    cause?: string;
    [key: string]: unknown;
}

export interface TransactionHistoryHttpResponseV3 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | UsageChargeTransactionEntity | StandingChargeTransactionEntity)[];
    [key: string]: unknown;
}

export interface UsageChargeTransactionEntity {
    transactionType?: "ElectricityUsageCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    /**
     * Meter Serial Number
     */
    msn?: string;
    /**
     * The meter read that triggered the charge.
     */
    read?: number;
    /**
     * The consumption amount (kwH) corresponding to this charge.
     */
    consumption?: number;
    [key: string]: unknown;
}

export interface StandingChargeTransactionEntity {
    transactionType?: "ElectricityStandingCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    [key: string]: unknown;
}

export interface GetApiV3AccountsAccountIdTransactions {
    params?: {
        /**
         * Start date for the search period (inclusive)
         */
        fromDate: string;
        /**
         * End date for the search period (inclusive)
         */
        toDate: string;
        /**
         * Transaction type to search. If not provided every transaction will be fetched relevant for the account/period
         */
        transactionType?: ("TopUp" | "ElectricityUsageCharge" | "ElectricityStandingCharge" | "BalanceAdjustment")[];
    };
}

export interface AxiosOapiInstance {
    /**
     * Health check endpoint
     * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
     */
    "GET /internal/status": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Returns application swagger definition
     */
    "GET /internal/swagger.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * DEPRECATED: Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v2/accounts/{accountId}/balance": (accountId: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    /**
     * DEPRECATED: Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v2/accounts/{accountId}/transactions": (accountId: string, config?: AxiosRequestConfig & GetApiV2AccountsAccountIdTransactions) => Promise<AxiosResponse<TransactionHistoryHttpResponseV2>>;
    /**
     * DEPRECATED: Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v2/accounts/{accountId}/adjust-balance": (accountId: string, data: AdjustBalanceRequest, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    /**
     * Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v3/accounts/{accountId}/balance": (accountId: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    /**
     * Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v3/accounts/{accountId}/transactions": (accountId: string, config?: AxiosRequestConfig & GetApiV3AccountsAccountIdTransactions) => Promise<AxiosResponse<TransactionHistoryHttpResponseV3>>;
    /**
     * Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v3/accounts/{accountId}/adjust-balance": (accountId: string, data: AdjustBalanceRequest, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test balance-service.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Swagger Balance Service
 *
 * Version: 0.1.0
 *
 * Description:
 * Balance Service Endpoint definitions.
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Health check endpoint
     * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
     */
    "GET /internal/status": config => api.get(\`/internal/status\`, config),
    /**
     * Returns application swagger definition
     */
    "GET /internal/swagger.yaml": config => api.get(\`/internal/swagger.yaml\`, config),
    /**
     * DEPRECATED: Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v2/accounts/{accountId}/balance": (accountId, config) => api.get<BalanceSummaryHttpResponse>(\`/api/v2/accounts/\${accountId}/balance\`, config),
    /**
     * DEPRECATED: Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v2/accounts/{accountId}/transactions": (accountId, config) => api.get<TransactionHistoryHttpResponseV2>(\`/api/v2/accounts/\${accountId}/transactions\`, config),
    /**
     * DEPRECATED: Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v2/accounts/{accountId}/adjust-balance": (accountId, data, config) => api.post<BalanceSummaryHttpResponse>(\`/api/v2/accounts/\${accountId}/adjust-balance\`, data, config),
    /**
     * Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v3/accounts/{accountId}/balance": (accountId, config) => api.get<BalanceSummaryHttpResponse>(\`/api/v3/accounts/\${accountId}/balance\`, config),
    /**
     * Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v3/accounts/{accountId}/transactions": (accountId, config) => api.get<TransactionHistoryHttpResponseV3>(\`/api/v3/accounts/\${accountId}/transactions\`, config),
    /**
     * Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v3/accounts/{accountId}/adjust-balance": (accountId, data, config) => api.post<BalanceSummaryHttpResponse>(\`/api/v3/accounts/\${accountId}/adjust-balance\`, data, config),
    api: api
});

export interface BalanceSummaryHttpResponse {
    balance?: number;
    /**
     * Last transaction date-time which updated the balance
     */
    effectiveAt?: string;
    /**
     * When balance service updated the balance
     */
    updatedAt?: string;
    [key: string]: unknown;
}

export interface TransactionHistoryHttpResponseV2 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | ChargeTransactionEntity)[];
    [key: string]: unknown;
}

export interface TransactionHistorySummary {
    /**
     * Number of search hits
     */
    totalSize?: number;
    [key: string]: unknown;
}

export interface GenericTransactionEntity {
    transactionType?: "TopUp" | "BalanceAdjustment";
    amount?: number;
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit', 'AppPayment'
     */
    cause?: string;
    [key: string]: unknown;
}

export interface ChargeTransactionEntity {
    transactionType?: "ElectricityUsageCharge" | "ElectricityStandingCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    [key: string]: unknown;
}

export interface GetApiV2AccountsAccountIdTransactions {
    headers?: {
        scenario?: string;
    };
    params?: {
        /**
         * Start date for the search period (inclusive)
         */
        fromDate?: string;
        /**
         * End date for the search period (inclusive)
         */
        toDate?: string;
        /**
         * Transaction type to search. If not provided every transaction will be fetched relevant for the account/period
         */
        transactionType?: ("TopUp" | "ElectricityUsageCharge" | "ElectricityStandingCharge" | "BalanceAdjustment")[];
    };
}

export interface AdjustBalanceRequest {
    transactionId?: string;
    /**
     * Signed amount to adjust the balance with
     */
    amount?: number;
    /**
     * Adjustment date-time
     */
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit'
     */
    cause?: string;
    [key: string]: unknown;
}

export interface TransactionHistoryHttpResponseV3 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | UsageChargeTransactionEntity | StandingChargeTransactionEntity)[];
    [key: string]: unknown;
}

export interface UsageChargeTransactionEntity {
    transactionType?: "ElectricityUsageCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    /**
     * Meter Serial Number
     */
    msn?: string;
    /**
     * The meter read that triggered the charge.
     */
    read?: number;
    /**
     * The consumption amount (kwH) corresponding to this charge.
     */
    consumption?: number;
    [key: string]: unknown;
}

export interface StandingChargeTransactionEntity {
    transactionType?: "ElectricityStandingCharge";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: "Electricity" | "Gas";
    [key: string]: unknown;
}

export interface GetApiV3AccountsAccountIdTransactions {
    params?: {
        /**
         * Start date for the search period (inclusive)
         */
        fromDate: string;
        /**
         * End date for the search period (inclusive)
         */
        toDate: string;
        /**
         * Transaction type to search. If not provided every transaction will be fetched relevant for the account/period
         */
        transactionType?: ("TopUp" | "ElectricityUsageCharge" | "ElectricityStandingCharge" | "BalanceAdjustment")[];
    };
}

export interface AxiosOapiInstance {
    /**
     * Health check endpoint
     * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
     */
    "GET /internal/status": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Returns application swagger definition
     */
    "GET /internal/swagger.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * DEPRECATED: Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v2/accounts/{accountId}/balance": (accountId: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    /**
     * DEPRECATED: Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v2/accounts/{accountId}/transactions": (accountId: string, config?: AxiosRequestConfig & GetApiV2AccountsAccountIdTransactions) => Promise<AxiosResponse<TransactionHistoryHttpResponseV2>>;
    /**
     * DEPRECATED: Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v2/accounts/{accountId}/adjust-balance": (accountId: string, data: AdjustBalanceRequest, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    /**
     * Find Balance for the given accountId
     * Returns the balance
     */
    "GET /api/v3/accounts/{accountId}/balance": (accountId: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    /**
     * Find Transactions for the given accountId. Generic endpoint capable of returning with all the supported transaction types. See transactionType parameter!
     * Returns the transaction history
     */
    "GET /api/v3/accounts/{accountId}/transactions": (accountId: string, config?: AxiosRequestConfig & GetApiV3AccountsAccountIdTransactions) => Promise<AxiosResponse<TransactionHistoryHttpResponseV3>>;
    /**
     * Adjust balance for a given accountId
     * Returns with the adjusted balance
     */
    "POST /api/v3/accounts/{accountId}/adjust-balance": (accountId: string, data: AdjustBalanceRequest, config?: AxiosRequestConfig) => Promise<AxiosResponse<BalanceSummaryHttpResponse>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test cloudtasks.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Cloud Tasks API
 *
 * Version: v2
 *
 * Description:
 * Manages the execution of large numbers of distributed requests.
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Deletes a task.
     *
     * A task can be deleted if it is scheduled or dispatched. A task
     * cannot be deleted if it has executed successfully or permanently
     * failed.
     */
    "DELETE /v2/{+name}": (+name, config) => api.delete<Empty>(\`/v2/\${+name}\`, config),
    /**
     * Gets a task.
     */
    "GET /v2/{+name}": (+name, config) => api.get<Task>(\`/v2/\${+name}\`, config),
    /**
     * Updates a queue.
     *
     * This method creates the queue if it does not exist and updates
     * the queue if it does exist.
     *
     * Queues created with this method allow tasks to live for a maximum of 31
     * days. After a task is 31 days old, the task will be deleted regardless of whether
     * it was dispatched or not.
     *
     * WARNING: Using this method may have unintended side effects if you are
     * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
     * Read
     * [Overview of Queue Management and
     * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
     * this method.
     */
    "PATCH /v2/{+name}": (+name, data, config) => api.patch<Queue>(\`/v2/\${+name}\`, data, config),
    /**
     * Lists information about the supported locations for this service.
     */
    "GET /v2/{+name}/locations": (+name, config) => api.get<ListLocationsResponse>(\`/v2/\${+name}/locations\`, config),
    /**
     * Pauses the queue.
     *
     * If a queue is paused then the system will stop dispatching tasks
     * until the queue is resumed via
     * ResumeQueue. Tasks can still be added
     * when the queue is paused. A queue is paused if its
     * state is PAUSED.
     */
    "POST /v2/{+name}:pause": (+name, data, config) => api.post<Queue>(\`/v2/\${+name}:pause\`, data, config),
    /**
     * Purges a queue by deleting all of its tasks.
     *
     * All tasks created before this method is called are permanently deleted.
     *
     * Purge operations can take up to one minute to take effect. Tasks
     * might be dispatched before the purge takes effect. A purge is irreversible.
     */
    "POST /v2/{+name}:purge": (+name, data, config) => api.post<Queue>(\`/v2/\${+name}:purge\`, data, config),
    /**
     * Resume a queue.
     *
     * This method resumes a queue after it has been
     * PAUSED or
     * DISABLED. The state of a queue is stored
     * in the queue's state; after calling this method it
     * will be set to RUNNING.
     *
     * WARNING: Resuming many high-QPS queues at the same time can
     * lead to target overloading. If you are resuming high-QPS
     * queues, follow the 500/50/5 pattern described in
     * [Managing Cloud Tasks Scaling
     * Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
     */
    "POST /v2/{+name}:resume": (+name, data, config) => api.post<Queue>(\`/v2/\${+name}:resume\`, data, config),
    /**
     * Forces a task to run now.
     *
     * When this method is called, Cloud Tasks will dispatch the task, even if
     * the task is already running, the queue has reached its RateLimits or
     * is PAUSED.
     *
     * This command is meant to be used for manual debugging. For
     * example, RunTask can be used to retry a failed
     * task after a fix has been made or to manually force a task to be
     * dispatched now.
     *
     * The dispatched task is returned. That is, the task that is returned
     * contains the status after the task is dispatched but
     * before the task is received by its target.
     *
     * If Cloud Tasks receives a successful response from the task's
     * target, then the task will be deleted; otherwise the task's
     * schedule_time will be reset to the time that
     * RunTask was called plus the retry delay specified
     * in the queue's RetryConfig.
     *
     * RunTask returns
     * NOT_FOUND when it is called on a
     * task that has already succeeded or permanently failed.
     */
    "POST /v2/{+name}:run": (+name, data, config) => api.post<Task>(\`/v2/\${+name}:run\`, data, config),
    /**
     * Lists queues.
     *
     * Queues are returned in lexicographical order.
     */
    "GET /v2/{+parent}/queues": (+parent, config) => api.get<ListQueuesResponse>(\`/v2/\${+parent}/queues\`, config),
    /**
     * Creates a queue.
     *
     * Queues created with this method allow tasks to live for a maximum of 31
     * days. After a task is 31 days old, the task will be deleted regardless of whether
     * it was dispatched or not.
     *
     * WARNING: Using this method may have unintended side effects if you are
     * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
     * Read
     * [Overview of Queue Management and
     * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
     * this method.
     */
    "POST /v2/{+parent}/queues": (+parent, data, config) => api.post<Queue>(\`/v2/\${+parent}/queues\`, data, config),
    /**
     * Lists the tasks in a queue.
     *
     * By default, only the BASIC view is retrieved
     * due to performance considerations;
     * response_view controls the
     * subset of information which is returned.
     *
     * The tasks may be returned in any order. The ordering may change at any
     * time.
     */
    "GET /v2/{+parent}/tasks": (+parent, config) => api.get<ListTasksResponse>(\`/v2/\${+parent}/tasks\`, config),
    /**
     * Creates a task and adds it to a queue.
     *
     * Tasks cannot be updated after creation; there is no UpdateTask command.
     *
     * * The maximum task size is 100KB.
     */
    "POST /v2/{+parent}/tasks": (+parent, data, config) => api.post<Task>(\`/v2/\${+parent}/tasks\`, data, config),
    /**
     * Gets the access control policy for a Queue.
     * Returns an empty policy if the resource exists and does not have a policy
     * set.
     *
     * Authorization requires the following
     * [Google IAM](https://cloud.google.com/iam) permission on the specified
     * resource parent:
     *
     * * \`cloudtasks.queues.getIamPolicy\`
     */
    "POST /v2/{+resource}:getIamPolicy": (+resource, data, config) => api.post<Policy>(\`/v2/\${+resource}:getIamPolicy\`, data, config),
    /**
     * Sets the access control policy for a Queue. Replaces any existing
     * policy.
     *
     * Note: The Cloud Console does not check queue-level IAM permissions yet.
     * Project-level permissions are required to use the Cloud Console.
     *
     * Authorization requires the following
     * [Google IAM](https://cloud.google.com/iam) permission on the specified
     * resource parent:
     *
     * * \`cloudtasks.queues.setIamPolicy\`
     */
    "POST /v2/{+resource}:setIamPolicy": (+resource, data, config) => api.post<Policy>(\`/v2/\${+resource}:setIamPolicy\`, data, config),
    /**
     * Returns permissions that a caller has on a Queue.
     * If the resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building permission-aware
     * UIs and command-line tools, not for authorization checking. This operation
     * may "fail open" without warning.
     */
    "POST /v2/{+resource}:testIamPermissions": (+resource, data, config) => api.post<TestIamPermissionsResponse>(\`/v2/\${+resource}:testIamPermissions\`, data, config),
    api: api
});

export interface Empty {
    [key: string]: unknown;
}

export interface DeleteV2Name {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface Task {
    /**
     * App Engine HTTP request.
     *
     * The message defines the HTTP request that is sent to an App Engine app when
     * the task is dispatched.
     *
     * Using AppEngineHttpRequest requires
     * [\`appengine.applications.get\`](https://cloud.google.com/appengine/docs/admin-api/access-control)
     * Google IAM permission for the project
     * and the following scope:
     *
     * \`https://www.googleapis.com/auth/cloud-platform\`
     *
     * The task will be delivered to the App Engine app which belongs to the same
     * project as the queue. For more information, see
     * [How Requests are
     * Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
     * and how routing is affected by
     * [dispatch
     * files](https://cloud.google.com/appengine/docs/python/config/dispatchref).
     * Traffic is encrypted during transport and never leaves Google datacenters.
     * Because this traffic is carried over a communication mechanism internal to
     * Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS).
     * The request to the handler, however, will appear to have used the HTTP
     * protocol.
     *
     * The AppEngineRouting used to construct the URL that the task is
     * delivered to can be set at the queue-level or task-level:
     *
     * * If app_engine_routing_override is set on the
     *    queue, this value is used for all
     *    tasks in the queue, no matter what the setting is for the task-level
     *    app_engine_routing.
     *
     *
     * The \`url\` that the task will be sent to is:
     *
     * * \`url =\` host \`+\`
     *   relative_uri
     *
     * Tasks can be dispatched to secure app handlers, unsecure app handlers, and
     * URIs restricted with
     * [\`login:
     * admin\`](https://cloud.google.com/appengine/docs/standard/python/config/appref).
     * Because tasks are not run as any user, they cannot be dispatched to URIs
     * restricted with
     * [\`login:
     * required\`](https://cloud.google.com/appengine/docs/standard/python/config/appref)
     * Task dispatches also do not follow redirects.
     *
     * The task attempt has succeeded if the app's request handler returns an HTTP
     * response code in the range [\`200\` - \`299\`]. The task attempt has failed if
     * the app's handler returns a non-2xx response code or Cloud Tasks does
     * not receive response before the deadline. Failed
     * tasks will be retried according to the
     * retry configuration. \`503\` (Service Unavailable) is
     * considered an App Engine system error instead of an application error and
     * will cause Cloud Tasks' traffic congestion control to temporarily throttle
     * the queue's dispatches. Unlike other types of task targets, a \`429\` (Too Many
     * Requests) response from an app handler does not cause traffic congestion
     * control to throttle the queue.
     */
    appEngineHttpRequest?: AppEngineHttpRequest;
    /**
     * Output only. The time that the task was created.
     *
     * \`create_time\` will be truncated to the nearest second.
     */
    createTime?: string;
    /**
     * Output only. The number of attempts dispatched.
     *
     * This count includes attempts which have been dispatched but haven't
     * received a response.
     */
    dispatchCount?: number;
    /**
     * The deadline for requests sent to the worker. If the worker does not
     * respond by this deadline then the request is cancelled and the attempt
     * is marked as a \`DEADLINE_EXCEEDED\` failure. Cloud Tasks will retry the
     * task according to the RetryConfig.
     *
     * Note that when the request is cancelled, Cloud Tasks will stop listing for
     * the response, but whether the worker stops processing depends on the
     * worker. For example, if the worker is stuck, it may not react to cancelled
     * requests.
     *
     * The default and maximum values depend on the type of request:
     *
     *
     * * For App Engine tasks, 0 indicates that the
     *   request has the default deadline. The default deadline depends on the
     *   [scaling
     *   type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling)
     *   of the service: 10 minutes for standard apps with automatic scaling, 24
     *   hours for standard apps with manual and basic scaling, and 60 minutes for
     *   flex apps. If the request deadline is set, it must be in the interval [15
     *   seconds, 24 hours 15 seconds]. Regardless of the task's
     *   \`dispatch_deadline\`, the app handler will not run for longer than than
     *   the service's timeout. We recommend setting the \`dispatch_deadline\` to
     *   at most a few seconds more than the app handler's timeout. For more
     *   information see
     *   [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts).
     *
     * \`dispatch_deadline\` will be truncated to the nearest millisecond. The
     * deadline is an approximate deadline.
     */
    dispatchDeadline?: string;
    /**
     * The status of a task attempt.
     */
    firstAttempt?: Attempt;
    /**
     * The status of a task attempt.
     */
    lastAttempt?: Attempt;
    /**
     * Optionally caller-specified in CreateTask.
     *
     * The task name.
     *
     * The task name must have the following format:
     * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID\`
     *
     * * \`PROJECT_ID\` can contain letters ([A-Za-z]), numbers ([0-9]),
     *    hyphens (-), colons (:), or periods (.).
     *    For more information, see
     *    [Identifying
     *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
     * * \`LOCATION_ID\` is the canonical ID for the task's location.
     *    The list of available locations can be obtained by calling
     *    ListLocations.
     *    For more information, see https://cloud.google.com/about/locations/.
     * * \`QUEUE_ID\` can contain letters ([A-Za-z]), numbers ([0-9]), or
     *   hyphens (-). The maximum length is 100 characters.
     * * \`TASK_ID\` can contain only letters ([A-Za-z]), numbers ([0-9]),
     *   hyphens (-), or underscores (_). The maximum length is 500 characters.
     */
    name?: string;
    /**
     * Output only. The number of attempts which have received a response.
     */
    responseCount?: number;
    /**
     * The time when the task is scheduled to be attempted or retried.
     *
     * \`schedule_time\` will be truncated to the nearest microsecond.
     */
    scheduleTime?: string;
    /**
     * Output only. The view specifies which subset of the Task has
     * been returned.
     */
    view?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    [key: string]: unknown;
}

export interface AppEngineHttpRequest {
    /**
     * App Engine Routing.
     *
     * Defines routing characteristics specific to App Engine - service, version,
     * and instance.
     *
     * For more information about services, versions, and instances see
     * [An Overview of App
     * Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
     * [Microservices Architecture on Google App
     * Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
     * [App Engine Standard request
     * routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
     * and [App Engine Flex request
     * routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
     *
     * Using AppEngineRouting requires
     * [\`appengine.applications.get\`](https://cloud.google.com/appengine/docs/admin-api/access-control)
     * Google IAM permission for the project
     * and the following scope:
     *
     * \`https://www.googleapis.com/auth/cloud-platform\`
     */
    appEngineRouting?: AppEngineRouting;
    /**
     * HTTP request body.
     *
     * A request body is allowed only if the HTTP method is POST or PUT. It is
     * an error to set a body on a task with an incompatible HttpMethod.
     */
    body?: string;
    /**
     * HTTP request headers.
     *
     * This map contains the header field names and values.
     * Headers can be set when the
     * task is created.
     * Repeated headers are not supported but a header value can contain commas.
     *
     * Cloud Tasks sets some headers to default values:
     *
     * * \`User-Agent\`: By default, this header is
     *   \`"AppEngine-Google; (+http://code.google.com/appengine)"\`.
     *   This header can be modified, but Cloud Tasks will append
     *   \`"AppEngine-Google; (+http://code.google.com/appengine)"\` to the
     *   modified \`User-Agent\`.
     *
     * If the task has a body, Cloud
     * Tasks sets the following headers:
     *
     * * \`Content-Type\`: By default, the \`Content-Type\` header is set to
     *   \`"application/octet-stream"\`. The default can be overridden by explicitly
     *   setting \`Content-Type\` to a particular media type when the
     *   task is created.
     *   For example, \`Content-Type\` can be set to \`"application/json"\`.
     * * \`Content-Length\`: This is computed by Cloud Tasks. This value is
     *   output only.   It cannot be changed.
     *
     * The headers below cannot be set or overridden:
     *
     * * \`Host\`
     * * \`X-Google-*\`
     * * \`X-AppEngine-*\`
     *
     * In addition, Cloud Tasks sets some headers when the task is dispatched,
     * such as headers containing information about the task; see
     * [request
     * headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers).
     * These headers are set only when the task is dispatched, so they are not
     * visible when the task is returned in a Cloud Tasks response.
     *
     * Although there is no specific limit for the maximum number of headers or
     * the size, there is a limit on the maximum size of the Task. For more
     * information, see the CreateTask documentation.
     */
    headers?: any;
    /**
     * The HTTP method to use for the request. The default is POST.
     *
     * The app's request handler for the task's target URL must be able to handle
     * HTTP requests with this http_method, otherwise the task attempt will fail
     * with error code 405 (Method Not Allowed). See
     * [Writing a push task request
     * handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler)
     * and the documentation for the request handlers in the language your app is
     * written in e.g.
     * [Python Request
     * Handler](https://cloud.google.com/appengine/docs/python/tools/webapp/requesthandlerclass).
     */
    httpMethod?: "HTTP_METHOD_UNSPECIFIED" | "POST" | "GET" | "HEAD" | "PUT" | "DELETE" | "PATCH" | "OPTIONS";
    /**
     * The relative URI.
     *
     * The relative URI must begin with "/" and must be a valid HTTP relative URI.
     * It can contain a path and query string arguments.
     * If the relative URI is empty, then the root path "/" will be used.
     * No spaces are allowed, and the maximum length allowed is 2083 characters.
     */
    relativeUri?: string;
    [key: string]: unknown;
}

export interface AppEngineRouting {
    /**
     * Output only. The host that the task is sent to.
     *
     * The host is constructed from the domain name of the app associated with
     * the queue's project ID (for example <app-id>.appspot.com), and the
     * service, version,
     * and instance. Tasks which were created using
     * the App Engine SDK might have a custom domain name.
     *
     * For more information, see
     * [How Requests are
     * Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
     */
    host?: string;
    /**
     * App instance.
     *
     * By default, the task is sent to an instance which is available when
     * the task is attempted.
     *
     * Requests can only be sent to a specific instance if
     * [manual scaling is used in App Engine
     * Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
     * App Engine Flex does not support instances. For more information, see
     * [App Engine Standard request
     * routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
     * and [App Engine Flex request
     * routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
     */
    instance?: string;
    /**
     * App service.
     *
     * By default, the task is sent to the service which is the default
     * service when the task is attempted.
     *
     * For some queues or tasks which were created using the App Engine
     * Task Queue API, host is not parsable
     * into service,
     * version, and
     * instance. For example, some tasks
     * which were created using the App Engine SDK use a custom domain
     * name; custom domains are not parsed by Cloud Tasks. If
     * host is not parsable, then
     * service,
     * version, and
     * instance are the empty string.
     */
    service?: string;
    /**
     * App version.
     *
     * By default, the task is sent to the version which is the default
     * version when the task is attempted.
     *
     * For some queues or tasks which were created using the App Engine
     * Task Queue API, host is not parsable
     * into service,
     * version, and
     * instance. For example, some tasks
     * which were created using the App Engine SDK use a custom domain
     * name; custom domains are not parsed by Cloud Tasks. If
     * host is not parsable, then
     * service,
     * version, and
     * instance are the empty string.
     */
    version?: string;
    [key: string]: unknown;
}

export interface Attempt {
    /**
     * Output only. The time that this attempt was dispatched.
     *
     * \`dispatch_time\` will be truncated to the nearest microsecond.
     */
    dispatchTime?: string;
    /**
     * The \`Status\` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each \`Status\` message contains
     * three pieces of data: error code, error message, and error details.
     *
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    responseStatus?: Status;
    /**
     * Output only. The time that this attempt response was received.
     *
     * \`response_time\` will be truncated to the nearest microsecond.
     */
    responseTime?: string;
    /**
     * Output only. The time that this attempt was scheduled.
     *
     * \`schedule_time\` will be truncated to the nearest microsecond.
     */
    scheduleTime?: string;
    [key: string]: unknown;
}

export interface Status {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code?: number;
    /**
     * A list of messages that carry the error details.  There is a common set of
     * message types for APIs to use.
     */
    details?: any[];
    /**
     * A developer-facing error message, which should be in English. Any
     * user-facing error message should be localized and sent in the
     * google.rpc.Status.details field, or localized by the client.
     */
    message?: string;
    [key: string]: unknown;
}

export interface GetV2Name {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
        /**
         * The response_view specifies which subset of the Task will be
         * returned.
         *
         * By default response_view is BASIC; not all
         * information is retrieved by default because some data, such as
         * payloads, might be desirable to return only when needed because
         * of its large size or because of the sensitivity of data that it
         * contains.
         *
         * Authorization for FULL requires
         * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
         * permission on the Task resource.
         */
        responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    };
}

export interface Queue {
    /**
     * App Engine Routing.
     *
     * Defines routing characteristics specific to App Engine - service, version,
     * and instance.
     *
     * For more information about services, versions, and instances see
     * [An Overview of App
     * Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
     * [Microservices Architecture on Google App
     * Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
     * [App Engine Standard request
     * routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
     * and [App Engine Flex request
     * routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
     *
     * Using AppEngineRouting requires
     * [\`appengine.applications.get\`](https://cloud.google.com/appengine/docs/admin-api/access-control)
     * Google IAM permission for the project
     * and the following scope:
     *
     * \`https://www.googleapis.com/auth/cloud-platform\`
     */
    appEngineRoutingOverride?: AppEngineRouting;
    /**
     * Caller-specified and required in CreateQueue,
     * after which it becomes output only.
     *
     * The queue name.
     *
     * The queue name must have the following format:
     * \`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID\`
     *
     * * \`PROJECT_ID\` can contain letters ([A-Za-z]), numbers ([0-9]),
     *    hyphens (-), colons (:), or periods (.).
     *    For more information, see
     *    [Identifying
     *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
     * * \`LOCATION_ID\` is the canonical ID for the queue's location.
     *    The list of available locations can be obtained by calling
     *    ListLocations.
     *    For more information, see https://cloud.google.com/about/locations/.
     * * \`QUEUE_ID\` can contain letters ([A-Za-z]), numbers ([0-9]), or
     *   hyphens (-). The maximum length is 100 characters.
     */
    name?: string;
    /**
     * Output only. The last time this queue was purged.
     *
     * All tasks that were created before this time
     * were purged.
     *
     * A queue can be purged using PurgeQueue, the
     * [App Engine Task Queue SDK, or the Cloud
     * Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue).
     *
     * Purge time will be truncated to the nearest microsecond. Purge
     * time will be unset if the queue has never been purged.
     */
    purgeTime?: string;
    /**
     * Rate limits.
     *
     * This message determines the maximum rate that tasks can be dispatched by a
     * queue, regardless of whether the dispatch is a first task attempt or a retry.
     *
     * Note: The debugging command, RunTask, will run a task
     * even if the queue has reached its RateLimits.
     */
    rateLimits?: RateLimits;
    /**
     * Retry config.
     *
     * These settings determine when a failed task attempt is retried.
     */
    retryConfig?: RetryConfig;
    /**
     * Output only. The state of the queue.
     *
     * \`state\` can only be changed by called
     * PauseQueue,
     * ResumeQueue, or uploading
     * [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref).
     * UpdateQueue cannot be used to change \`state\`.
     */
    state?: "STATE_UNSPECIFIED" | "RUNNING" | "PAUSED" | "DISABLED";
    [key: string]: unknown;
}

export interface RateLimits {
    /**
     * Output only. The max burst size.
     *
     * Max burst size limits how fast tasks in queue are processed when
     * many tasks are in the queue and the rate is high. This field
     * allows the queue to have a high rate so processing starts shortly
     * after a task is enqueued, but still limits resource usage when
     * many tasks are enqueued in a short period of time.
     *
     * The [token bucket](https://wikipedia.org/wiki/Token_Bucket)
     * algorithm is used to control the rate of task dispatches. Each
     * queue has a token bucket that holds tokens, up to the maximum
     * specified by \`max_burst_size\`. Each time a task is dispatched, a
     * token is removed from the bucket. Tasks will be dispatched until
     * the queue's bucket runs out of tokens. The bucket will be
     * continuously refilled with new tokens based on
     * max_dispatches_per_second.
     *
     * Cloud Tasks will pick the value of \`max_burst_size\` based on the
     * value of
     * max_dispatches_per_second.
     *
     * For queues that were created or updated using
     * \`queue.yaml/xml\`, \`max_burst_size\` is equal to
     * [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size).
     * Since \`max_burst_size\` is output only, if
     * UpdateQueue is called on a queue
     * created by \`queue.yaml/xml\`, \`max_burst_size\` will be reset based
     * on the value of
     * max_dispatches_per_second,
     * regardless of whether
     * max_dispatches_per_second
     * is updated.
     *
     */
    maxBurstSize?: number;
    /**
     * The maximum number of concurrent tasks that Cloud Tasks allows
     * to be dispatched for this queue. After this threshold has been
     * reached, Cloud Tasks stops dispatching tasks until the number of
     * concurrent requests decreases.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * The maximum allowed value is 5,000.
     *
     *
     * This field has the same meaning as
     * [max_concurrent_requests in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
     */
    maxConcurrentDispatches?: number;
    /**
     * The maximum rate at which tasks are dispatched from this queue.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     * * The maximum allowed value is 500.
     *
     *
     * This field has the same meaning as
     * [rate in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
     */
    maxDispatchesPerSecond?: number;
    [key: string]: unknown;
}

export interface RetryConfig {
    /**
     * Number of attempts per task.
     *
     * Cloud Tasks will attempt the task \`max_attempts\` times (that is, if the
     * first attempt fails, then there will be \`max_attempts - 1\` retries). Must
     * be >= -1.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     * -1 indicates unlimited attempts.
     *
     * This field has the same meaning as
     * [task_retry_limit in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxAttempts?: number;
    /**
     * A task will be scheduled for retry between
     * min_backoff and
     * max_backoff duration after it fails,
     * if the queue's RetryConfig specifies that the task should be
     * retried.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * \`max_backoff\` will be truncated to the nearest second.
     *
     * This field has the same meaning as
     * [max_backoff_seconds in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxBackoff?: string;
    /**
     * The time between retries will double \`max_doublings\` times.
     *
     * A task's retry interval starts at
     * min_backoff, then doubles
     * \`max_doublings\` times, then increases linearly, and finally
     * retries retries at intervals of
     * max_backoff up to
     * max_attempts times.
     *
     * For example, if min_backoff is 10s,
     * max_backoff is 300s, and
     * \`max_doublings\` is 3, then the a task will first be retried in
     * 10s. The retry interval will double three times, and then
     * increase linearly by 2^3 * 10s.  Finally, the task will retry at
     * intervals of max_backoff until the
     * task has been attempted max_attempts
     * times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s,
     * 240s, 300s, 300s, ....
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * This field has the same meaning as
     * [max_doublings in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxDoublings?: number;
    /**
     * If positive, \`max_retry_duration\` specifies the time limit for
     * retrying a failed task, measured from when the task was first
     * attempted. Once \`max_retry_duration\` time has passed *and* the
     * task has been attempted max_attempts
     * times, no further attempts will be made and the task will be
     * deleted.
     *
     * If zero, then the task age is unlimited.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * \`max_retry_duration\` will be truncated to the nearest second.
     *
     * This field has the same meaning as
     * [task_age_limit in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    maxRetryDuration?: string;
    /**
     * A task will be scheduled for retry between
     * min_backoff and
     * max_backoff duration after it fails,
     * if the queue's RetryConfig specifies that the task should be
     * retried.
     *
     * If unspecified when the queue is created, Cloud Tasks will pick the
     * default.
     *
     *
     * \`min_backoff\` will be truncated to the nearest second.
     *
     * This field has the same meaning as
     * [min_backoff_seconds in
     * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
     */
    minBackoff?: string;
    [key: string]: unknown;
}

export interface PatchV2Name {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
        /**
         * A mask used to specify which fields of the queue are being updated.
         *
         * If empty, then all fields will be updated.
         */
        updateMask?: string;
    };
}

export interface ListLocationsResponse {
    /**
     * A list of locations that matches the specified filter in the request.
     */
    locations?: Location[];
    /**
     * The standard List next-page token.
     */
    nextPageToken?: string;
    [key: string]: unknown;
}

export interface Location {
    /**
     * The friendly name for this location, typically a nearby city name.
     * For example, "Tokyo".
     */
    displayName?: string;
    /**
     * Cross-service attributes for the location. For example
     *
     *     {"cloud.googleapis.com/region": "us-east1"}
     */
    labels?: any;
    /**
     * The canonical id for this location. For example: \`"us-east1"\`.
     */
    locationId?: string;
    /**
     * Service-specific metadata. For example the available capacity at the given
     * location.
     */
    metadata?: any;
    /**
     * Resource name for the location, which may vary between implementations.
     * For example: \`"projects/example-project/locations/us-east1"\`
     */
    name?: string;
    [key: string]: unknown;
}

export interface GetV2NameLocations {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
        /**
         * The standard list filter.
         */
        filter?: string;
        /**
         * The standard list page size.
         */
        pageSize?: number;
        /**
         * The standard list page token.
         */
        pageToken?: string;
    };
}

export interface PauseQueueRequest {
    [key: string]: unknown;
}

export interface PostV2Namepause {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface PurgeQueueRequest {
    [key: string]: unknown;
}

export interface PostV2Namepurge {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface ResumeQueueRequest {
    [key: string]: unknown;
}

export interface PostV2Nameresume {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface RunTaskRequest {
    /**
     * The response_view specifies which subset of the Task will be
     * returned.
     *
     * By default response_view is BASIC; not all
     * information is retrieved by default because some data, such as
     * payloads, might be desirable to return only when needed because
     * of its large size or because of the sensitivity of data that it
     * contains.
     *
     * Authorization for FULL requires
     * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
     * permission on the Task resource.
     */
    responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    [key: string]: unknown;
}

export interface PostV2Namerun {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface ListQueuesResponse {
    /**
     * A token to retrieve next page of results.
     *
     * To return the next page of results, call
     * ListQueues with this value as the
     * page_token.
     *
     * If the next_page_token is empty, there are no more results.
     *
     * The page token is valid for only 2 hours.
     */
    nextPageToken?: string;
    /**
     * The list of queues.
     */
    queues?: Queue[];
    [key: string]: unknown;
}

export interface GetV2ParentQueues {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
        /**
         * \`filter\` can be used to specify a subset of queues. Any Queue
         * field can be used as a filter and several operators as supported.
         * For example: \`<=, <, >=, >, !=, =, :\`. The filter syntax is the same as
         * described in
         * [Stackdriver's Advanced Logs
         * Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
         *
         * Sample filter "state: PAUSED".
         *
         * Note that using filters might cause fewer queues than the
         * requested page_size to be returned.
         */
        filter?: string;
        /**
         * Requested page size.
         *
         * The maximum page size is 9800. If unspecified, the page size will
         * be the maximum. Fewer queues than requested might be returned,
         * even if more queues exist; use the
         * next_page_token in the
         * response to determine if more queues exist.
         */
        pageSize?: number;
        /**
         * A token identifying the page of results to return.
         *
         * To request the first page results, page_token must be empty. To
         * request the next page of results, page_token must be the value of
         * next_page_token returned
         * from the previous call to ListQueues
         * method. It is an error to switch the value of the
         * filter while iterating through pages.
         */
        pageToken?: string;
    };
}

export interface PostV2ParentQueues {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface ListTasksResponse {
    /**
     * A token to retrieve next page of results.
     *
     * To return the next page of results, call
     * ListTasks with this value as the
     * page_token.
     *
     * If the next_page_token is empty, there are no more results.
     */
    nextPageToken?: string;
    /**
     * The list of tasks.
     */
    tasks?: Task[];
    [key: string]: unknown;
}

export interface GetV2ParentTasks {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
        /**
         * Maximum page size.
         *
         * Fewer tasks than requested might be returned, even if more tasks exist; use
         * next_page_token in the response to
         * determine if more tasks exist.
         *
         * The maximum page size is 1000. If unspecified, the page size will be the
         * maximum.
         */
        pageSize?: number;
        /**
         * A token identifying the page of results to return.
         *
         * To request the first page results, page_token must be empty. To
         * request the next page of results, page_token must be the value of
         * next_page_token returned
         * from the previous call to ListTasks
         * method.
         *
         * The page token is valid for only 2 hours.
         */
        pageToken?: string;
        /**
         * The response_view specifies which subset of the Task will be
         * returned.
         *
         * By default response_view is BASIC; not all
         * information is retrieved by default because some data, such as
         * payloads, might be desirable to return only when needed because
         * of its large size or because of the sensitivity of data that it
         * contains.
         *
         * Authorization for FULL requires
         * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
         * permission on the Task resource.
         */
        responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    };
}

export interface CreateTaskRequest {
    /**
     * The response_view specifies which subset of the Task will be
     * returned.
     *
     * By default response_view is BASIC; not all
     * information is retrieved by default because some data, such as
     * payloads, might be desirable to return only when needed because
     * of its large size or because of the sensitivity of data that it
     * contains.
     *
     * Authorization for FULL requires
     * \`cloudtasks.tasks.fullView\` [Google IAM](https://cloud.google.com/iam/)
     * permission on the Task resource.
     */
    responseView?: "VIEW_UNSPECIFIED" | "BASIC" | "FULL";
    /**
     * A unit of scheduled work.
     */
    task?: Task;
    [key: string]: unknown;
}

export interface PostV2ParentTasks {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface GetIamPolicyRequest {
    /**
     * Encapsulates settings provided to GetIamPolicy.
     */
    options?: GetPolicyOptions;
    [key: string]: unknown;
}

export interface GetPolicyOptions {
    /**
     * Optional. The policy format version to be returned.
     * Acceptable values are 0, 1, and 3.
     * If the value is 0, or the field is omitted, policy format version 1 will be
     * returned.
     */
    requestedPolicyVersion?: number;
    [key: string]: unknown;
}

export interface Policy {
    /**
     * Associates a list of \`members\` to a \`role\`.
     * \`bindings\` with no members will result in an error.
     */
    bindings?: Binding[];
    /**
     * \`etag\` is used for optimistic concurrency control as a way to help
     * prevent simultaneous updates of a policy from overwriting each other.
     * It is strongly suggested that systems make use of the \`etag\` in the
     * read-modify-write cycle to perform policy updates in order to avoid race
     * conditions: An \`etag\` is returned in the response to \`getIamPolicy\`, and
     * systems are expected to put that etag in the request to \`setIamPolicy\` to
     * ensure that their change will be applied to the same version of the policy.
     *
     * If no \`etag\` is provided in the call to \`setIamPolicy\`, then the existing
     * policy is overwritten.
     */
    etag?: string;
    /**
     * Deprecated.
     */
    version?: number;
    [key: string]: unknown;
}

export interface Binding {
    /**
     * Represents an expression text. Example:
     *
     *     title: "User account presence"
     *     description: "Determines whether the request has a user account"
     *     expression: "size(request.user) > 0"
     */
    condition?: Expr;
    /**
     * Specifies the identities requesting access for a Cloud Platform resource.
     * \`members\` can have the following values:
     *
     * * \`allUsers\`: A special identifier that represents anyone who is
     *    on the internet; with or without a Google account.
     *
     * * \`allAuthenticatedUsers\`: A special identifier that represents anyone
     *    who is authenticated with a Google account or a service account.
     *
     * * \`user:{emailid}\`: An email address that represents a specific Google
     *    account. For example, \`alice@example.com\` .
     *
     *
     * * \`serviceAccount:{emailid}\`: An email address that represents a service
     *    account. For example, \`my-other-app@appspot.gserviceaccount.com\`.
     *
     * * \`group:{emailid}\`: An email address that represents a Google group.
     *    For example, \`admins@example.com\`.
     *
     *
     * * \`domain:{domain}\`: The G Suite domain (primary) that represents all the
     *    users of that domain. For example, \`google.com\` or \`example.com\`.
     */
    members?: string[];
    /**
     * Role that is assigned to \`members\`.
     * For example, \`roles/viewer\`, \`roles/editor\`, or \`roles/owner\`.
     */
    role?: string;
    [key: string]: unknown;
}

export interface Expr {
    /**
     * An optional description of the expression. This is a longer text which
     * describes the expression, e.g. when hovered over it in a UI.
     */
    description?: string;
    /**
     * Textual representation of an expression in
     * Common Expression Language syntax.
     *
     * The application context of the containing message determines which
     * well-known feature set of CEL is supported.
     */
    expression?: string;
    /**
     * An optional string indicating the location of the expression for error
     * reporting, e.g. a file name and a position in the file.
     */
    location?: string;
    /**
     * An optional title for the expression, i.e. a short string describing
     * its purpose. This can be used e.g. in UIs which allow to enter the
     * expression.
     */
    title?: string;
    [key: string]: unknown;
}

export interface PostV2ResourcegetIamPolicy {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface SetIamPolicyRequest {
    /**
     * Defines an Identity and Access Management (IAM) policy. It is used to
     * specify access control policies for Cloud Platform resources.
     *
     *
     * A \`Policy\` consists of a list of \`bindings\`. A \`binding\` binds a list of
     * \`members\` to a \`role\`, where the members can be user accounts, Google groups,
     * Google domains, and service accounts. A \`role\` is a named list of permissions
     * defined by IAM.
     *
     * **JSON Example**
     *
     *     {
     *       "bindings": [
     *         {
     *           "role": "roles/owner",
     *           "members": [
     *             "user:mike@example.com",
     *             "group:admins@example.com",
     *             "domain:google.com",
     *             "serviceAccount:my-other-app@appspot.gserviceaccount.com"
     *           ]
     *         },
     *         {
     *           "role": "roles/viewer",
     *           "members": ["user:sean@example.com"]
     *         }
     *       ]
     *     }
     *
     * **YAML Example**
     *
     *     bindings:
     *     - members:
     *       - user:mike@example.com
     *       - group:admins@example.com
     *       - domain:google.com
     *       - serviceAccount:my-other-app@appspot.gserviceaccount.com
     *       role: roles/owner
     *     - members:
     *       - user:sean@example.com
     *       role: roles/viewer
     *
     *
     * For a description of IAM and its features, see the
     * [IAM developer's guide](https://cloud.google.com/iam/docs).
     */
    policy?: Policy;
    [key: string]: unknown;
}

export interface PostV2ResourcesetIamPolicy {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface TestIamPermissionsRequest {
    /**
     * The set of permissions to check for the \`resource\`. Permissions with
     * wildcards (such as '*' or 'storage.*') are not allowed. For more
     * information see
     * [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     */
    permissions?: string[];
    [key: string]: unknown;
}

export interface TestIamPermissionsResponse {
    /**
     * A subset of \`TestPermissionsRequest.permissions\` that the caller is
     * allowed.
     */
    permissions?: string[];
    [key: string]: unknown;
}

export interface PostV2ResourcetestIamPermissions {
    params?: {
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * V1 error format.
         */
        "$.xgafv"?: "1" | "2";
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Data format for response.
         */
        alt?: "json" | "media" | "proto";
    };
}

export interface AxiosOapiInstance {
    /**
     * Deletes a task.
     *
     * A task can be deleted if it is scheduled or dispatched. A task
     * cannot be deleted if it has executed successfully or permanently
     * failed.
     */
    "DELETE /v2/{+name}": (+name: string, config?: AxiosRequestConfig & DeleteV2Name) => Promise<AxiosResponse<Empty>>;
    /**
     * Gets a task.
     */
    "GET /v2/{+name}": (+name: string, config?: AxiosRequestConfig & GetV2Name) => Promise<AxiosResponse<Task>>;
    /**
     * Updates a queue.
     *
     * This method creates the queue if it does not exist and updates
     * the queue if it does exist.
     *
     * Queues created with this method allow tasks to live for a maximum of 31
     * days. After a task is 31 days old, the task will be deleted regardless of whether
     * it was dispatched or not.
     *
     * WARNING: Using this method may have unintended side effects if you are
     * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
     * Read
     * [Overview of Queue Management and
     * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
     * this method.
     */
    "PATCH /v2/{+name}": (+name: string, data?: Queue, config?: AxiosRequestConfig & PatchV2Name) => Promise<AxiosResponse<Queue>>;
    /**
     * Lists information about the supported locations for this service.
     */
    "GET /v2/{+name}/locations": (+name: string, config?: AxiosRequestConfig & GetV2NameLocations) => Promise<AxiosResponse<ListLocationsResponse>>;
    /**
     * Pauses the queue.
     *
     * If a queue is paused then the system will stop dispatching tasks
     * until the queue is resumed via
     * ResumeQueue. Tasks can still be added
     * when the queue is paused. A queue is paused if its
     * state is PAUSED.
     */
    "POST /v2/{+name}:pause": (+name: string, data?: PauseQueueRequest, config?: AxiosRequestConfig & PostV2Namepause) => Promise<AxiosResponse<Queue>>;
    /**
     * Purges a queue by deleting all of its tasks.
     *
     * All tasks created before this method is called are permanently deleted.
     *
     * Purge operations can take up to one minute to take effect. Tasks
     * might be dispatched before the purge takes effect. A purge is irreversible.
     */
    "POST /v2/{+name}:purge": (+name: string, data?: PurgeQueueRequest, config?: AxiosRequestConfig & PostV2Namepurge) => Promise<AxiosResponse<Queue>>;
    /**
     * Resume a queue.
     *
     * This method resumes a queue after it has been
     * PAUSED or
     * DISABLED. The state of a queue is stored
     * in the queue's state; after calling this method it
     * will be set to RUNNING.
     *
     * WARNING: Resuming many high-QPS queues at the same time can
     * lead to target overloading. If you are resuming high-QPS
     * queues, follow the 500/50/5 pattern described in
     * [Managing Cloud Tasks Scaling
     * Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
     */
    "POST /v2/{+name}:resume": (+name: string, data?: ResumeQueueRequest, config?: AxiosRequestConfig & PostV2Nameresume) => Promise<AxiosResponse<Queue>>;
    /**
     * Forces a task to run now.
     *
     * When this method is called, Cloud Tasks will dispatch the task, even if
     * the task is already running, the queue has reached its RateLimits or
     * is PAUSED.
     *
     * This command is meant to be used for manual debugging. For
     * example, RunTask can be used to retry a failed
     * task after a fix has been made or to manually force a task to be
     * dispatched now.
     *
     * The dispatched task is returned. That is, the task that is returned
     * contains the status after the task is dispatched but
     * before the task is received by its target.
     *
     * If Cloud Tasks receives a successful response from the task's
     * target, then the task will be deleted; otherwise the task's
     * schedule_time will be reset to the time that
     * RunTask was called plus the retry delay specified
     * in the queue's RetryConfig.
     *
     * RunTask returns
     * NOT_FOUND when it is called on a
     * task that has already succeeded or permanently failed.
     */
    "POST /v2/{+name}:run": (+name: string, data?: RunTaskRequest, config?: AxiosRequestConfig & PostV2Namerun) => Promise<AxiosResponse<Task>>;
    /**
     * Lists queues.
     *
     * Queues are returned in lexicographical order.
     */
    "GET /v2/{+parent}/queues": (+parent: string, config?: AxiosRequestConfig & GetV2ParentQueues) => Promise<AxiosResponse<ListQueuesResponse>>;
    /**
     * Creates a queue.
     *
     * Queues created with this method allow tasks to live for a maximum of 31
     * days. After a task is 31 days old, the task will be deleted regardless of whether
     * it was dispatched or not.
     *
     * WARNING: Using this method may have unintended side effects if you are
     * using an App Engine \`queue.yaml\` or \`queue.xml\` file to manage your queues.
     * Read
     * [Overview of Queue Management and
     * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
     * this method.
     */
    "POST /v2/{+parent}/queues": (+parent: string, data?: Queue, config?: AxiosRequestConfig & PostV2ParentQueues) => Promise<AxiosResponse<Queue>>;
    /**
     * Lists the tasks in a queue.
     *
     * By default, only the BASIC view is retrieved
     * due to performance considerations;
     * response_view controls the
     * subset of information which is returned.
     *
     * The tasks may be returned in any order. The ordering may change at any
     * time.
     */
    "GET /v2/{+parent}/tasks": (+parent: string, config?: AxiosRequestConfig & GetV2ParentTasks) => Promise<AxiosResponse<ListTasksResponse>>;
    /**
     * Creates a task and adds it to a queue.
     *
     * Tasks cannot be updated after creation; there is no UpdateTask command.
     *
     * * The maximum task size is 100KB.
     */
    "POST /v2/{+parent}/tasks": (+parent: string, data?: CreateTaskRequest, config?: AxiosRequestConfig & PostV2ParentTasks) => Promise<AxiosResponse<Task>>;
    /**
     * Gets the access control policy for a Queue.
     * Returns an empty policy if the resource exists and does not have a policy
     * set.
     *
     * Authorization requires the following
     * [Google IAM](https://cloud.google.com/iam) permission on the specified
     * resource parent:
     *
     * * \`cloudtasks.queues.getIamPolicy\`
     */
    "POST /v2/{+resource}:getIamPolicy": (+resource: string, data?: GetIamPolicyRequest, config?: AxiosRequestConfig & PostV2ResourcegetIamPolicy) => Promise<AxiosResponse<Policy>>;
    /**
     * Sets the access control policy for a Queue. Replaces any existing
     * policy.
     *
     * Note: The Cloud Console does not check queue-level IAM permissions yet.
     * Project-level permissions are required to use the Cloud Console.
     *
     * Authorization requires the following
     * [Google IAM](https://cloud.google.com/iam) permission on the specified
     * resource parent:
     *
     * * \`cloudtasks.queues.setIamPolicy\`
     */
    "POST /v2/{+resource}:setIamPolicy": (+resource: string, data?: SetIamPolicyRequest, config?: AxiosRequestConfig & PostV2ResourcesetIamPolicy) => Promise<AxiosResponse<Policy>>;
    /**
     * Returns permissions that a caller has on a Queue.
     * If the resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building permission-aware
     * UIs and command-line tools, not for authorization checking. This operation
     * may "fail open" without warning.
     */
    "POST /v2/{+resource}:testIamPermissions": (+resource: string, data?: TestIamPermissionsRequest, config?: AxiosRequestConfig & PostV2ResourcetestIamPermissions) => Promise<AxiosResponse<TestIamPermissionsResponse>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test converter.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * PDF Render api
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * HTML Docs
     */
    "GET /.well-known/docs": config => api.get(\`/.well-known/docs\`, config),
    /**
     * API
     */
    "GET /.well-known/openapi.yaml": config => api.get(\`/.well-known/openapi.yaml\`, config),
    /**
     * Generate PDF from html
     */
    "POST /html": (data, config) => api.post<HttpError>(\`/html\`, data, config),
    api: api
});

export interface HttpError {
    message?: string;
}

export interface AxiosOapiInstance {
    /**
     * HTML Docs
     */
    "GET /.well-known/docs": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * API
     */
    "GET /.well-known/openapi.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Generate PDF from html
     */
    "POST /html": (data: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse<HttpError>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test converter.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * PDF Render api
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * HTML Docs
     */
    "GET /.well-known/docs": config => api.get(\`/.well-known/docs\`, config),
    /**
     * API
     */
    "GET /.well-known/openapi.yaml": config => api.get(\`/.well-known/openapi.yaml\`, config),
    /**
     * Generate PDF from html
     */
    "POST /html": (data, config) => api.post<HttpError>(\`/html\`, data, config),
    api: api
});

export interface HttpError {
    message?: string;
}

export interface AxiosOapiInstance {
    /**
     * HTML Docs
     */
    "GET /.well-known/docs": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * API
     */
    "GET /.well-known/openapi.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Generate PDF from html
     */
    "POST /html": (data: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse<HttpError>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test link-example.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Link Example
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    "GET /2.0/users/{username}": (username, config) => api.get<user>(\`/2.0/users/\${username}\`, config),
    "GET /2.0/repositories/{username}": (username, config) => api.get<repository[]>(\`/2.0/repositories/\${username}\`, config),
    "GET /2.0/repositories/{username}/{slug}": (username, slug, config) => api.get<repository>(\`/2.0/repositories/\${username}/\${slug}\`, config),
    "GET /2.0/repositories/{username}/{slug}/pullrequests": (username, slug, config) => api.get<pullrequest[]>(\`/2.0/repositories/\${username}/\${slug}/pullrequests\`, config),
    "GET /2.0/repositories/{username}/{slug}/pullrequests/{pid}": (username, slug, pid, config) => api.get<pullrequest>(\`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}\`, config),
    "POST /2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge": (username, slug, pid, data, config) => api.post(\`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}/merge\`, data, config),
    api: api
});

export interface user {
    username?: string;
    uuid?: string;
    [key: string]: unknown;
}

export interface repository {
    slug?: string;
    owner?: user;
    [key: string]: unknown;
}

export interface pullrequest {
    id?: number;
    title?: string;
    repository?: repository;
    author?: user;
    [key: string]: unknown;
}

export interface Get20RepositoriesUsernameSlugPullrequests {
    params?: {
        state?: "open" | "merged" | "declined";
    };
}

export interface AxiosOapiInstance {
    "GET /2.0/users/{username}": (username: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<user>>;
    "GET /2.0/repositories/{username}": (username: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<repository[]>>;
    "GET /2.0/repositories/{username}/{slug}": (username: string, slug: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<repository>>;
    "GET /2.0/repositories/{username}/{slug}/pullrequests": (username: string, slug: string, config?: AxiosRequestConfig & Get20RepositoriesUsernameSlugPullrequests) => Promise<AxiosResponse<pullrequest[]>>;
    "GET /2.0/repositories/{username}/{slug}/pullrequests/{pid}": (username: string, slug: string, pid: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<pullrequest>>;
    "POST /2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge": (username: string, slug: string, pid: string, data?: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test link-example.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Link Example
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    "GET /2.0/users/{username}": (username, config) => api.get<user>(\`/2.0/users/\${username}\`, config),
    "GET /2.0/repositories/{username}": (username, config) => api.get<repository[]>(\`/2.0/repositories/\${username}\`, config),
    "GET /2.0/repositories/{username}/{slug}": (username, slug, config) => api.get<repository>(\`/2.0/repositories/\${username}/\${slug}\`, config),
    "GET /2.0/repositories/{username}/{slug}/pullrequests": (username, slug, config) => api.get<pullrequest[]>(\`/2.0/repositories/\${username}/\${slug}/pullrequests\`, config),
    "GET /2.0/repositories/{username}/{slug}/pullrequests/{pid}": (username, slug, pid, config) => api.get<pullrequest>(\`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}\`, config),
    "POST /2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge": (username, slug, pid, data, config) => api.post(\`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}/merge\`, data, config),
    api: api
});

export interface user {
    username?: string;
    uuid?: string;
    [key: string]: unknown;
}

export interface repository {
    slug?: string;
    owner?: user;
    [key: string]: unknown;
}

export interface pullrequest {
    id?: number;
    title?: string;
    repository?: repository;
    author?: user;
    [key: string]: unknown;
}

export interface Get20RepositoriesUsernameSlugPullrequests {
    params?: {
        state?: "open" | "merged" | "declined";
    };
}

export interface AxiosOapiInstance {
    "GET /2.0/users/{username}": (username: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<user>>;
    "GET /2.0/repositories/{username}": (username: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<repository[]>>;
    "GET /2.0/repositories/{username}/{slug}": (username: string, slug: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<repository>>;
    "GET /2.0/repositories/{username}/{slug}/pullrequests": (username: string, slug: string, config?: AxiosRequestConfig & Get20RepositoriesUsernameSlugPullrequests) => Promise<AxiosResponse<pullrequest[]>>;
    "GET /2.0/repositories/{username}/{slug}/pullrequests/{pid}": (username: string, slug: string, pid: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<pullrequest>>;
    "POST /2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge": (username: string, slug: string, pid: string, data?: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test medplum.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Medplum - OpenAPI 3.0
 *
 * Version: 1.0.5
 *
 * Description:
 * Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Search
     * Search
     */
    "GET /fhir/R4/{resourceType}": (resourceType, config) => api.get<Bundle>(\`/fhir/R4/\${resourceType}\`, config),
    /**
     * Create Resource
     * Create Resource
     */
    "POST /fhir/R4/{resourceType}": (resourceType, data, config) => api.post<ResourceList>(\`/fhir/R4/\${resourceType}\`, data, config),
    /**
     * Read Resource
     * Read Resource
     */
    "GET /fhir/R4/{resourceType}/{id}": (resourceType, id, config) => api.get<ResourceList>(\`/fhir/R4/\${resourceType}/\${id}\`, config),
    /**
     * Update Resource
     * Update Resource
     */
    "PUT /fhir/R4/{resourceType}/{id}": (resourceType, id, data, config) => api.put<ResourceList>(\`/fhir/R4/\${resourceType}/\${id}\`, data, config),
    /**
     * Delete Resource
     * Delete Resource
     */
    "DELETE /fhir/R4/{resourceType}/{id}": (resourceType, id, config) => api.delete(\`/fhir/R4/\${resourceType}/\${id}\`, config),
    /**
     * Patch Resource
     * Patch Resource
     */
    "PATCH /fhir/R4/{resourceType}/{id}": (resourceType, id, data, config) => api.patch(\`/fhir/R4/\${resourceType}/\${id}\`, data, config),
    /**
     * Read Resource History
     * Read Resource History
     */
    "GET /fhir/R4/{resourceType}/{id}/_history": (resourceType, id, config) => api.get<Bundle>(\`/fhir/R4/\${resourceType}/\${id}/_history\`, config),
    /**
     * Read Version
     * Read Version
     */
    "GET /fhir/R4/{resourceType}/{id}/_history/{versionId}": (resourceType, id, versionId, config) => api.get<ResourceList>(\`/fhir/R4/\${resourceType}/\${id}/_history/\${versionId}\`, config),
    api: api
});

export interface Bundle {
    /**
     * This is a Bundle resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * Indicates the purpose of this bundle - how it is intended to be used.
     */
    type?: "document" | "message" | "transaction" | "transaction-response" | "batch" | "batch-response" | "history" | "searchset" | "collection";
    /**
     * An instant in time - known at least to the second
     */
    timestamp?: instant;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    total?: unsignedInt;
    /**
     * A series of links that provide context to this bundle.
     */
    link?: Bundle_Link[];
    /**
     * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
     */
    entry?: Bundle_Entry[];
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    signature?: Signature;
}

export type id = string;

export interface Meta {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    versionId?: id;
    /**
     * An instant in time - known at least to the second
     */
    lastUpdated?: instant;
    /**
     * String of characters used to identify a name or a resource
     */
    source?: uri;
    /**
     * A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].
     */
    profile?: canonical[];
    /**
     * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
     */
    security?: Coding[];
    /**
     * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
     */
    tag?: Coding[];
    /**
     * String of characters used to identify a name or a resource
     */
    project?: uri;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * A reference from one resource to another.
     */
    account?: Reference;
    /**
     * The list of compartments containing this resource. This is readonly and is set by the server.
     */
    compartment?: Reference[];
}

export type string = string;

export interface Extension {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBase64Binary?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBoolean?: boolean;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCanonical?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCode?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDate?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDateTime?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDecimal?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueId?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInstant?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInteger?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMarkdown?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueOid?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valuePositiveInt?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueString?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTime?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUnsignedInt?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUri?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUrl?: string;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    valueAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    valueAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    valueAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    valueContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    valueDistance?: Distance;
    /**
     * A length of time.
     */
    valueDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    valueHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    valueIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    valueMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    valueRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    valueSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    valueSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    valueTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    valueContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    valueContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    valueExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    valueUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    valueDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    valueMeta?: Meta;
}

export type uri = string;

export interface Address {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The purpose of this address.
     */
    use?: "home" | "work" | "temp" | "old" | "billing";
    /**
     * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
     */
    type?: "postal" | "physical" | "both";
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
     */
    line?: string[];
    /**
     * A sequence of Unicode characters
     */
    city?: string;
    /**
     * A sequence of Unicode characters
     */
    district?: string;
    /**
     * A sequence of Unicode characters
     */
    state?: string;
    /**
     * A sequence of Unicode characters
     */
    postalCode?: string;
    /**
     * A sequence of Unicode characters
     */
    country?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface Period {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    start?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    end?: dateTime;
}

export type dateTime = string;

export interface Age {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: "<" | "<=" | ">=" | ">";
    /**
     * A sequence of Unicode characters
     */
    unit?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
}

export type decimal = string;

export type code = string;

export interface Annotation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    authorReference?: Reference;
    /**
     * The individual responsible for making the annotation.
     */
    authorString?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    time?: dateTime;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    text?: markdown;
}

export interface Reference {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    reference?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    type?: uri;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    resource?: ResourceList;
}

export interface Identifier {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The purpose of this identifier.
     */
    use?: "usual" | "official" | "temp" | "secondary" | "old";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    assigner?: Reference;
}

export interface CodeableConcept {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    coding?: Coding[];
    /**
     * A sequence of Unicode characters
     */
    text?: string;
}

export interface Coding {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * Value of "true" or "false"
     */
    userSelected?: boolean;
}

export type boolean = boolean;

export type ResourceList = Account | ActivityDefinition | AdverseEvent | AllergyIntolerance | Appointment | AppointmentResponse | AuditEvent | Basic | Binary | BiologicallyDerivedProduct | BodyStructure | Bundle | CapabilityStatement | CarePlan | CareTeam | CatalogEntry | ChargeItem | ChargeItemDefinition | Claim | ClaimResponse | ClinicalImpression | CodeSystem | Communication | CommunicationRequest | CompartmentDefinition | Composition | ConceptMap | Condition | Consent | Contract | Coverage | CoverageEligibilityRequest | CoverageEligibilityResponse | DetectedIssue | Device | DeviceDefinition | DeviceMetric | DeviceRequest | DeviceUseStatement | DiagnosticReport | DocumentManifest | DocumentReference | EffectEvidenceSynthesis | Encounter | Endpoint | EnrollmentRequest | EnrollmentResponse | EpisodeOfCare | EventDefinition | Evidence | EvidenceVariable | ExampleScenario | ExplanationOfBenefit | FamilyMemberHistory | Flag | Goal | GraphDefinition | Group | GuidanceResponse | HealthcareService | ImagingStudy | Immunization | ImmunizationEvaluation | ImmunizationRecommendation | ImplementationGuide | InsurancePlan | Invoice | Library | Linkage | List | Location | Measure | MeasureReport | Media | Medication | MedicationAdministration | MedicationDispense | MedicationKnowledge | MedicationRequest | MedicationStatement | MedicinalProduct | MedicinalProductAuthorization | MedicinalProductContraindication | MedicinalProductIndication | MedicinalProductIngredient | MedicinalProductInteraction | MedicinalProductManufactured | MedicinalProductPackaged | MedicinalProductPharmaceutical | MedicinalProductUndesirableEffect | MessageDefinition | MessageHeader | MolecularSequence | NamingSystem | NutritionOrder | Observation | ObservationDefinition | OperationDefinition | OperationOutcome | Organization | OrganizationAffiliation | Parameters | Patient | PaymentNotice | PaymentReconciliation | Person | PlanDefinition | Practitioner | PractitionerRole | Procedure | Provenance | Questionnaire | QuestionnaireResponse | RelatedPerson | RequestGroup | ResearchDefinition | ResearchElementDefinition | ResearchStudy | ResearchSubject | RiskAssessment | RiskEvidenceSynthesis | Schedule | SearchParameter | ServiceRequest | Slot | Specimen | SpecimenDefinition | StructureDefinition | StructureMap | Subscription | Substance | SubstanceNucleicAcid | SubstancePolymer | SubstanceProtein | SubstanceReferenceInformation | SubstanceSourceMaterial | SubstanceSpecification | SupplyDelivery | SupplyRequest | Task | TerminologyCapabilities | TestReport | TestScript | ValueSet | VerificationResult | VisionPrescription | Project | ClientApplication | User | Login | PasswordChangeRequest | JsonWebKey | Bot | AccessPolicy | UserConfiguration | ProjectMembership | BulkDataExport | SmartAppLaunch | DomainConfiguration | AsyncJob | Agent;

export interface Account {
    /**
     * This is a Account resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
     */
    identifier?: Identifier[];
    /**
     * Indicates whether the account is presently used/usable or not.
     */
    status?: "active" | "inactive" | "entered-in-error" | "on-hold" | "unknown";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
     */
    subject?: Reference[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    servicePeriod?: Period;
    /**
     * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
     */
    coverage?: Account_Coverage[];
    /**
     * A reference from one resource to another.
     */
    owner?: Reference;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * The parties responsible for balancing the account if other payment options fall short.
     */
    guarantor?: Account_Guarantor[];
    /**
     * A reference from one resource to another.
     */
    partOf?: Reference;
}

export interface Narrative {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
     */
    status?: "generated" | "extensions" | "additional" | "empty";
    /**
     * xhtml - escaped html (see specfication)
     */
    div: xhtml;
}

export type xhtml = any;

export interface Account_Coverage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    coverage: Reference;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    priority?: positiveInt;
}

export type positiveInt = string;

export interface Account_Guarantor {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    party: Reference;
    /**
     * Value of "true" or "false"
     */
    onHold?: boolean;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface ActivityDefinition {
    /**
     * This is a ActivityDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this activity definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the activity definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing any formal logic used by the activity definition.
     */
    library?: canonical[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    kind?: code;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile?: canonical;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    intent?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * Value of "true" or "false"
     */
    doNotPerform?: boolean;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    timingTiming?: Timing;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingDateTime?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    timingAge?: Age;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timingPeriod?: Period;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    timingRange?: Range;
    /**
     * A length of time.
     */
    timingDuration?: Duration;
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * Indicates who should participate in performing the action described.
     */
    participant?: ActivityDefinition_Participant[];
    /**
     * A reference from one resource to another.
     */
    productReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
     */
    dosage?: Dosage[];
    /**
     * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
     */
    bodySite?: CodeableConcept[];
    /**
     * Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
     */
    specimenRequirement?: Reference[];
    /**
     * Defines observation requirements for the action to be performed, such as body weight or surface area.
     */
    observationRequirement?: Reference[];
    /**
     * Defines the observations that are expected to be produced by the action.
     */
    observationResultRequirement?: Reference[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    transform?: canonical;
    /**
     * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
     */
    dynamicValue?: ActivityDefinition_DynamicValue[];
}

export interface ContactDetail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The contact details for the individual (if a name was provided) or the organization.
     */
    telecom?: ContactPoint[];
}

export interface ContactPoint {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Telecommunications form for contact point - what communications system is required to make use of the contact.
     */
    system?: "phone" | "fax" | "email" | "pager" | "url" | "sms" | "other";
    /**
     * A sequence of Unicode characters
     */
    value?: string;
    /**
     * Identifies the purpose for the contact point.
     */
    use?: "home" | "work" | "temp" | "old" | "mobile";
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    rank?: positiveInt;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export type markdown = string;

export interface UsageContext {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    code: Coding;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
}

export interface Quantity {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: "<" | "<=" | ">=" | ">";
    /**
     * A sequence of Unicode characters
     */
    unit?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
}

export interface Range {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    low?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    high?: Quantity;
}

export type date = string;

export interface RelatedArtifact {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The type of relationship to the related artifact.
     */
    type?: "documentation" | "justification" | "citation" | "predecessor" | "successor" | "derived-from" | "depends-on" | "composed-of";
    /**
     * A sequence of Unicode characters
     */
    label?: string;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    citation?: markdown;
    /**
     * A URI that is a literal reference
     */
    url?: url;
    /**
     * For referring to data content defined in other formats.
     */
    document?: Attachment;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    resource?: canonical;
}

export type url = string;

export interface Attachment {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    contentType?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A stream of bytes
     */
    data?: base64Binary;
    /**
     * A URI that is a literal reference
     */
    url?: url;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    size?: unsignedInt;
    /**
     * A stream of bytes
     */
    hash?: base64Binary;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    creation?: dateTime;
}

export type base64Binary = string;

export type unsignedInt = string;

export type canonical = string;

export interface Timing {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies specific times when the event occurs.
     */
    event?: dateTime[];
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    repeat?: Timing_Repeat;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
}

export interface Timing_Repeat {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A length of time.
     */
    boundsDuration?: Duration;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    boundsRange?: Range;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    boundsPeriod?: Period;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    count?: positiveInt;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    countMax?: positiveInt;
    /**
     * A rational number with implicit precision
     */
    duration?: decimal;
    /**
     * A rational number with implicit precision
     */
    durationMax?: decimal;
    /**
     * The units of time for the duration, in UCUM units.
     */
    durationUnit?: "s" | "min" | "h" | "d" | "wk" | "mo" | "a";
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    frequency?: positiveInt;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    frequencyMax?: positiveInt;
    /**
     * A rational number with implicit precision
     */
    period?: decimal;
    /**
     * A rational number with implicit precision
     */
    periodMax?: decimal;
    /**
     * The units of time for the period in UCUM units.
     */
    periodUnit?: "s" | "min" | "h" | "d" | "wk" | "mo" | "a";
    /**
     * If one or more days of week is provided, then the action happens only on the specified day(s).
     */
    dayOfWeek?: code[];
    /**
     * Specified time of day for action to take place.
     */
    timeOfDay?: time[];
    /**
     * An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
     */
    when?: ("MORN" | "MORN.early" | "MORN.late" | "NOON" | "AFT" | "AFT.early" | "AFT.late" | "EVE" | "EVE.early" | "EVE.late" | "NIGHT" | "PHS" | "HS" | "WAKE" | "C" | "CM" | "CD" | "CV" | "AC" | "ACM" | "ACD" | "ACV" | "PC" | "PCM" | "PCD" | "PCV")[];
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    offset?: unsignedInt;
}

export interface Duration {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: "<" | "<=" | ">=" | ">";
    /**
     * A sequence of Unicode characters
     */
    unit?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
}

export type time = string;

export interface ActivityDefinition_Participant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
}

export interface Dosage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    sequence?: integer;
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
     */
    additionalInstruction?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    patientInstruction?: string;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    timing?: Timing;
    /**
     * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
     */
    asNeededBoolean?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    asNeededCodeableConcept?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    site?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    route?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * The amount of medication administered.
     */
    doseAndRate?: Dosage_DoseAndRate[];
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    maxDosePerPeriod?: Ratio;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    maxDosePerAdministration?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    maxDosePerLifetime?: Quantity;
}

export type integer = string;

export interface Dosage_DoseAndRate {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    doseRange?: Range;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    doseQuantity?: Quantity;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    rateRatio?: Ratio;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    rateRange?: Range;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    rateQuantity?: Quantity;
}

export interface Ratio {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    numerator?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    denominator?: Quantity;
}

export interface ActivityDefinition_DynamicValue {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    expression: Expression;
}

export interface Expression {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    name?: id;
    /**
     * The media type of the language for the expression.
     */
    language?: "text/cql" | "text/fhirpath" | "application/x-fhir-query";
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    reference?: uri;
}

export interface AdverseEvent {
    /**
     * This is a AdverseEvent resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * Whether the event actually happened, or just had the potential to. Note that this is independent of whether anyone was affected or harmed or how severely.
     */
    actuality?: "actual" | "potential";
    /**
     * The overall type of event, intended for search and filtering purposes.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    event?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    detected?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    recordedDate?: dateTime;
    /**
     * Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical).
     */
    resultingCondition?: Reference[];
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    seriousness?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    severity?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    outcome?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    recorder?: Reference;
    /**
     * Parties that may or should contribute or have contributed information to the adverse event, which can consist of one or more activities.  Such information includes information leading to the decision to perform the activity and how to perform the activity (e.g. consultant), information that the activity itself seeks to reveal (e.g. informant of clinical history), or information about what activity was performed (e.g. informant witness).
     */
    contributor?: Reference[];
    /**
     * Describes the entity that is suspected to have caused the adverse event.
     */
    suspectEntity?: AdverseEvent_SuspectEntity[];
    /**
     * AdverseEvent.subjectMedicalHistory.
     */
    subjectMedicalHistory?: Reference[];
    /**
     * AdverseEvent.referenceDocument.
     */
    referenceDocument?: Reference[];
    /**
     * AdverseEvent.study.
     */
    study?: Reference[];
}

export interface AdverseEvent_SuspectEntity {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    instance: Reference;
    /**
     * Information on the possible cause of the event.
     */
    causality?: AdverseEvent_Causality[];
}

export interface AdverseEvent_Causality {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    assessment?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    productRelatedness?: string;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
}

export interface AllergyIntolerance {
    /**
     * This is a AllergyIntolerance resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    clinicalStatus?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    verificationStatus?: CodeableConcept;
    /**
     * Identification of the underlying physiological mechanism for the reaction risk.
     */
    type?: "allergy" | "intolerance";
    /**
     * Category of the identified substance.
     */
    category?: ("food" | "medication" | "environment" | "biologic")[];
    /**
     * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
     */
    criticality?: "low" | "high" | "unable-to-assess";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     */
    onsetDateTime?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    onsetAge?: Age;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    onsetPeriod?: Period;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    onsetRange?: Range;
    /**
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     */
    onsetString?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    recordedDate?: dateTime;
    /**
     * A reference from one resource to another.
     */
    recorder?: Reference;
    /**
     * A reference from one resource to another.
     */
    asserter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    lastOccurrence?: dateTime;
    /**
     * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
     */
    note?: Annotation[];
    /**
     * Details about each adverse reaction event linked to exposure to the identified substance.
     */
    reaction?: AllergyIntolerance_Reaction[];
}

export interface AllergyIntolerance_Reaction {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    substance?: CodeableConcept;
    /**
     * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
     */
    manifestation: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    onset?: dateTime;
    /**
     * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
     */
    severity?: "mild" | "moderate" | "severe";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    exposureRoute?: CodeableConcept;
    /**
     * Additional text about the adverse reaction event not captured in other fields.
     */
    note?: Annotation[];
}

export interface Appointment {
    /**
     * This is a Appointment resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
     */
    identifier?: Identifier[];
    /**
     * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
     */
    status?: "proposed" | "pending" | "booked" | "arrived" | "fulfilled" | "cancelled" | "noshow" | "entered-in-error" | "checked-in" | "waitlist";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    cancelationReason?: CodeableConcept;
    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The specific service that is to be performed during this appointment.
     */
    serviceType?: CodeableConcept[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    appointmentType?: CodeableConcept;
    /**
     * The coded reason that this appointment is being scheduled. This is more clinical than administrative.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
     */
    reasonReference?: Reference[];
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    priority?: unsignedInt;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Additional information to support the appointment provided when making the appointment.
     */
    supportingInformation?: Reference[];
    /**
     * An instant in time - known at least to the second
     */
    start?: instant;
    /**
     * An instant in time - known at least to the second
     */
    end?: instant;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    minutesDuration?: positiveInt;
    /**
     * The slots from the participants' schedules that will be filled by the appointment.
     */
    slot?: Reference[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * A sequence of Unicode characters
     */
    patientInstruction?: string;
    /**
     * The service request this appointment is allocated to assess (e.g. incoming referral or procedure request).
     */
    basedOn?: Reference[];
    /**
     * List of participants involved in the appointment.
     */
    participant: Appointment_Participant[];
    /**
     * A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.
     *
     * The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system.
     */
    requestedPeriod?: Period[];
}

export type instant = string;

export interface Appointment_Participant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Role of participant in the appointment.
     */
    type?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    actor?: Reference;
    /**
     * Whether this participant is required to be present at the meeting. This covers a use-case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
     */
    required?: "required" | "optional" | "information-only";
    /**
     * Participation status of the actor.
     */
    status?: "accepted" | "declined" | "tentative" | "needs-action";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface AppointmentResponse {
    /**
     * This is a AppointmentResponse resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    identifier?: Identifier[];
    /**
     * A reference from one resource to another.
     */
    appointment: Reference;
    /**
     * An instant in time - known at least to the second
     */
    start?: instant;
    /**
     * An instant in time - known at least to the second
     */
    end?: instant;
    /**
     * Role of participant in the appointment.
     */
    participantType?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    actor?: Reference;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    participantStatus?: code;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
}

export interface AuditEvent {
    /**
     * This is a AuditEvent resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    type: Coding;
    /**
     * Identifier for the category of event.
     */
    subtype?: Coding[];
    /**
     * Indicator for type of action performed during the event that generated the audit.
     */
    action?: "C" | "R" | "U" | "D" | "E";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * An instant in time - known at least to the second
     */
    recorded?: instant;
    /**
     * Indicates whether the event succeeded or failed.
     */
    outcome?: "0" | "4" | "8" | "12";
    /**
     * A sequence of Unicode characters
     */
    outcomeDesc?: string;
    /**
     * The purposeOfUse (reason) that was used during the event being recorded.
     */
    purposeOfEvent?: CodeableConcept[];
    /**
     * An actor taking an active role in the event or activity that is logged.
     */
    agent: AuditEvent_Agent[];
    /**
     * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
     */
    source: AuditEvent_Source;
    /**
     * Specific instances of data or objects that have been accessed.
     */
    entity?: AuditEvent_Entity[];
}

export interface AuditEvent_Agent {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.
     */
    role?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    who?: Reference;
    /**
     * A sequence of Unicode characters
     */
    altId?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * Value of "true" or "false"
     */
    requestor?: boolean;
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
     */
    policy?: uri[];
    /**
     * A reference to a code defined by a terminology system.
     */
    media?: Coding;
    /**
     * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
     */
    network?: AuditEvent_Network;
    /**
     * The reason (purpose of use), specific to this agent, that was used during the event being recorded.
     */
    purposeOfUse?: CodeableConcept[];
}

export interface AuditEvent_Network {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    address?: string;
    /**
     * An identifier for the type of network access point that originated the audit event.
     */
    type?: "1" | "2" | "3" | "4" | "5";
}

export interface AuditEvent_Source {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    site?: string;
    /**
     * A reference from one resource to another.
     */
    observer: Reference;
    /**
     * Code specifying the type of source where event originated.
     */
    type?: Coding[];
}

export interface AuditEvent_Entity {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    what?: Reference;
    /**
     * A reference to a code defined by a terminology system.
     */
    type?: Coding;
    /**
     * A reference to a code defined by a terminology system.
     */
    role?: Coding;
    /**
     * A reference to a code defined by a terminology system.
     */
    lifecycle?: Coding;
    /**
     * Security labels for the identified entity.
     */
    securityLabel?: Coding[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A stream of bytes
     */
    query?: base64Binary;
    /**
     * Tagged value pairs for conveying additional information about the entity.
     */
    detail?: AuditEvent_Detail[];
}

export interface AuditEvent_Detail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    type?: string;
    /**
     * The  value of the extra detail.
     */
    valueString?: string;
    /**
     * The  value of the extra detail.
     */
    valueBase64Binary?: string;
}

export interface Basic {
    /**
     * This is a Basic resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier assigned to the resource for business purposes, outside the context of FHIR.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    created?: date;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
}

export interface Binary {
    /**
     * This is a Binary resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    contentType?: code;
    /**
     * A reference from one resource to another.
     */
    securityContext?: Reference;
    /**
     * A stream of bytes
     */
    data?: base64Binary;
}

export interface BiologicallyDerivedProduct {
    /**
     * This is a BiologicallyDerivedProduct resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
     */
    identifier?: Identifier[];
    /**
     * Broad category of this product.
     */
    productCategory?: "organ" | "tissue" | "fluid" | "cells" | "biologicalAgent";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productCode?: CodeableConcept;
    /**
     * Whether the product is currently available.
     */
    status?: "available" | "unavailable";
    /**
     * Procedure request to obtain this biologically derived product.
     */
    request?: Reference[];
    /**
     * A whole number
     */
    quantity?: integer;
    /**
     * Parent product (if any).
     */
    parent?: Reference[];
    /**
     * A material substance originating from a biological entity intended to be transplanted or infused
     * into another (possibly the same) biological entity.
     */
    collection?: BiologicallyDerivedProduct_Collection;
    /**
     * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
     */
    processing?: BiologicallyDerivedProduct_Processing[];
    /**
     * A material substance originating from a biological entity intended to be transplanted or infused
     * into another (possibly the same) biological entity.
     */
    manipulation?: BiologicallyDerivedProduct_Manipulation;
    /**
     * Product storage.
     */
    storage?: BiologicallyDerivedProduct_Storage[];
}

export interface BiologicallyDerivedProduct_Collection {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    collector?: Reference;
    /**
     * A reference from one resource to another.
     */
    source?: Reference;
    /**
     * Time of product collection.
     */
    collectedDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    collectedPeriod?: Period;
}

export interface BiologicallyDerivedProduct_Processing {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    procedure?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    additive?: Reference;
    /**
     * Time of processing.
     */
    timeDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timePeriod?: Period;
}

export interface BiologicallyDerivedProduct_Manipulation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Time of manipulation.
     */
    timeDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timePeriod?: Period;
}

export interface BiologicallyDerivedProduct_Storage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A rational number with implicit precision
     */
    temperature?: decimal;
    /**
     * Temperature scale used.
     */
    scale?: "farenheit" | "celsius" | "kelvin";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    duration?: Period;
}

export interface BodyStructure {
    /**
     * This is a BodyStructure resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for this instance of the anatomical structure.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    morphology?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    location?: CodeableConcept;
    /**
     * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
     */
    locationQualifier?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Image or images used to identify a location.
     */
    image?: Attachment[];
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
}

export interface CapabilityStatement {
    /**
     * This is a CapabilityStatement resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this capability statement. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the capability statement is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
     */
    kind?: "instance" | "capability" | "requirements";
    /**
     * Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.
     */
    instantiates?: canonical[];
    /**
     * Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.
     */
    imports?: canonical[];
    /**
     * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    software?: CapabilityStatement_Software;
    /**
     * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    implementation?: CapabilityStatement_Implementation;
    /**
     * The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.
     */
    fhirVersion?: "0.01" | "0.05" | "0.06" | "0.11" | "0.0.80" | "0.0.81" | "0.0.82" | "0.4.0" | "0.5.0" | "1.0.0" | "1.0.1" | "1.0.2" | "1.1.0" | "1.4.0" | "1.6.0" | "1.8.0" | "3.0.0" | "3.0.1" | "3.3.0" | "3.5.0" | "4.0.0" | "4.0.1";
    /**
     * A list of the formats supported by this implementation using their content types.
     */
    format?: code[];
    /**
     * A list of the patch formats supported by this implementation using their content types.
     */
    patchFormat?: code[];
    /**
     * A list of implementation guides that the server does (or should) support in their entirety.
     */
    implementationGuide?: canonical[];
    /**
     * A definition of the restful capabilities of the solution, if any.
     */
    rest?: CapabilityStatement_Rest[];
    /**
     * A description of the messaging capabilities of the solution.
     */
    messaging?: CapabilityStatement_Messaging[];
    /**
     * A document definition.
     */
    document?: CapabilityStatement_Document[];
}

export interface CapabilityStatement_Software {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    releaseDate?: dateTime;
}

export interface CapabilityStatement_Implementation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A URI that is a literal reference
     */
    url?: url;
    /**
     * A reference from one resource to another.
     */
    custodian?: Reference;
}

export interface CapabilityStatement_Rest {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
     */
    mode?: "client" | "server";
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
    /**
     * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    security?: CapabilityStatement_Security;
    /**
     * A specification of the restful capabilities of the solution for a specific resource type.
     */
    resource?: CapabilityStatement_Resource[];
    /**
     * A specification of restful operations supported by the system.
     */
    interaction?: CapabilityStatement_Interaction1[];
    /**
     * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
     */
    searchParam?: CapabilityStatement_SearchParam[];
    /**
     * Definition of an operation or a named query together with its parameters and their meaning and type.
     */
    operation?: CapabilityStatement_Operation[];
    /**
     * An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
     */
    compartment?: canonical[];
}

export interface CapabilityStatement_Security {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    cors?: boolean;
    /**
     * Types of security services that are supported/required by the system.
     */
    service?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
}

export interface CapabilityStatement_Resource {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile?: canonical;
    /**
     * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
     */
    supportedProfile?: canonical[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
    /**
     * Identifies a restful operation supported by the solution.
     */
    interaction?: CapabilityStatement_Interaction[];
    /**
     * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
     */
    versioning?: "no-version" | "versioned" | "versioned-update";
    /**
     * Value of "true" or "false"
     */
    readHistory?: boolean;
    /**
     * Value of "true" or "false"
     */
    updateCreate?: boolean;
    /**
     * Value of "true" or "false"
     */
    conditionalCreate?: boolean;
    /**
     * A code that indicates how the server supports conditional read.
     */
    conditionalRead?: "not-supported" | "modified-since" | "not-match" | "full-support";
    /**
     * Value of "true" or "false"
     */
    conditionalUpdate?: boolean;
    /**
     * A code that indicates how the server supports conditional delete.
     */
    conditionalDelete?: "not-supported" | "single" | "multiple";
    /**
     * A set of flags that defines how references are supported.
     */
    referencePolicy?: ("literal" | "logical" | "resolves" | "enforced" | "local")[];
    /**
     * A list of _include values supported by the server.
     */
    searchInclude?: string[];
    /**
     * A list of _revinclude (reverse include) values supported by the server.
     */
    searchRevInclude?: string[];
    /**
     * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
     */
    searchParam?: CapabilityStatement_SearchParam[];
    /**
     * Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
     */
    operation?: CapabilityStatement_Operation[];
}

export interface CapabilityStatement_Interaction {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Coded identifier of the operation, supported by the system resource.
     */
    code?: "read" | "vread" | "update" | "patch" | "delete" | "history-instance" | "history-type" | "create" | "search-type";
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
}

export interface CapabilityStatement_SearchParam {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    definition?: canonical;
    /**
     * The type of value a search parameter refers to, and how the content is interpreted.
     */
    type?: "number" | "date" | "string" | "token" | "reference" | "composite" | "quantity" | "uri" | "special";
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
}

export interface CapabilityStatement_Operation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    definition: canonical;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
}

export interface CapabilityStatement_Interaction1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A coded identifier of the operation, supported by the system.
     */
    code?: "transaction" | "batch" | "search-system" | "history-system";
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
}

export interface CapabilityStatement_Messaging {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An endpoint (network accessible address) to which messages and/or replies are to be sent.
     */
    endpoint?: CapabilityStatement_Endpoint[];
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    reliableCache?: unsignedInt;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
    /**
     * References to message definitions for messages this system can send or receive.
     */
    supportedMessage?: CapabilityStatement_SupportedMessage[];
}

export interface CapabilityStatement_Endpoint {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    protocol: Coding;
    /**
     * A URI that is a literal reference
     */
    address?: url;
}

export interface CapabilityStatement_SupportedMessage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The mode of this event declaration - whether application is sender or receiver.
     */
    mode?: "sender" | "receiver";
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    definition: canonical;
}

export interface CapabilityStatement_Document {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Mode of this document declaration - whether an application is a producer or consumer.
     */
    mode?: "producer" | "consumer";
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    documentation?: markdown;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile: canonical;
}

export interface CarePlan {
    /**
     * This is a CarePlan resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    instantiatesUri?: uri[];
    /**
     * A care plan that is fulfilled in whole or in part by this care plan.
     */
    basedOn?: Reference[];
    /**
     * Completed or terminated care plan whose function is taken by this new care plan.
     */
    replaces?: Reference[];
    /**
     * A larger care plan of which this particular care plan is a component or step.
     */
    partOf?: Reference[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    intent?: code;
    /**
     * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
     */
    category?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * Identifies the individual(s) or organization who provided the contents of the care plan.
     */
    contributor?: Reference[];
    /**
     * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
     */
    careTeam?: Reference[];
    /**
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
     */
    addresses?: Reference[];
    /**
     * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
     */
    supportingInfo?: Reference[];
    /**
     * Describes the intended objective(s) of carrying out the care plan.
     */
    goal?: Reference[];
    /**
     * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
     */
    activity?: CarePlan_Activity[];
    /**
     * General notes about the care plan not covered elsewhere.
     */
    note?: Annotation[];
}

export interface CarePlan_Activity {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not).
     */
    outcomeCodeableConcept?: CodeableConcept[];
    /**
     * Details of the outcome or action resulting from the activity.  The reference to an "event" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource).
     */
    outcomeReference?: Reference[];
    /**
     * Notes about the adherence/status/progress of the activity.
     */
    progress?: Annotation[];
    /**
     * A reference from one resource to another.
     */
    reference?: Reference;
    /**
     * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
     */
    detail?: CarePlan_Detail;
}

export interface CarePlan_Detail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    kind?: code;
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
     */
    instantiatesUri?: uri[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource, such as the health condition(s), whose existence justifies this request and drove the inclusion of this particular activity as part of the plan.
     */
    reasonReference?: Reference[];
    /**
     * Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
     */
    goal?: Reference[];
    /**
     * Identifies what progress is being made for the specific activity.
     */
    status?: "not-started" | "scheduled" | "in-progress" | "on-hold" | "completed" | "cancelled" | "stopped" | "unknown" | "entered-in-error";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    doNotPerform?: boolean;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    scheduledTiming?: Timing;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    scheduledPeriod?: Period;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    scheduledString?: string;
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * Identifies who's expected to be involved in the activity.
     */
    performer?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    productReference?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    dailyAmount?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
}

export interface CareTeam {
    /**
     * This is a CareTeam resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current state of the care team.
     */
    status?: "proposed" | "active" | "suspended" | "inactive" | "entered-in-error";
    /**
     * Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
     */
    category?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * Identifies all people and organizations who are expected to be involved in the care team.
     */
    participant?: CareTeam_Participant[];
    /**
     * Describes why the care team exists.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition(s) that this care team addresses.
     */
    reasonReference?: Reference[];
    /**
     * The organization responsible for the care team.
     */
    managingOrganization?: Reference[];
    /**
     * A central contact detail for the care team (that applies to all members).
     */
    telecom?: ContactPoint[];
    /**
     * Comments made about the CareTeam.
     */
    note?: Annotation[];
}

export interface CareTeam_Participant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
     */
    role?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    member?: Reference;
    /**
     * A reference from one resource to another.
     */
    onBehalfOf?: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface CatalogEntry {
    /**
     * This is a CatalogEntry resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    orderable?: boolean;
    /**
     * A reference from one resource to another.
     */
    referencedItem: Reference;
    /**
     * Used in supporting related concepts, e.g. NDC to RxNorm.
     */
    additionalIdentifier?: Identifier[];
    /**
     * Classes of devices, or ATC for medication.
     */
    classification?: CodeableConcept[];
    /**
     * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    validityPeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    validTo?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    lastUpdated?: dateTime;
    /**
     * Used for examplefor Out of Formulary, or any specifics.
     */
    additionalCharacteristic?: CodeableConcept[];
    /**
     * User for example for ATC classification, or.
     */
    additionalClassification?: CodeableConcept[];
    /**
     * Used for example, to point to a substance, or to a device used to administer a medication.
     */
    relatedEntry?: CatalogEntry_RelatedEntry[];
}

export interface CatalogEntry_RelatedEntry {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
     */
    relationtype?: "triggers" | "is-replaced-by";
    /**
     * A reference from one resource to another.
     */
    item: Reference;
}

export interface ChargeItem {
    /**
     * This is a ChargeItem resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this event performer or other systems.
     */
    identifier?: Identifier[];
    /**
     * References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
     */
    definitionUri?: uri[];
    /**
     * References the source of pricing information, rules of application for the code this ChargeItem uses.
     */
    definitionCanonical?: canonical[];
    /**
     * The current state of the ChargeItem.
     */
    status?: "planned" | "billable" | "not-billable" | "aborted" | "billed" | "entered-in-error" | "unknown";
    /**
     * ChargeItems can be grouped to larger ChargeItems covering the whole set.
     */
    partOf?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    context?: Reference;
    /**
     * Date/time(s) or duration when the charged service was applied.
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    occurrenceTiming?: Timing;
    /**
     * Indicates who or what performed or participated in the charged service.
     */
    performer?: ChargeItem_Performer[];
    /**
     * A reference from one resource to another.
     */
    performingOrganization?: Reference;
    /**
     * A reference from one resource to another.
     */
    requestingOrganization?: Reference;
    /**
     * A reference from one resource to another.
     */
    costCenter?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * The anatomical location where the related service has been applied.
     */
    bodysite?: CodeableConcept[];
    /**
     * A rational number with implicit precision
     */
    factorOverride?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    priceOverride?: Money;
    /**
     * A sequence of Unicode characters
     */
    overrideReason?: string;
    /**
     * A reference from one resource to another.
     */
    enterer?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    enteredDate?: dateTime;
    /**
     * Describes why the event occurred in coded or textual form.
     */
    reason?: CodeableConcept[];
    /**
     * Indicated the rendered service that caused this charge.
     */
    service?: Reference[];
    /**
     * A reference from one resource to another.
     */
    productReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * Account into which this ChargeItems belongs.
     */
    account?: Reference[];
    /**
     * Comments made about the event by the performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Further information supporting this charge.
     */
    supportingInformation?: Reference[];
}

export interface ChargeItem_Performer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    function?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    actor: Reference;
}

export interface Money {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    currency?: code;
}

export interface ChargeItemDefinition {
    /**
     * This is a ChargeItemDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.
     */
    derivedFromUri?: uri[];
    /**
     * A larger definition of which this particular definition is a component or step.
     */
    partOf?: canonical[];
    /**
     * As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.
     */
    replaces?: canonical[];
    /**
     * The current state of the ChargeItemDefinition.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the charge item definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * The defined billing details in this resource pertain to the given product instance(s).
     */
    instance?: Reference[];
    /**
     * Expressions that describe applicability criteria for the billing code.
     */
    applicability?: ChargeItemDefinition_Applicability[];
    /**
     * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
     */
    propertyGroup?: ChargeItemDefinition_PropertyGroup[];
}

export interface ChargeItemDefinition_Applicability {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A sequence of Unicode characters
     */
    language?: string;
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
}

export interface ChargeItemDefinition_PropertyGroup {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Expressions that describe applicability criteria for the priceComponent.
     */
    applicability?: ChargeItemDefinition_Applicability[];
    /**
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
     */
    priceComponent?: ChargeItemDefinition_PriceComponent[];
}

export interface ChargeItemDefinition_PriceComponent {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount?: Money;
}

export interface Claim {
    /**
     * This is a Claim resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this claim.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subType?: CodeableConcept;
    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
     */
    use?: "claim" | "preauthorization" | "predetermination";
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    billablePeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    enterer?: Reference;
    /**
     * A reference from one resource to another.
     */
    insurer?: Reference;
    /**
     * A reference from one resource to another.
     */
    provider: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    priority: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fundsReserve?: CodeableConcept;
    /**
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     */
    related?: Claim_Related[];
    /**
     * A reference from one resource to another.
     */
    prescription?: Reference;
    /**
     * A reference from one resource to another.
     */
    originalPrescription?: Reference;
    /**
     * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
     */
    payee?: Claim_Payee;
    /**
     * A reference from one resource to another.
     */
    referral?: Reference;
    /**
     * A reference from one resource to another.
     */
    facility?: Reference;
    /**
     * The members of the team who provided the products and services.
     */
    careTeam?: Claim_CareTeam[];
    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    supportingInfo?: Claim_SupportingInfo[];
    /**
     * Information about diagnoses relevant to the claim items.
     */
    diagnosis?: Claim_Diagnosis[];
    /**
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    procedure?: Claim_Procedure[];
    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    insurance: Claim_Insurance[];
    /**
     * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
     */
    accident?: Claim_Accident;
    /**
     * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
     */
    item?: Claim_Item[];
    /**
     * An amount of economic utility in some recognized currency.
     */
    total?: Money;
}

export interface Claim_Related {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    claim?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    relationship?: CodeableConcept;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    reference?: Identifier;
}

export interface Claim_Payee {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    party?: Reference;
}

export interface Claim_CareTeam {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A reference from one resource to another.
     */
    provider: Reference;
    /**
     * Value of "true" or "false"
     */
    responsible?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    qualification?: CodeableConcept;
}

export interface Claim_SupportingInfo {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * The date when or period to which this information refers.
     */
    timingDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timingPeriod?: Period;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueBoolean?: boolean;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueString?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reason?: CodeableConcept;
}

export interface Claim_Diagnosis {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    diagnosisReference?: Reference;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    onAdmission?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    packageCode?: CodeableConcept;
}

export interface Claim_Procedure {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    procedureCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    procedureReference?: Reference;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}

export interface Claim_Insurance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * Value of "true" or "false"
     */
    focal?: boolean;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A reference from one resource to another.
     */
    coverage: Reference;
    /**
     * A sequence of Unicode characters
     */
    businessArrangement?: string;
    /**
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     */
    preAuthRef?: string[];
    /**
     * A reference from one resource to another.
     */
    claimResponse?: Reference;
}

export interface Claim_Accident {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    date?: date;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    locationAddress?: Address;
    /**
     * A reference from one resource to another.
     */
    locationReference?: Reference;
}

export interface Claim_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * CareTeam members related to this service or product.
     */
    careTeamSequence?: positiveInt[];
    /**
     * Diagnosis applicable for this service or product.
     */
    diagnosisSequence?: positiveInt[];
    /**
     * Procedures applicable for this service or product.
     */
    procedureSequence?: positiveInt[];
    /**
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    informationSequence?: positiveInt[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    revenue?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    servicedPeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    locationAddress?: Address;
    /**
     * A reference from one resource to another.
     */
    locationReference?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * The Encounters during which this Claim was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference[];
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    detail?: Claim_Detail[];
}

export interface Claim_Detail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    revenue?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    subDetail?: Claim_SubDetail[];
}

export interface Claim_SubDetail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    revenue?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}

export interface ClaimResponse {
    /**
     * This is a ClaimResponse resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this claim response.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subType?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    use?: code;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    insurer: Reference;
    /**
     * A reference from one resource to another.
     */
    requestor?: Reference;
    /**
     * A reference from one resource to another.
     */
    request?: Reference;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    outcome?: code;
    /**
     * A sequence of Unicode characters
     */
    disposition?: string;
    /**
     * A sequence of Unicode characters
     */
    preAuthRef?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    preAuthPeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    payeeType?: CodeableConcept;
    /**
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    item?: ClaimResponse_Item[];
    /**
     * The first-tier service adjudications for payor added product or service lines.
     */
    addItem?: ClaimResponse_AddItem[];
    /**
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    adjudication?: ClaimResponse_Adjudication[];
    /**
     * Categorized monetary totals for the adjudication.
     */
    total?: ClaimResponse_Total[];
    /**
     * This resource provides the adjudication details from the processing of a Claim resource.
     */
    payment?: ClaimResponse_Payment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fundsReserve?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    formCode?: CodeableConcept;
    /**
     * For referring to data content defined in other formats.
     */
    form?: Attachment;
    /**
     * A note that describes or explains adjudication results in a human readable form.
     */
    processNote?: ClaimResponse_ProcessNote[];
    /**
     * Request for additional supporting or authorizing information.
     */
    communicationRequest?: Reference[];
    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    insurance?: ClaimResponse_Insurance[];
    /**
     * Errors encountered during the processing of the adjudication.
     */
    error?: ClaimResponse_Error[];
}

export interface ClaimResponse_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    itemSequence?: positiveInt;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
     */
    adjudication: ClaimResponse_Adjudication[];
    /**
     * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    detail?: ClaimResponse_Detail[];
}

export interface ClaimResponse_Adjudication {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reason?: CodeableConcept;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount?: Money;
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
}

export interface ClaimResponse_Detail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    detailSequence?: positiveInt;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponse_Adjudication[];
    /**
     * A sub-detail adjudication of a simple product or service.
     */
    subDetail?: ClaimResponse_SubDetail[];
}

export interface ClaimResponse_SubDetail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    subDetailSequence?: positiveInt;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication?: ClaimResponse_Adjudication[];
}

export interface ClaimResponse_AddItem {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Claim items which this service line is intended to replace.
     */
    itemSequence?: positiveInt[];
    /**
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    detailSequence?: positiveInt[];
    /**
     * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
     */
    subdetailSequence?: positiveInt[];
    /**
     * The providers who are authorized for the services rendered to the patient.
     */
    provider?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    servicedPeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    locationAddress?: Address;
    /**
     * A reference from one resource to another.
     */
    locationReference?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponse_Adjudication[];
    /**
     * The second-tier service adjudications for payor added services.
     */
    detail?: ClaimResponse_Detail1[];
}

export interface ClaimResponse_Detail1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponse_Adjudication[];
    /**
     * The third-tier service adjudications for payor added services.
     */
    subDetail?: ClaimResponse_SubDetail1[];
}

export interface ClaimResponse_SubDetail1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponse_Adjudication[];
}

export interface ClaimResponse_Total {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount: Money;
}

export interface ClaimResponse_Payment {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * An amount of economic utility in some recognized currency.
     */
    adjustment?: Money;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    date?: date;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount: Money;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
}

export interface ClaimResponse_ProcessNote {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    number?: positiveInt;
    /**
     * The business purpose of the note text.
     */
    type?: "display" | "print" | "printoper";
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    language?: CodeableConcept;
}

export interface ClaimResponse_Insurance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * Value of "true" or "false"
     */
    focal?: boolean;
    /**
     * A reference from one resource to another.
     */
    coverage: Reference;
    /**
     * A sequence of Unicode characters
     */
    businessArrangement?: string;
    /**
     * A reference from one resource to another.
     */
    claimResponse?: Reference;
}

export interface ClaimResponse_Error {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    itemSequence?: positiveInt;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    detailSequence?: positiveInt;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    subDetailSequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
}

export interface ClinicalImpression {
    /**
     * This is a ClinicalImpression resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * The point in time or period over which the subject was assessed.
     */
    effectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    assessor?: Reference;
    /**
     * A reference from one resource to another.
     */
    previous?: Reference;
    /**
     * A list of the relevant problems/conditions for a patient.
     */
    problem?: Reference[];
    /**
     * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
     */
    investigation?: ClinicalImpression_Investigation[];
    /**
     * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
     */
    protocol?: uri[];
    /**
     * A sequence of Unicode characters
     */
    summary?: string;
    /**
     * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
     */
    finding?: ClinicalImpression_Finding[];
    /**
     * Estimate of likely outcome.
     */
    prognosisCodeableConcept?: CodeableConcept[];
    /**
     * RiskAssessment expressing likely outcome.
     */
    prognosisReference?: Reference[];
    /**
     * Information supporting the clinical impression.
     */
    supportingInfo?: Reference[];
    /**
     * Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
     */
    note?: Annotation[];
}

export interface ClinicalImpression_Investigation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A record of a specific investigation that was undertaken.
     */
    item?: Reference[];
}

export interface ClinicalImpression_Finding {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    itemReference?: Reference;
    /**
     * A sequence of Unicode characters
     */
    basis?: string;
}

export interface CodeSystem {
    /**
     * This is a CodeSystem resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The date (and optionally time) when the code system resource was created or revised.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the code system is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * Value of "true" or "false"
     */
    caseSensitive?: boolean;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    valueSet?: canonical;
    /**
     * The meaning of the hierarchy of concepts as represented in this resource.
     */
    hierarchyMeaning?: "grouped-by" | "is-a" | "part-of" | "classified-with";
    /**
     * Value of "true" or "false"
     */
    compositional?: boolean;
    /**
     * Value of "true" or "false"
     */
    versionNeeded?: boolean;
    /**
     * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
     */
    content?: "not-present" | "example" | "fragment" | "complete" | "supplement";
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    supplements?: canonical;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    count?: unsignedInt;
    /**
     * A filter that can be used in a value set compose statement when selecting concepts using a filter.
     */
    filter?: CodeSystem_Filter[];
    /**
     * A property defines an additional slot through which additional information can be provided about a concept.
     */
    property?: CodeSystem_Property[];
    /**
     * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
     */
    concept?: CodeSystem_Concept[];
}

export interface CodeSystem_Filter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A list of operators that can be used with the filter.
     */
    operator?: code[];
    /**
     * A sequence of Unicode characters
     */
    value?: string;
}

export interface CodeSystem_Property {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * String of characters used to identify a name or a resource
     */
    uri?: uri;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
     */
    type?: "code" | "Coding" | "string" | "integer" | "boolean" | "dateTime" | "decimal";
}

export interface CodeSystem_Concept {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * A sequence of Unicode characters
     */
    definition?: string;
    /**
     * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
     */
    designation?: CodeSystem_Designation[];
    /**
     * A property value for this concept.
     */
    property?: CodeSystem_Property1[];
    /**
     * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
     */
    concept?: CodeSystem_Concept[];
}

export interface CodeSystem_Designation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A reference to a code defined by a terminology system.
     */
    use?: Coding;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
}

export interface CodeSystem_Property1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * The value of this property.
     */
    valueCode?: string;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * The value of this property.
     */
    valueString?: string;
    /**
     * The value of this property.
     */
    valueInteger?: string;
    /**
     * The value of this property.
     */
    valueBoolean?: boolean;
    /**
     * The value of this property.
     */
    valueDateTime?: string;
    /**
     * The value of this property.
     */
    valueDecimal?: string;
}

export interface Communication {
    /**
     * This is a Communication resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     */
    instantiatesUri?: uri[];
    /**
     * An order, proposal or plan fulfilled in whole or in part by this Communication.
     */
    basedOn?: Reference[];
    /**
     * Part of this action.
     */
    partOf?: Reference[];
    /**
     * Prior communication that this communication is in response to.
     */
    inResponseTo?: Reference[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * The type of message conveyed such as alert, notification, reminder, instruction, etc.
     */
    category?: CodeableConcept[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * A channel that was used for this communication (e.g. email, fax).
     */
    medium?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    topic?: CodeableConcept;
    /**
     * Other resources that pertain to this communication and to which this communication should be associated.
     */
    about?: Reference[];
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    sent?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    received?: dateTime;
    /**
     * The entity (e.g. person, organization, clinical information system, care team or device) which was the target of the communication. If receipts need to be tracked by an individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails confirmed received by a particular time).
     */
    recipient?: Reference[];
    /**
     * A reference from one resource to another.
     */
    sender?: Reference;
    /**
     * The reason or justification for the communication.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this communication.
     */
    reasonReference?: Reference[];
    /**
     * Text, attachment(s), or resource(s) that was communicated to the recipient.
     */
    payload?: Communication_Payload[];
    /**
     * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
     */
    note?: Annotation[];
}

export interface Communication_Payload {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A communicated content (or for multi-part communications, one portion of the communication).
     */
    contentString?: string;
    /**
     * For referring to data content defined in other formats.
     */
    contentAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    contentReference?: Reference;
}

export interface CommunicationRequest {
    /**
     * This is a CommunicationRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A plan or proposal that is fulfilled in whole or in part by this request.
     */
    basedOn?: Reference[];
    /**
     * Completed or terminated request(s) whose function is taken by this new request.
     */
    replaces?: Reference[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    groupIdentifier?: Identifier;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * The type of message to be sent such as alert, notification, reminder, instruction, etc.
     */
    category?: CodeableConcept[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * Value of "true" or "false"
     */
    doNotPerform?: boolean;
    /**
     * A channel that was used for this communication (e.g. email, fax).
     */
    medium?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * Other resources that pertain to this communication request and to which this communication request should be associated.
     */
    about?: Reference[];
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * Text, attachment(s), or resource(s) to be communicated to the recipient.
     */
    payload?: CommunicationRequest_Payload[];
    /**
     * The time when this communication is to occur.
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authoredOn?: dateTime;
    /**
     * A reference from one resource to another.
     */
    requester?: Reference;
    /**
     * The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
     */
    recipient?: Reference[];
    /**
     * A reference from one resource to another.
     */
    sender?: Reference;
    /**
     * Describes why the request is being made in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this request.
     */
    reasonReference?: Reference[];
    /**
     * Comments made about the request by the requester, sender, recipient, subject or other participants.
     */
    note?: Annotation[];
}

export interface CommunicationRequest_Payload {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The communicated content (or for multi-part communications, one portion of the communication).
     */
    contentString?: string;
    /**
     * For referring to data content defined in other formats.
     */
    contentAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    contentReference?: Reference;
}

export interface CompartmentDefinition {
    /**
     * This is a CompartmentDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The status of this compartment definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * Which compartment this definition describes.
     */
    code?: "Patient" | "Encounter" | "RelatedPerson" | "Practitioner" | "Device";
    /**
     * Value of "true" or "false"
     */
    search?: boolean;
    /**
     * Information about how a resource is related to the compartment.
     */
    resource?: CompartmentDefinition_Resource[];
}

export interface CompartmentDefinition_Resource {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
     */
    param?: string[];
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
}

export interface Composition {
    /**
     * This is a Composition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
     */
    status?: "preliminary" | "final" | "amended" | "entered-in-error";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
     */
    category?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
     */
    author: Reference[];
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    confidentiality?: code;
    /**
     * A participant who has attested to the accuracy of the composition/document.
     */
    attester?: Composition_Attester[];
    /**
     * A reference from one resource to another.
     */
    custodian?: Reference;
    /**
     * Relationships that this composition has with other compositions or documents that already exist.
     */
    relatesTo?: Composition_RelatesTo[];
    /**
     * The clinical service, such as a colonoscopy or an appendectomy, being documented.
     */
    event?: Composition_Event[];
    /**
     * The root of the sections that make up the composition.
     */
    section?: Composition_Section[];
}

export interface Composition_Attester {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of attestation the authenticator offers.
     */
    mode?: "personal" | "professional" | "legal" | "official";
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    time?: dateTime;
    /**
     * A reference from one resource to another.
     */
    party?: Reference;
}

export interface Composition_RelatesTo {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    targetIdentifier?: Identifier;
    /**
     * A reference from one resource to another.
     */
    targetReference?: Reference;
}

export interface Composition_Event {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
     */
    code?: CodeableConcept[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
     */
    detail?: Reference[];
}

export interface Composition_Section {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * Identifies who is responsible for the information in this section, not necessarily who typed it in.
     */
    author?: Reference[];
    /**
     * A reference from one resource to another.
     */
    focus?: Reference;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    mode?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    orderedBy?: CodeableConcept;
    /**
     * A reference to the actual resource from which the narrative in the section is derived.
     */
    entry?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    emptyReason?: CodeableConcept;
    /**
     * A nested sub-section within this section.
     */
    section?: Composition_Section[];
}

export interface ConceptMap {
    /**
     * This is a ConceptMap resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this concept map. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the concept map is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
     */
    sourceUri?: string;
    /**
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
     */
    sourceCanonical?: string;
    /**
     * The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
     */
    targetUri?: string;
    /**
     * The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
     */
    targetCanonical?: string;
    /**
     * A group of mappings that all have the same source and target system.
     */
    group?: ConceptMap_Group[];
}

export interface ConceptMap_Group {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    source?: uri;
    /**
     * A sequence of Unicode characters
     */
    sourceVersion?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    target?: uri;
    /**
     * A sequence of Unicode characters
     */
    targetVersion?: string;
    /**
     * Mappings for an individual concept in the source to one or more concepts in the target.
     */
    element: ConceptMap_Element[];
    /**
     * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
     */
    unmapped?: ConceptMap_Unmapped;
}

export interface ConceptMap_Element {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * A concept from the target value set that this concept maps to.
     */
    target?: ConceptMap_Target[];
}

export interface ConceptMap_Target {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
     */
    equivalence?: "relatedto" | "equivalent" | "equal" | "wider" | "subsumes" | "narrower" | "specializes" | "inexact" | "unmatched" | "disjoint";
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
     */
    dependsOn?: ConceptMap_DependsOn[];
    /**
     * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
     */
    product?: ConceptMap_DependsOn[];
}

export interface ConceptMap_DependsOn {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    property?: uri;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    system?: canonical;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
}

export interface ConceptMap_Unmapped {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
     */
    mode?: "provided" | "fixed" | "other-map";
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    url?: canonical;
}

export interface Condition {
    /**
     * This is a Condition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    clinicalStatus?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    verificationStatus?: CodeableConcept;
    /**
     * A category assigned to the condition.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    severity?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * The anatomical location where this condition manifests itself.
     */
    bodySite?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetDateTime?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    onsetAge?: Age;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    onsetPeriod?: Period;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    onsetRange?: Range;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetString?: string;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
     */
    abatementDateTime?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    abatementAge?: Age;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    abatementPeriod?: Period;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    abatementRange?: Range;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
     */
    abatementString?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    recordedDate?: dateTime;
    /**
     * A reference from one resource to another.
     */
    recorder?: Reference;
    /**
     * A reference from one resource to another.
     */
    asserter?: Reference;
    /**
     * Clinical stage or grade of a condition. May include formal severity assessments.
     */
    stage?: Condition_Stage[];
    /**
     * Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
     */
    evidence?: Condition_Evidence[];
    /**
     * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
     */
    note?: Annotation[];
}

export interface Condition_Stage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    summary?: CodeableConcept;
    /**
     * Reference to a formal record of the evidence on which the staging assessment is based.
     */
    assessment?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
}

export interface Condition_Evidence {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A manifestation or symptom that led to the recording of this condition.
     */
    code?: CodeableConcept[];
    /**
     * Links to other relevant information, including pathology reports.
     */
    detail?: Reference[];
}

export interface Consent {
    /**
     * This is a Consent resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for this copy of the Consent Statement.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current state of this consent.
     */
    status?: "draft" | "proposed" | "active" | "rejected" | "inactive" | "entered-in-error";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    scope: CodeableConcept;
    /**
     * A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
     */
    category: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    patient?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    dateTime?: dateTime;
    /**
     * Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
     */
    performer?: Reference[];
    /**
     * The organization that manages the consent, and the framework within which it is executed.
     */
    organization?: Reference[];
    /**
     * For referring to data content defined in other formats.
     */
    sourceAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    sourceReference?: Reference;
    /**
     * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
     */
    policy?: Consent_Policy[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    policyRule?: CodeableConcept;
    /**
     * Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
     */
    verification?: Consent_Verification[];
    /**
     * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
     */
    provision?: Consent_Provision;
}

export interface Consent_Policy {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    authority?: uri;
    /**
     * String of characters used to identify a name or a resource
     */
    uri?: uri;
}

export interface Consent_Verification {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    verified?: boolean;
    /**
     * A reference from one resource to another.
     */
    verifiedWith?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    verificationDate?: dateTime;
}

export interface Consent_Provision {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root rule, required in all nested rules.
     */
    type?: "deny" | "permit";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
     */
    actor?: Consent_Actor[];
    /**
     * Actions controlled by this Rule.
     */
    action?: CodeableConcept[];
    /**
     * A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
     */
    securityLabel?: Coding[];
    /**
     * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this rule.
     */
    purpose?: Coding[];
    /**
     * The class of information covered by this rule. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
     */
    class?: Coding[];
    /**
     * If this code is found in an instance, then the rule applies.
     */
    code?: CodeableConcept[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    dataPeriod?: Period;
    /**
     * The resources controlled by this rule if specific resources are referenced.
     */
    data?: Consent_Data[];
    /**
     * Rules which provide exceptions to the base rule or subrules.
     */
    provision?: Consent_Provision[];
}

export interface Consent_Actor {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    reference: Reference;
}

export interface Consent_Data {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * How the resource reference is interpreted when testing consent restrictions.
     */
    meaning?: "instance" | "related" | "dependents" | "authoredby";
    /**
     * A reference from one resource to another.
     */
    reference: Reference;
}

export interface Contract {
    /**
     * This is a Contract resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for this Contract or a derivative that references a Source Contract.
     */
    identifier?: Identifier[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    legalState?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    instantiatesCanonical?: Reference;
    /**
     * String of characters used to identify a name or a resource
     */
    instantiatesUri?: uri;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    contentDerivative?: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    issued?: dateTime;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    applies?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    expirationType?: CodeableConcept;
    /**
     * The target entity impacted by or of interest to parties to the agreement.
     */
    subject?: Reference[];
    /**
     * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
     */
    authority?: Reference[];
    /**
     * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
     */
    domain?: Reference[];
    /**
     * Sites in which the contract is complied with,  exercised, or in force.
     */
    site?: Reference[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
     */
    alias?: string[];
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    scope?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    topicReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
     */
    subType?: CodeableConcept[];
    /**
     * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
     */
    contentDefinition?: Contract_ContentDefinition;
    /**
     * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
     */
    term?: Contract_Term[];
    /**
     * Information that may be needed by/relevant to the performer in their execution of this term action.
     */
    supportingInfo?: Reference[];
    /**
     * Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
     */
    relevantHistory?: Reference[];
    /**
     * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
     */
    signer?: Contract_Signer[];
    /**
     * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
     */
    friendly?: Contract_Friendly[];
    /**
     * List of Legal expressions or representations of this Contract.
     */
    legal?: Contract_Legal[];
    /**
     * List of Computable Policy Rule Language Representations of this Contract.
     */
    rule?: Contract_Rule[];
    /**
     * For referring to data content defined in other formats.
     */
    legallyBindingAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    legallyBindingReference?: Reference;
}

export interface Contract_ContentDefinition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subType?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    publisher?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    publicationDate?: dateTime;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    publicationStatus?: code;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
}

export interface Contract_Term {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    issued?: dateTime;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    applies?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    topicReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subType?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
     */
    securityLabel?: Contract_SecurityLabel[];
    /**
     * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
     */
    offer: Contract_Offer;
    /**
     * Contract Term Asset List.
     */
    asset?: Contract_Asset[];
    /**
     * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
     */
    action?: Contract_Action[];
    /**
     * Nested group of Contract Provisions.
     */
    group?: Contract_Term[];
}

export interface Contract_SecurityLabel {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Number used to link this term or term element to the applicable Security Label.
     */
    number?: unsignedInt[];
    /**
     * A reference to a code defined by a terminology system.
     */
    classification: Coding;
    /**
     * Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
     */
    category?: Coding[];
    /**
     * Security label privacy tag that species the manner in which term and/or term elements are to be protected.
     */
    control?: Coding[];
}

export interface Contract_Offer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for this particular Contract Provision.
     */
    identifier?: Identifier[];
    /**
     * Offer Recipient.
     */
    party?: Contract_Party[];
    /**
     * A reference from one resource to another.
     */
    topic?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    decision?: CodeableConcept;
    /**
     * How the decision about a Contract was conveyed.
     */
    decisionMode?: CodeableConcept[];
    /**
     * Response to offer text.
     */
    answer?: Contract_Answer[];
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * The id of the clause or question text of the offer in the referenced questionnaire/response.
     */
    linkId?: string[];
    /**
     * Security labels that protects the offer.
     */
    securityLabelNumber?: unsignedInt[];
}

export interface Contract_Party {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Participant in the offer.
     */
    reference: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role: CodeableConcept;
}

export interface Contract_Answer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueBoolean?: boolean;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDecimal?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueInteger?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDate?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDateTime?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueTime?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueString?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueUri?: string;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
}

export interface Contract_Asset {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    scope?: CodeableConcept;
    /**
     * Target entity type about which the term may be concerned.
     */
    type?: CodeableConcept[];
    /**
     * Associated entities.
     */
    typeReference?: Reference[];
    /**
     * May be a subtype or part of an offered asset.
     */
    subtype?: CodeableConcept[];
    /**
     * A reference to a code defined by a terminology system.
     */
    relationship?: Coding;
    /**
     * Circumstance of the asset.
     */
    context?: Contract_Context[];
    /**
     * A sequence of Unicode characters
     */
    condition?: string;
    /**
     * Type of Asset availability for use or ownership.
     */
    periodType?: CodeableConcept[];
    /**
     * Asset relevant contractual time period.
     */
    period?: Period[];
    /**
     * Time period of asset use.
     */
    usePeriod?: Period[];
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * Response to assets.
     */
    answer?: Contract_Answer[];
    /**
     * Security labels that protects the asset.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Contract Valued Item List.
     */
    valuedItem?: Contract_ValuedItem[];
}

export interface Contract_Context {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    reference?: Reference;
    /**
     * Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
     */
    code?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    text?: string;
}

export interface Contract_ValuedItem {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    entityCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    entityReference?: Reference;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    effectiveTime?: dateTime;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * A rational number with implicit precision
     */
    points?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * A sequence of Unicode characters
     */
    payment?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    paymentDate?: dateTime;
    /**
     * A reference from one resource to another.
     */
    responsible?: Reference;
    /**
     * A reference from one resource to another.
     */
    recipient?: Reference;
    /**
     * Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * A set of security labels that define which terms are controlled by this condition.
     */
    securityLabelNumber?: unsignedInt[];
}

export interface Contract_Action {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    doNotPerform?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Entity of the action.
     */
    subject?: Contract_Subject[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    intent: CodeableConcept;
    /**
     * Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    context?: Reference;
    /**
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    contextLinkId?: string[];
    /**
     * When action happens.
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    occurrenceTiming?: Timing;
    /**
     * Who or what initiated the action and has responsibility for its activation.
     */
    requester?: Reference[];
    /**
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    requesterLinkId?: string[];
    /**
     * The type of individual that is desired or required to perform or not perform the action.
     */
    performerType?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    performerRole?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    performer?: Reference;
    /**
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    performerLinkId?: string[];
    /**
     * Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies permitting or not permitting this action.
     */
    reasonReference?: Reference[];
    /**
     * Describes why the action is to be performed or not performed in textual form.
     */
    reason?: string[];
    /**
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    reasonLinkId?: string[];
    /**
     * Comments made about the term action made by the requester, performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Security labels that protects the action.
     */
    securityLabelNumber?: unsignedInt[];
}

export interface Contract_Subject {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The entity the action is performed or not performed on or for.
     */
    reference: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
}

export interface Contract_Signer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    type: Coding;
    /**
     * A reference from one resource to another.
     */
    party: Reference;
    /**
     * Legally binding Contract DSIG signature contents in Base64.
     */
    signature: Signature[];
}

export interface Signature {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
     */
    type: Coding[];
    /**
     * An instant in time - known at least to the second
     */
    when?: instant;
    /**
     * A reference from one resource to another.
     */
    who: Reference;
    /**
     * A reference from one resource to another.
     */
    onBehalfOf?: Reference;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    targetFormat?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    sigFormat?: code;
    /**
     * A stream of bytes
     */
    data?: base64Binary;
}

export interface Contract_Friendly {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * For referring to data content defined in other formats.
     */
    contentAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    contentReference?: Reference;
}

export interface Contract_Legal {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * For referring to data content defined in other formats.
     */
    contentAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    contentReference?: Reference;
}

export interface Contract_Rule {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * For referring to data content defined in other formats.
     */
    contentAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    contentReference?: Reference;
}

export interface Coverage {
    /**
     * This is a Coverage resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this coverage.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    policyHolder?: Reference;
    /**
     * A reference from one resource to another.
     */
    subscriber?: Reference;
    /**
     * A sequence of Unicode characters
     */
    subscriberId?: string;
    /**
     * A reference from one resource to another.
     */
    beneficiary: Reference;
    /**
     * A sequence of Unicode characters
     */
    dependent?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    relationship?: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements.
     */
    payor: Reference[];
    /**
     * A suite of underwriter specific classifiers.
     */
    class?: Coverage_Class[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    order?: positiveInt;
    /**
     * A sequence of Unicode characters
     */
    network?: string;
    /**
     * A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
     */
    costToBeneficiary?: Coverage_CostToBeneficiary[];
    /**
     * Value of "true" or "false"
     */
    subrogation?: boolean;
    /**
     * The policy(s) which constitute this insurance coverage.
     */
    contract?: Reference[];
}

export interface Coverage_Class {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
}

export interface Coverage_CostToBeneficiary {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    valueMoney?: Money;
    /**
     * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
     */
    exception?: Coverage_Exception[];
}

export interface Coverage_Exception {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface CoverageEligibilityRequest {
    /**
     * This is a CoverageEligibilityRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    priority?: CodeableConcept;
    /**
     * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
     */
    purpose?: ("auth-requirements" | "benefits" | "discovery" | "validation")[];
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    servicedPeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    enterer?: Reference;
    /**
     * A reference from one resource to another.
     */
    provider?: Reference;
    /**
     * A reference from one resource to another.
     */
    insurer: Reference;
    /**
     * A reference from one resource to another.
     */
    facility?: Reference;
    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    supportingInfo?: CoverageEligibilityRequest_SupportingInfo[];
    /**
     * Financial instruments for reimbursement for the health care products and services.
     */
    insurance?: CoverageEligibilityRequest_Insurance[];
    /**
     * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
     */
    item?: CoverageEligibilityRequest_Item[];
}

export interface CoverageEligibilityRequest_SupportingInfo {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A reference from one resource to another.
     */
    information: Reference;
    /**
     * Value of "true" or "false"
     */
    appliesToAll?: boolean;
}

export interface CoverageEligibilityRequest_Insurance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    focal?: boolean;
    /**
     * A reference from one resource to another.
     */
    coverage: Reference;
    /**
     * A sequence of Unicode characters
     */
    businessArrangement?: string;
}

export interface CoverageEligibilityRequest_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Exceptions, special conditions and supporting information applicable for this service or product line.
     */
    supportingInfoSequence?: positiveInt[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService?: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    provider?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A reference from one resource to another.
     */
    facility?: Reference;
    /**
     * Patient diagnosis for which care is sought.
     */
    diagnosis?: CoverageEligibilityRequest_Diagnosis[];
    /**
     * The plan/proposal/order describing the proposed service in detail.
     */
    detail?: Reference[];
}

export interface CoverageEligibilityRequest_Diagnosis {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    diagnosisReference?: Reference;
}

export interface CoverageEligibilityResponse {
    /**
     * This is a CoverageEligibilityResponse resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
     */
    purpose?: ("auth-requirements" | "benefits" | "discovery" | "validation")[];
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    servicedPeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    requestor?: Reference;
    /**
     * A reference from one resource to another.
     */
    request: Reference;
    /**
     * The outcome of the request processing.
     */
    outcome?: "queued" | "complete" | "error" | "partial";
    /**
     * A sequence of Unicode characters
     */
    disposition?: string;
    /**
     * A reference from one resource to another.
     */
    insurer: Reference;
    /**
     * Financial instruments for reimbursement for the health care products and services.
     */
    insurance?: CoverageEligibilityResponse_Insurance[];
    /**
     * A sequence of Unicode characters
     */
    preAuthRef?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    form?: CodeableConcept;
    /**
     * Errors encountered during the processing of the request.
     */
    error?: CoverageEligibilityResponse_Error[];
}

export interface CoverageEligibilityResponse_Insurance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    coverage: Reference;
    /**
     * Value of "true" or "false"
     */
    inforce?: boolean;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    benefitPeriod?: Period;
    /**
     * Benefits and optionally current balances, and authorization details by category or service.
     */
    item?: CoverageEligibilityResponse_Item[];
}

export interface CoverageEligibilityResponse_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService?: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    provider?: Reference;
    /**
     * Value of "true" or "false"
     */
    excluded?: boolean;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    network?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unit?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    term?: CodeableConcept;
    /**
     * Benefits used to date.
     */
    benefit?: CoverageEligibilityResponse_Benefit[];
    /**
     * Value of "true" or "false"
     */
    authorizationRequired?: boolean;
    /**
     * Codes or comments regarding information or actions associated with the preauthorization.
     */
    authorizationSupporting?: CodeableConcept[];
    /**
     * String of characters used to identify a name or a resource
     */
    authorizationUrl?: uri;
}

export interface CoverageEligibilityResponse_Benefit {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedUnsignedInt?: string;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedString?: string;
    /**
     * An amount of economic utility in some recognized currency.
     */
    allowedMoney?: Money;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedUnsignedInt?: string;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedString?: string;
    /**
     * An amount of economic utility in some recognized currency.
     */
    usedMoney?: Money;
}

export interface CoverageEligibilityResponse_Error {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
}

export interface DetectedIssue {
    /**
     * This is a DetectedIssue resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier associated with the detected issue record.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
     */
    severity?: "high" | "moderate" | "low";
    /**
     * A reference from one resource to another.
     */
    patient?: Reference;
    /**
     * The date or period when the detected issue was initially identified.
     */
    identifiedDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    identifiedPeriod?: Period;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
     */
    implicated?: Reference[];
    /**
     * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
     */
    evidence?: DetectedIssue_Evidence[];
    /**
     * A sequence of Unicode characters
     */
    detail?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    reference?: uri;
    /**
     * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
     */
    mitigation?: DetectedIssue_Mitigation[];
}

export interface DetectedIssue_Evidence {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A manifestation that led to the recording of this detected issue.
     */
    code?: CodeableConcept[];
    /**
     * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
     */
    detail?: Reference[];
}

export interface DetectedIssue_Mitigation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    action: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
}

export interface Device {
    /**
     * This is a Device resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
     */
    identifier?: Identifier[];
    /**
     * A reference from one resource to another.
     */
    definition?: Reference;
    /**
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    udiCarrier?: Device_UdiCarrier[];
    /**
     * Status of the Device availability.
     */
    status?: "active" | "inactive" | "entered-in-error" | "unknown";
    /**
     * Reason for the dtatus of the Device availability.
     */
    statusReason?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    distinctIdentifier?: string;
    /**
     * A sequence of Unicode characters
     */
    manufacturer?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    manufactureDate?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    expirationDate?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    lotNumber?: string;
    /**
     * A sequence of Unicode characters
     */
    serialNumber?: string;
    /**
     * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
     */
    deviceName?: Device_DeviceName[];
    /**
     * A sequence of Unicode characters
     */
    modelNumber?: string;
    /**
     * A sequence of Unicode characters
     */
    partNumber?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
     */
    specialization?: Device_Specialization[];
    /**
     * The actual design of the device or software version running on the device.
     */
    version?: Device_Version[];
    /**
     * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
     */
    property?: Device_Property[];
    /**
     * A reference from one resource to another.
     */
    patient?: Reference;
    /**
     * A reference from one resource to another.
     */
    owner?: Reference;
    /**
     * Contact details for an organization or a particular human that is responsible for the device.
     */
    contact?: ContactPoint[];
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    note?: Annotation[];
    /**
     * Provides additional safety characteristics about a medical device.  For example devices containing latex.
     */
    safety?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    parent?: Reference;
}

export interface Device_UdiCarrier {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    deviceIdentifier?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    issuer?: uri;
    /**
     * String of characters used to identify a name or a resource
     */
    jurisdiction?: uri;
    /**
     * A stream of bytes
     */
    carrierAIDC?: base64Binary;
    /**
     * A sequence of Unicode characters
     */
    carrierHRF?: string;
    /**
     * A coded entry to indicate how the data was entered.
     */
    entryType?: "barcode" | "rfid" | "manual" | "card" | "self-reported" | "unknown";
}

export interface Device_DeviceName {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The type of deviceName.
     * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type?: "udi-label-name" | "user-friendly-name" | "patient-reported-name" | "manufacturer-name" | "model-name" | "other";
}

export interface Device_Specialization {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    systemType: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
}

export interface Device_Version {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    component?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
}

export interface Device_Property {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Property value as a quantity.
     */
    valueQuantity?: Quantity[];
    /**
     * Property value as a code, e.g., NTP4 (synced to NTP).
     */
    valueCode?: CodeableConcept[];
}

export interface DeviceDefinition {
    /**
     * This is a DeviceDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
     */
    identifier?: Identifier[];
    /**
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    udiDeviceIdentifier?: DeviceDefinition_UdiDeviceIdentifier[];
    /**
     * A name of the manufacturer.
     */
    manufacturerString?: string;
    /**
     * A reference from one resource to another.
     */
    manufacturerReference?: Reference;
    /**
     * A name given to the device to identify it.
     */
    deviceName?: DeviceDefinition_DeviceName[];
    /**
     * A sequence of Unicode characters
     */
    modelNumber?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
     */
    specialization?: DeviceDefinition_Specialization[];
    /**
     * The available versions of the device, e.g., software versions.
     */
    version?: string[];
    /**
     * Safety characteristics of the device.
     */
    safety?: CodeableConcept[];
    /**
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: ProductShelfLife[];
    /**
     * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
     */
    physicalCharacteristics?: ProdCharacteristic;
    /**
     * Language code for the human-readable text strings produced by the device (all supported).
     */
    languageCode?: CodeableConcept[];
    /**
     * Device capabilities.
     */
    capability?: DeviceDefinition_Capability[];
    /**
     * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
     */
    property?: DeviceDefinition_Property[];
    /**
     * A reference from one resource to another.
     */
    owner?: Reference;
    /**
     * Contact details for an organization or a particular human that is responsible for the device.
     */
    contact?: ContactPoint[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * String of characters used to identify a name or a resource
     */
    onlineInformation?: uri;
    /**
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    note?: Annotation[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A reference from one resource to another.
     */
    parentDevice?: Reference;
    /**
     * A substance used to create the material(s) of which the device is made.
     */
    material?: DeviceDefinition_Material[];
    /**
     * What kind of device or device system this is.
     */
    classification?: DeviceDefinition_Classification[];
}

export interface DeviceDefinition_UdiDeviceIdentifier {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    deviceIdentifier?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    issuer?: uri;
    /**
     * String of characters used to identify a name or a resource
     */
    jurisdiction?: uri;
}

export interface DeviceDefinition_DeviceName {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The type of deviceName.
     * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type?: "udi-label-name" | "user-friendly-name" | "patient-reported-name" | "manufacturer-name" | "model-name" | "other";
}

export interface DeviceDefinition_Specialization {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    systemType?: string;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
}

export interface ProductShelfLife {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    period: Quantity;
    /**
     * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
     */
    specialPrecautionsForStorage?: CodeableConcept[];
}

export interface ProdCharacteristic {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    height?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    width?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    depth?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    weight?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    nominalVolume?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    externalDiameter?: Quantity;
    /**
     * A sequence of Unicode characters
     */
    shape?: string;
    /**
     * Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    color?: string[];
    /**
     * Where applicable, the imprint can be specified as text.
     */
    imprint?: string[];
    /**
     * Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
     */
    image?: Attachment[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    scoring?: CodeableConcept;
}

export interface DeviceDefinition_Capability {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Description of capability.
     */
    description?: CodeableConcept[];
}

export interface DeviceDefinition_Property {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Property value as a quantity.
     */
    valueQuantity?: Quantity[];
    /**
     * Property value as a code, e.g., NTP4 (synced to NTP).
     */
    valueCode?: CodeableConcept[];
}

export interface DeviceDefinition_Material {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    substance: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    alternate?: boolean;
    /**
     * Value of "true" or "false"
     */
    allergenicIndicator?: boolean;
}

export interface DeviceDefinition_Classification {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    justification?: RelatedArtifact;
}

export interface DeviceMetric {
    /**
     * This is a DeviceMetric resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique instance identifiers assigned to a device by the device or gateway software, manufacturers, other organizations or owners. For example: handle ID.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unit?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    source?: Reference;
    /**
     * A reference from one resource to another.
     */
    parent?: Reference;
    /**
     * Indicates current operational state of the device. For example: On, Off, Standby, etc.
     */
    operationalStatus?: "on" | "off" | "standby" | "entered-in-error";
    /**
     * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
     */
    color?: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white";
    /**
     * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
     */
    category?: "measurement" | "setting" | "calculation" | "unspecified";
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    measurementPeriod?: Timing;
    /**
     * Describes the calibrations that have been performed or that are required to be performed.
     */
    calibration?: DeviceMetric_Calibration[];
}

export interface DeviceMetric_Calibration {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the type of the calibration method.
     */
    type?: "unspecified" | "offset" | "gain" | "two-point";
    /**
     * Describes the state of the calibration.
     */
    state?: "not-calibrated" | "calibration-required" | "calibrated" | "unspecified";
    /**
     * An instant in time - known at least to the second
     */
    time?: instant;
}

export interface DeviceRequest {
    /**
     * This is a DeviceRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this order by the orderer or by the receiver.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     */
    instantiatesUri?: uri[];
    /**
     * Plan/proposal/order fulfilled by this request.
     */
    basedOn?: Reference[];
    /**
     * The request takes the place of the referenced completed or terminated request(s).
     */
    priorRequest?: Reference[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    groupIdentifier?: Identifier;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    intent?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * A reference from one resource to another.
     */
    codeReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    codeCodeableConcept?: CodeableConcept;
    /**
     * Specific parameters for the ordered item.  For example, the prism value for lenses.
     */
    parameter?: DeviceRequest_Parameter[];
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    occurrenceTiming?: Timing;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authoredOn?: dateTime;
    /**
     * A reference from one resource to another.
     */
    requester?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    performerType?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    performer?: Reference;
    /**
     * Reason or justification for the use of this device.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Reason or justification for the use of this device.
     */
    reasonReference?: Reference[];
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
     */
    supportingInfo?: Reference[];
    /**
     * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    note?: Annotation[];
    /**
     * Key events in the history of the request.
     */
    relevantHistory?: Reference[];
}

export interface DeviceRequest_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * The value of the device detail.
     */
    valueBoolean?: boolean;
}

export interface DeviceUseStatement {
    /**
     * This is a DeviceUseStatement resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An external identifier for this statement such as an IRI.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this DeviceUseStatement.
     */
    basedOn?: Reference[];
    /**
     * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
     */
    status?: "active" | "completed" | "entered-in-error" | "intended" | "stopped" | "on-hold";
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * Allows linking the DeviceUseStatement to the underlying Request, or to other information that supports or is used to derive the DeviceUseStatement.
     */
    derivedFrom?: Reference[];
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    timingTiming?: Timing;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timingPeriod?: Period;
    /**
     * How often the device was used.
     */
    timingDateTime?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    recordedOn?: dateTime;
    /**
     * A reference from one resource to another.
     */
    source?: Reference;
    /**
     * A reference from one resource to another.
     */
    device: Reference;
    /**
     * Reason or justification for the use of the device.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this DeviceUseStatement.
     */
    reasonReference?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    note?: Annotation[];
}

export interface DiagnosticReport {
    /**
     * This is a DiagnosticReport resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this report by the performer or other systems.
     */
    identifier?: Identifier[];
    /**
     * Details concerning a service requested.
     */
    basedOn?: Reference[];
    /**
     * The status of the diagnostic report.
     */
    status?: "registered" | "partial" | "preliminary" | "final" | "amended" | "corrected" | "appended" | "cancelled" | "entered-in-error" | "unknown";
    /**
     * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * An instant in time - known at least to the second
     */
    issued?: instant;
    /**
     * The diagnostic service that is responsible for issuing the report.
     */
    performer?: Reference[];
    /**
     * The practitioner or organization that is responsible for the report's conclusions and interpretations.
     */
    resultsInterpreter?: Reference[];
    /**
     * Details about the specimens on which this diagnostic report is based.
     */
    specimen?: Reference[];
    /**
     * [Observations](observation.html)  that are part of this diagnostic report.
     */
    result?: Reference[];
    /**
     * One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
     */
    imagingStudy?: Reference[];
    /**
     * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
     */
    media?: DiagnosticReport_Media[];
    /**
     * A sequence of Unicode characters
     */
    conclusion?: string;
    /**
     * One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.
     */
    conclusionCode?: CodeableConcept[];
    /**
     * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
     */
    presentedForm?: Attachment[];
}

export interface DiagnosticReport_Media {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * A reference from one resource to another.
     */
    link: Reference;
}

export interface DocumentManifest {
    /**
     * This is a DocumentManifest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    masterIdentifier?: Identifier;
    /**
     * Other identifiers associated with the document manifest, including version independent  identifiers.
     */
    identifier?: Identifier[];
    /**
     * The status of this document manifest.
     */
    status?: "current" | "superseded" | "entered-in-error";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * Identifies who is the author of the manifest. Manifest author is not necessarly the author of the references included.
     */
    author?: Reference[];
    /**
     * A patient, practitioner, or organization for which this set of documents is intended.
     */
    recipient?: Reference[];
    /**
     * String of characters used to identify a name or a resource
     */
    source?: uri;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * The list of Resources that consist of the parts of this manifest.
     */
    content: Reference[];
    /**
     * Related identifiers or resources associated with the DocumentManifest.
     */
    related?: DocumentManifest_Related[];
}

export interface DocumentManifest_Related {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A reference from one resource to another.
     */
    ref?: Reference;
}

export interface DocumentReference {
    /**
     * This is a DocumentReference resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    masterIdentifier?: Identifier;
    /**
     * Other identifiers associated with the document, including version independent identifiers.
     */
    identifier?: Identifier[];
    /**
     * The status of this document reference.
     */
    status?: "current" | "superseded" | "entered-in-error";
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    docStatus?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
     */
    category?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * An instant in time - known at least to the second
     */
    date?: instant;
    /**
     * Identifies who is responsible for adding the information to the document.
     */
    author?: Reference[];
    /**
     * A reference from one resource to another.
     */
    authenticator?: Reference;
    /**
     * A reference from one resource to another.
     */
    custodian?: Reference;
    /**
     * Relationships that this document has with other document references that already exist.
     */
    relatesTo?: DocumentReference_RelatesTo[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
     */
    securityLabel?: CodeableConcept[];
    /**
     * The document and format referenced. There may be multiple content element repetitions, each with a different format.
     */
    content: DocumentReference_Content[];
    /**
     * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
     */
    context?: DocumentReference_Context;
}

export interface DocumentReference_RelatesTo {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of relationship that this document has with anther document.
     */
    code?: "replaces" | "transforms" | "signs" | "appends";
    /**
     * A reference from one resource to another.
     */
    target: Reference;
}

export interface DocumentReference_Content {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * For referring to data content defined in other formats.
     */
    attachment: Attachment;
    /**
     * A reference to a code defined by a terminology system.
     */
    format?: Coding;
}

export interface DocumentReference_Context {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the clinical encounter or type of care that the document content is associated with.
     */
    encounter?: Reference[];
    /**
     * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
     */
    event?: CodeableConcept[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    facilityType?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    practiceSetting?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    sourcePatientInfo?: Reference;
    /**
     * Related identifiers or resources associated with the DocumentReference.
     */
    related?: Reference[];
}

export interface EffectEvidenceSynthesis {
    /**
     * This is a EffectEvidenceSynthesis resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this effect evidence synthesis when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this effect evidence synthesis. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate effect evidence synthesis instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the effect evidence synthesis is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    synthesisType?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    studyType?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    population: Reference;
    /**
     * A reference from one resource to another.
     */
    exposure: Reference;
    /**
     * A reference from one resource to another.
     */
    exposureAlternative: Reference;
    /**
     * A reference from one resource to another.
     */
    outcome: Reference;
    /**
     * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
     */
    sampleSize?: EffectEvidenceSynthesis_SampleSize;
    /**
     * A description of the results for each exposure considered in the effect estimate.
     */
    resultsByExposure?: EffectEvidenceSynthesis_ResultsByExposure[];
    /**
     * The estimated effect of the exposure variant.
     */
    effectEstimate?: EffectEvidenceSynthesis_EffectEstimate[];
    /**
     * A description of the certainty of the effect estimate.
     */
    certainty?: EffectEvidenceSynthesis_Certainty[];
}

export interface EffectEvidenceSynthesis_SampleSize {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A whole number
     */
    numberOfStudies?: integer;
    /**
     * A whole number
     */
    numberOfParticipants?: integer;
}

export interface EffectEvidenceSynthesis_ResultsByExposure {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Whether these results are for the exposure state or alternative exposure state.
     */
    exposureState?: "exposure" | "exposure-alternative";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    variantState?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    riskEvidenceSynthesis: Reference;
}

export interface EffectEvidenceSynthesis_EffectEstimate {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    variantState?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unitOfMeasure?: CodeableConcept;
    /**
     * A description of the precision of the estimate for the effect.
     */
    precisionEstimate?: EffectEvidenceSynthesis_PrecisionEstimate[];
}

export interface EffectEvidenceSynthesis_PrecisionEstimate {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    level?: decimal;
    /**
     * A rational number with implicit precision
     */
    from?: decimal;
    /**
     * A rational number with implicit precision
     */
    to?: decimal;
}

export interface EffectEvidenceSynthesis_Certainty {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A rating of the certainty of the effect estimate.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * A description of a component of the overall certainty.
     */
    certaintySubcomponent?: EffectEvidenceSynthesis_CertaintySubcomponent[];
}

export interface EffectEvidenceSynthesis_CertaintySubcomponent {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A rating of a subcomponent of rating certainty.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
}

export interface Encounter {
    /**
     * This is a Encounter resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier(s) by which this encounter is known.
     */
    identifier?: Identifier[];
    /**
     * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
     */
    status?: "planned" | "arrived" | "triaged" | "in-progress" | "onleave" | "finished" | "cancelled" | "entered-in-error" | "unknown";
    /**
     * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
     */
    statusHistory?: Encounter_StatusHistory[];
    /**
     * A reference to a code defined by a terminology system.
     */
    class: Coding;
    /**
     * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
     */
    classHistory?: Encounter_ClassHistory[];
    /**
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
     */
    type?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    serviceType?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    priority?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
     */
    episodeOfCare?: Reference[];
    /**
     * The request this encounter satisfies (e.g. incoming referral or procedure request).
     */
    basedOn?: Reference[];
    /**
     * The list of people responsible for providing the service.
     */
    participant?: Encounter_Participant[];
    /**
     * The appointment that scheduled this encounter.
     */
    appointment?: Reference[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A length of time.
     */
    length?: Duration;
    /**
     * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
     */
    reasonReference?: Reference[];
    /**
     * The list of diagnosis relevant to this encounter.
     */
    diagnosis?: Encounter_Diagnosis[];
    /**
     * The set of accounts that may be used for billing for this Encounter.
     */
    account?: Reference[];
    /**
     * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
     */
    hospitalization?: Encounter_Hospitalization;
    /**
     * List of locations where  the patient has been during this encounter.
     */
    location?: Encounter_Location[];
    /**
     * A reference from one resource to another.
     */
    serviceProvider?: Reference;
    /**
     * A reference from one resource to another.
     */
    partOf?: Reference;
}

export interface Encounter_StatusHistory {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
     */
    status?: "planned" | "arrived" | "triaged" | "in-progress" | "onleave" | "finished" | "cancelled" | "entered-in-error" | "unknown";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period: Period;
}

export interface Encounter_ClassHistory {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    class: Coding;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period: Period;
}

export interface Encounter_Participant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Role of participant in encounter.
     */
    type?: CodeableConcept[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    individual?: Reference;
}

export interface Encounter_Diagnosis {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    condition: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    use?: CodeableConcept;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    rank?: positiveInt;
}

export interface Encounter_Hospitalization {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    preAdmissionIdentifier?: Identifier;
    /**
     * A reference from one resource to another.
     */
    origin?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    admitSource?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reAdmission?: CodeableConcept;
    /**
     * Diet preferences reported by the patient.
     */
    dietPreference?: CodeableConcept[];
    /**
     * Special courtesies (VIP, board member).
     */
    specialCourtesy?: CodeableConcept[];
    /**
     * Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
     */
    specialArrangement?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    destination?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    dischargeDisposition?: CodeableConcept;
}

export interface Encounter_Location {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    location: Reference;
    /**
     * The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
     */
    status?: "planned" | "active" | "reserved" | "completed";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    physicalType?: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface Endpoint {
    /**
     * This is a Endpoint resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * active | suspended | error | off | test.
     */
    status?: "active" | "suspended" | "error" | "off" | "entered-in-error" | "test";
    /**
     * A reference to a code defined by a terminology system.
     */
    connectionType: Coding;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A reference from one resource to another.
     */
    managingOrganization?: Reference;
    /**
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    contact?: ContactPoint[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * The payload type describes the acceptable content that can be communicated on the endpoint.
     */
    payloadType: CodeableConcept[];
    /**
     * The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
     */
    payloadMimeType?: code[];
    /**
     * A URI that is a literal reference
     */
    address?: url;
    /**
     * Additional headers / information to send as part of the notification.
     */
    header?: string[];
}

export interface EnrollmentRequest {
    /**
     * This is a EnrollmentRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The Response business identifier.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    insurer?: Reference;
    /**
     * A reference from one resource to another.
     */
    provider?: Reference;
    /**
     * A reference from one resource to another.
     */
    candidate?: Reference;
    /**
     * A reference from one resource to another.
     */
    coverage?: Reference;
}

export interface EnrollmentResponse {
    /**
     * This is a EnrollmentResponse resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The Response business identifier.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A reference from one resource to another.
     */
    request?: Reference;
    /**
     * Processing status: error, complete.
     */
    outcome?: "queued" | "complete" | "error" | "partial";
    /**
     * A sequence of Unicode characters
     */
    disposition?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    organization?: Reference;
    /**
     * A reference from one resource to another.
     */
    requestProvider?: Reference;
}

export interface EpisodeOfCare {
    /**
     * This is a EpisodeOfCare resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
     */
    identifier?: Identifier[];
    /**
     * planned | waitlist | active | onhold | finished | cancelled.
     */
    status?: "planned" | "waitlist" | "active" | "onhold" | "finished" | "cancelled" | "entered-in-error";
    /**
     * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
     */
    statusHistory?: EpisodeOfCare_StatusHistory[];
    /**
     * A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
     */
    type?: CodeableConcept[];
    /**
     * The list of diagnosis relevant to this episode of care.
     */
    diagnosis?: EpisodeOfCare_Diagnosis[];
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A reference from one resource to another.
     */
    managingOrganization?: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
     */
    referralRequest?: Reference[];
    /**
     * A reference from one resource to another.
     */
    careManager?: Reference;
    /**
     * The list of practitioners that may be facilitating this episode of care for specific purposes.
     */
    team?: Reference[];
    /**
     * The set of accounts that may be used for billing for this EpisodeOfCare.
     */
    account?: Reference[];
}

export interface EpisodeOfCare_StatusHistory {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * planned | waitlist | active | onhold | finished | cancelled.
     */
    status?: "planned" | "waitlist" | "active" | "onhold" | "finished" | "cancelled" | "entered-in-error";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period: Period;
}

export interface EpisodeOfCare_Diagnosis {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    condition: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    rank?: positiveInt;
}

export interface EventDefinition {
    /**
     * This is a EventDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this event definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the event definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related resources such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.
     */
    trigger: TriggerDefinition[];
}

export interface TriggerDefinition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The type of triggering event.
     */
    type?: "named-event" | "periodic" | "data-changed" | "data-added" | "data-modified" | "data-removed" | "data-accessed" | "data-access-ended";
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    timingTiming?: Timing;
    /**
     * A reference from one resource to another.
     */
    timingReference?: Reference;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingDate?: string;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingDateTime?: string;
    /**
     * The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
     */
    data?: DataRequirement[];
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    condition?: Expression;
}

export interface DataRequirement {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * The profile of the required data, specified as the uri of the profile definition.
     */
    profile?: canonical[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.
     *
     * The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    mustSupport?: string[];
    /**
     * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
     */
    codeFilter?: DataRequirement_CodeFilter[];
    /**
     * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
     */
    dateFilter?: DataRequirement_DateFilter[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    limit?: positiveInt;
    /**
     * Specifies the order of the results to be returned.
     */
    sort?: DataRequirement_Sort[];
}

export interface DataRequirement_CodeFilter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * A sequence of Unicode characters
     */
    searchParam?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    valueSet?: canonical;
    /**
     * The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.
     */
    code?: Coding[];
}

export interface DataRequirement_DateFilter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * A sequence of Unicode characters
     */
    searchParam?: string;
    /**
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valueDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A length of time.
     */
    valueDuration?: Duration;
}

export interface DataRequirement_Sort {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * The direction of the sort, ascending or descending.
     */
    direction?: "ascending" | "descending";
}

export interface Evidence {
    /**
     * This is a Evidence resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this evidence when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    shortTitle?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this evidence. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the evidence is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the Evidence. Topics provide a high-level categorization grouping types of Evidences that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference from one resource to another.
     */
    exposureBackground: Reference;
    /**
     * A reference to a EvidenceVariable resource that defines the exposure for the research.
     */
    exposureVariant?: Reference[];
    /**
     * A reference to a EvidenceVariable resomece that defines the outcome for the research.
     */
    outcome?: Reference[];
}

export interface EvidenceVariable {
    /**
     * This is a EvidenceVariable resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    shortTitle?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this evidence variable. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the evidence variable is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the EvidenceVariable. Topics provide a high-level categorization grouping types of EvidenceVariables that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * The type of evidence element, a population, an exposure, or an outcome.
     */
    type?: "dichotomous" | "continuous" | "descriptive";
    /**
     * A characteristic that defines the members of the evidence element. Multiple characteristics are applied with "and" semantics.
     */
    characteristic: EvidenceVariable_Characteristic[];
}

export interface EvidenceVariable_Characteristic {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A reference from one resource to another.
     */
    definitionReference?: Reference;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCanonical?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    definitionCodeableConcept?: CodeableConcept;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    definitionExpression?: Expression;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    definitionDataRequirement?: DataRequirement;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    definitionTriggerDefinition?: TriggerDefinition;
    /**
     * Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
     */
    usageContext?: UsageContext[];
    /**
     * Value of "true" or "false"
     */
    exclude?: boolean;
    /**
     * Indicates what effective period the study covers.
     */
    participantEffectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    participantEffectivePeriod?: Period;
    /**
     * A length of time.
     */
    participantEffectiveDuration?: Duration;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    participantEffectiveTiming?: Timing;
    /**
     * A length of time.
     */
    timeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    groupMeasure?: "mean" | "median" | "mean-of-mean" | "mean-of-median" | "median-of-mean" | "median-of-median";
}

export interface ExampleScenario {
    /**
     * This is a ExampleScenario resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The status of this example scenario. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the example scenario is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * Actor participating in the resource.
     */
    actor?: ExampleScenario_Actor[];
    /**
     * Each resource and each version that is present in the workflow.
     */
    instance?: ExampleScenario_Instance[];
    /**
     * Each major process - a group of operations.
     */
    process?: ExampleScenario_Process[];
    /**
     * Another nested workflow.
     */
    workflow?: canonical[];
}

export interface ExampleScenario_Actor {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    actorId?: string;
    /**
     * The type of actor - person or system.
     */
    type?: "person" | "entity";
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
}

export interface ExampleScenario_Instance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    resourceId?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    resourceType?: code;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A specific version of the resource.
     */
    version?: ExampleScenario_Version[];
    /**
     * Resources contained in the instance (e.g. the observations contained in a bundle).
     */
    containedInstance?: ExampleScenario_ContainedInstance[];
}

export interface ExampleScenario_Version {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    versionId?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
}

export interface ExampleScenario_ContainedInstance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    resourceId?: string;
    /**
     * A sequence of Unicode characters
     */
    versionId?: string;
}

export interface ExampleScenario_Process {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    preConditions?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    postConditions?: markdown;
    /**
     * Each step of the process.
     */
    step?: ExampleScenario_Step[];
}

export interface ExampleScenario_Step {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Nested process.
     */
    process?: ExampleScenario_Process[];
    /**
     * Value of "true" or "false"
     */
    pause?: boolean;
    /**
     * Example of workflow instance.
     */
    operation?: ExampleScenario_Operation;
    /**
     * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
     */
    alternative?: ExampleScenario_Alternative[];
}

export interface ExampleScenario_Operation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    number?: string;
    /**
     * A sequence of Unicode characters
     */
    type?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    initiator?: string;
    /**
     * A sequence of Unicode characters
     */
    receiver?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * Value of "true" or "false"
     */
    initiatorActive?: boolean;
    /**
     * Value of "true" or "false"
     */
    receiverActive?: boolean;
    /**
     * Example of workflow instance.
     */
    request?: ExampleScenario_ContainedInstance;
    /**
     * Example of workflow instance.
     */
    response?: ExampleScenario_ContainedInstance;
}

export interface ExampleScenario_Alternative {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * What happens in each alternative option.
     */
    step?: ExampleScenario_Step[];
}

export interface ExplanationOfBenefit {
    /**
     * This is a ExplanationOfBenefit resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this explanation of benefit.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status?: "active" | "cancelled" | "draft" | "entered-in-error";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subType?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    use?: code;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    billablePeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    enterer?: Reference;
    /**
     * A reference from one resource to another.
     */
    insurer: Reference;
    /**
     * A reference from one resource to another.
     */
    provider: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    priority?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fundsReserveRequested?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fundsReserve?: CodeableConcept;
    /**
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     */
    related?: ExplanationOfBenefit_Related[];
    /**
     * A reference from one resource to another.
     */
    prescription?: Reference;
    /**
     * A reference from one resource to another.
     */
    originalPrescription?: Reference;
    /**
     * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
     */
    payee?: ExplanationOfBenefit_Payee;
    /**
     * A reference from one resource to another.
     */
    referral?: Reference;
    /**
     * A reference from one resource to another.
     */
    facility?: Reference;
    /**
     * A reference from one resource to another.
     */
    claim?: Reference;
    /**
     * A reference from one resource to another.
     */
    claimResponse?: Reference;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    outcome?: code;
    /**
     * A sequence of Unicode characters
     */
    disposition?: string;
    /**
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     */
    preAuthRef?: string[];
    /**
     * The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.
     */
    preAuthRefPeriod?: Period[];
    /**
     * The members of the team who provided the products and services.
     */
    careTeam?: ExplanationOfBenefit_CareTeam[];
    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    supportingInfo?: ExplanationOfBenefit_SupportingInfo[];
    /**
     * Information about diagnoses relevant to the claim items.
     */
    diagnosis?: ExplanationOfBenefit_Diagnosis[];
    /**
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    procedure?: ExplanationOfBenefit_Procedure[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    precedence?: positiveInt;
    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    insurance: ExplanationOfBenefit_Insurance[];
    /**
     * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
     */
    accident?: ExplanationOfBenefit_Accident;
    /**
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    item?: ExplanationOfBenefit_Item[];
    /**
     * The first-tier service adjudications for payor added product or service lines.
     */
    addItem?: ExplanationOfBenefit_AddItem[];
    /**
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    adjudication?: ExplanationOfBenefit_Adjudication[];
    /**
     * Categorized monetary totals for the adjudication.
     */
    total?: ExplanationOfBenefit_Total[];
    /**
     * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
     */
    payment?: ExplanationOfBenefit_Payment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    formCode?: CodeableConcept;
    /**
     * For referring to data content defined in other formats.
     */
    form?: Attachment;
    /**
     * A note that describes or explains adjudication results in a human readable form.
     */
    processNote?: ExplanationOfBenefit_ProcessNote[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    benefitPeriod?: Period;
    /**
     * Balance by Benefit Category.
     */
    benefitBalance?: ExplanationOfBenefit_BenefitBalance[];
}

export interface ExplanationOfBenefit_Related {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    claim?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    relationship?: CodeableConcept;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    reference?: Identifier;
}

export interface ExplanationOfBenefit_Payee {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    party?: Reference;
}

export interface ExplanationOfBenefit_CareTeam {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A reference from one resource to another.
     */
    provider: Reference;
    /**
     * Value of "true" or "false"
     */
    responsible?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    qualification?: CodeableConcept;
}

export interface ExplanationOfBenefit_SupportingInfo {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * The date when or period to which this information refers.
     */
    timingDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timingPeriod?: Period;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueBoolean?: boolean;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueString?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * A reference to a code defined by a terminology system.
     */
    reason?: Coding;
}

export interface ExplanationOfBenefit_Diagnosis {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    diagnosisReference?: Reference;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    onAdmission?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    packageCode?: CodeableConcept;
}

export interface ExplanationOfBenefit_Procedure {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    procedureCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    procedureReference?: Reference;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}

export interface ExplanationOfBenefit_Insurance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    focal?: boolean;
    /**
     * A reference from one resource to another.
     */
    coverage: Reference;
    /**
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     */
    preAuthRef?: string[];
}

export interface ExplanationOfBenefit_Accident {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    date?: date;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    locationAddress?: Address;
    /**
     * A reference from one resource to another.
     */
    locationReference?: Reference;
}

export interface ExplanationOfBenefit_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * Care team members related to this service or product.
     */
    careTeamSequence?: positiveInt[];
    /**
     * Diagnoses applicable for this service or product.
     */
    diagnosisSequence?: positiveInt[];
    /**
     * Procedures applicable for this service or product.
     */
    procedureSequence?: positiveInt[];
    /**
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    informationSequence?: positiveInt[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    revenue?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    servicedPeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    locationAddress?: Address;
    /**
     * A reference from one resource to another.
     */
    locationReference?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * A billed item may include goods or services provided in multiple encounters.
     */
    encounter?: Reference[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
     */
    adjudication?: ExplanationOfBenefit_Adjudication[];
    /**
     * Second-tier of goods and services.
     */
    detail?: ExplanationOfBenefit_Detail[];
}

export interface ExplanationOfBenefit_Adjudication {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reason?: CodeableConcept;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount?: Money;
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
}

export interface ExplanationOfBenefit_Detail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    revenue?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefit_Adjudication[];
    /**
     * Third-tier of goods and services.
     */
    subDetail?: ExplanationOfBenefit_SubDetail[];
}

export interface ExplanationOfBenefit_SubDetail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    revenue?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefit_Adjudication[];
}

export interface ExplanationOfBenefit_AddItem {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Claim items which this service line is intended to replace.
     */
    itemSequence?: positiveInt[];
    /**
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    detailSequence?: positiveInt[];
    /**
     * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
     */
    subDetailSequence?: positiveInt[];
    /**
     * The providers who are authorized for the services rendered to the patient.
     */
    provider?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    servicedPeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    locationAddress?: Address;
    /**
     * A reference from one resource to another.
     */
    locationReference?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefit_Adjudication[];
    /**
     * The second-tier service adjudications for payor added services.
     */
    detail?: ExplanationOfBenefit_Detail1[];
}

export interface ExplanationOfBenefit_Detail1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefit_Adjudication[];
    /**
     * The third-tier service adjudications for payor added services.
     */
    subDetail?: ExplanationOfBenefit_SubDetail1[];
}

export interface ExplanationOfBenefit_SubDetail1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * An amount of economic utility in some recognized currency.
     */
    unitPrice?: Money;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefit_Adjudication[];
}

export interface ExplanationOfBenefit_Total {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount: Money;
}

export interface ExplanationOfBenefit_Payment {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * An amount of economic utility in some recognized currency.
     */
    adjustment?: Money;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    date?: date;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount?: Money;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
}

export interface ExplanationOfBenefit_ProcessNote {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    number?: positiveInt;
    /**
     * The business purpose of the note text.
     */
    type?: "display" | "print" | "printoper";
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    language?: CodeableConcept;
}

export interface ExplanationOfBenefit_BenefitBalance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    excluded?: boolean;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    network?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unit?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    term?: CodeableConcept;
    /**
     * Benefits Used to date.
     */
    financial?: ExplanationOfBenefit_Financial[];
}

export interface ExplanationOfBenefit_Financial {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedUnsignedInt?: string;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedString?: string;
    /**
     * An amount of economic utility in some recognized currency.
     */
    allowedMoney?: Money;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedUnsignedInt?: string;
    /**
     * An amount of economic utility in some recognized currency.
     */
    usedMoney?: Money;
}

export interface FamilyMemberHistory {
    /**
     * This is a FamilyMemberHistory resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     */
    instantiatesUri?: uri[];
    /**
     * A code specifying the status of the record of the family history of a specific family member.
     */
    status?: "partial" | "completed" | "entered-in-error" | "health-unknown";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    relationship: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    sex?: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    bornPeriod?: Period;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornDate?: string;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornString?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    ageAge?: Age;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    ageRange?: Range;
    /**
     * The age of the relative at the time the family member history is recorded.
     */
    ageString?: string;
    /**
     * Value of "true" or "false"
     */
    estimatedAge?: boolean;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedBoolean?: boolean;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    deceasedAge?: Age;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    deceasedRange?: Range;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedDate?: string;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedString?: string;
    /**
     * Describes why the family member history occurred in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
     */
    reasonReference?: Reference[];
    /**
     * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
     */
    note?: Annotation[];
    /**
     * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
     */
    condition?: FamilyMemberHistory_Condition[];
}

export interface FamilyMemberHistory_Condition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    outcome?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    contributedToDeath?: boolean;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    onsetAge?: Age;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    onsetRange?: Range;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    onsetPeriod?: Period;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetString?: string;
    /**
     * An area where general notes can be placed about this specific condition.
     */
    note?: Annotation[];
}

export interface Flag {
    /**
     * This is a Flag resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Supports basic workflow.
     */
    status?: "active" | "inactive" | "entered-in-error";
    /**
     * Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
}

export interface Goal {
    /**
     * This is a Goal resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The state of the goal throughout its lifecycle.
     */
    lifecycleStatus?: "proposed" | "planned" | "accepted" | "active" | "on-hold" | "completed" | "cancelled" | "entered-in-error" | "rejected";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    achievementStatus?: CodeableConcept;
    /**
     * Indicates a category the goal falls within.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    priority?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    description: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * The date or event after which the goal should begin being pursued.
     */
    startDate?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    startCodeableConcept?: CodeableConcept;
    /**
     * Indicates what should be done by when.
     */
    target?: Goal_Target[];
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    statusDate?: date;
    /**
     * A sequence of Unicode characters
     */
    statusReason?: string;
    /**
     * A reference from one resource to another.
     */
    expressedBy?: Reference;
    /**
     * The identified conditions and other health record elements that are intended to be addressed by the goal.
     */
    addresses?: Reference[];
    /**
     * Any comments related to the goal.
     */
    note?: Annotation[];
    /**
     * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
     */
    outcomeCode?: CodeableConcept[];
    /**
     * Details of what's changed (or not changed).
     */
    outcomeReference?: Reference[];
}

export interface Goal_Target {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    measure?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    detailQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    detailRange?: Range;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailString?: string;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailBoolean?: boolean;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailInteger?: string;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    detailRatio?: Ratio;
    /**
     * Indicates either the date or the duration after start by which the goal should be met.
     */
    dueDate?: string;
    /**
     * A length of time.
     */
    dueDuration?: Duration;
}

export interface GraphDefinition {
    /**
     * This is a GraphDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The status of this graph definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the graph definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    start?: code;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile?: canonical;
    /**
     * Links this graph makes rules about.
     */
    link?: GraphDefinition_Link[];
}

export interface GraphDefinition_Link {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * A sequence of Unicode characters
     */
    sliceName?: string;
    /**
     * A whole number
     */
    min?: integer;
    /**
     * A sequence of Unicode characters
     */
    max?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Potential target for the link.
     */
    target?: GraphDefinition_Target[];
}

export interface GraphDefinition_Target {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * A sequence of Unicode characters
     */
    params?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile?: canonical;
    /**
     * Compartment Consistency Rules.
     */
    compartment?: GraphDefinition_Compartment[];
    /**
     * Additional links from target resource.
     */
    link?: GraphDefinition_Link[];
}

export interface GraphDefinition_Compartment {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.
     */
    use?: "condition" | "requirement";
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * identical | matching | different | no-rule | custom.
     */
    rule?: "identical" | "matching" | "different" | "custom";
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
}

export interface Group {
    /**
     * This is a Group resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique business identifier for this group.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * Identifies the broad classification of the kind of resources the group includes.
     */
    type?: "person" | "animal" | "practitioner" | "device" | "medication" | "substance";
    /**
     * Value of "true" or "false"
     */
    actual?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    quantity?: unsignedInt;
    /**
     * A reference from one resource to another.
     */
    managingEntity?: Reference;
    /**
     * Identifies traits whose presence r absence is shared by members of the group.
     */
    characteristic?: Group_Characteristic[];
    /**
     * Identifies the resource instances that are members of the group.
     */
    member?: Group_Member[];
}

export interface Group_Characteristic {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     */
    valueBoolean?: boolean;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * Value of "true" or "false"
     */
    exclude?: boolean;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface Group_Member {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    entity: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * Value of "true" or "false"
     */
    inactive?: boolean;
}

export interface GuidanceResponse {
    /**
     * This is a GuidanceResponse resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    requestIdentifier?: Identifier;
    /**
     * Allows a service to provide  unique, business identifiers for the response.
     */
    identifier?: Identifier[];
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleUri?: string;
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleCanonical?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    moduleCodeableConcept?: CodeableConcept;
    /**
     * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
     */
    status?: "success" | "data-requested" | "data-required" | "in-progress" | "failure" | "entered-in-error";
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    occurrenceDateTime?: dateTime;
    /**
     * A reference from one resource to another.
     */
    performer?: Reference;
    /**
     * Describes the reason for the guidance response in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
     */
    reasonReference?: Reference[];
    /**
     * Provides a mechanism to communicate additional information about the response.
     */
    note?: Annotation[];
    /**
     * Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
     */
    evaluationMessage?: Reference[];
    /**
     * A reference from one resource to another.
     */
    outputParameters?: Reference;
    /**
     * A reference from one resource to another.
     */
    result?: Reference;
    /**
     * If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
     */
    dataRequirement?: DataRequirement[];
}

export interface HealthcareService {
    /**
     * This is a HealthcareService resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * External identifiers for this item.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A reference from one resource to another.
     */
    providedBy?: Reference;
    /**
     * Identifies the broad category of service being performed or delivered.
     */
    category?: CodeableConcept[];
    /**
     * The specific type of service that may be delivered or performed.
     */
    type?: CodeableConcept[];
    /**
     * Collection of specialties handled by the service site. This is more of a medical term.
     */
    specialty?: CodeableConcept[];
    /**
     * The location(s) where this healthcare service may be provided.
     */
    location?: Reference[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    extraDetails?: markdown;
    /**
     * For referring to data content defined in other formats.
     */
    photo?: Attachment;
    /**
     * List of contacts related to this specific healthcare service.
     */
    telecom?: ContactPoint[];
    /**
     * The location(s) that this service is available to (not where the service is provided).
     */
    coverageArea?: Reference[];
    /**
     * The code(s) that detail the conditions under which the healthcare service is available/offered.
     */
    serviceProvisionCode?: CodeableConcept[];
    /**
     * Does this service have specific eligibility requirements that need to be met in order to use the service?
     */
    eligibility?: HealthcareService_Eligibility[];
    /**
     * Programs that this service is applicable to.
     */
    program?: CodeableConcept[];
    /**
     * Collection of characteristics (attributes).
     */
    characteristic?: CodeableConcept[];
    /**
     * Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.
     */
    communication?: CodeableConcept[];
    /**
     * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
     */
    referralMethod?: CodeableConcept[];
    /**
     * Value of "true" or "false"
     */
    appointmentRequired?: boolean;
    /**
     * A collection of times that the Service Site is available.
     */
    availableTime?: HealthcareService_AvailableTime[];
    /**
     * The HealthcareService is not available during this period of time due to the provided reason.
     */
    notAvailable?: HealthcareService_NotAvailable[];
    /**
     * A sequence of Unicode characters
     */
    availabilityExceptions?: string;
    /**
     * Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
     */
    endpoint?: Reference[];
}

export interface HealthcareService_Eligibility {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    comment?: markdown;
}

export interface HealthcareService_AvailableTime {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    daysOfWeek?: ("mon" | "tue" | "wed" | "thu" | "fri" | "sat" | "sun")[];
    /**
     * Value of "true" or "false"
     */
    allDay?: boolean;
    /**
     * A time during the day, with no date specified
     */
    availableStartTime?: time;
    /**
     * A time during the day, with no date specified
     */
    availableEndTime?: time;
}

export interface HealthcareService_NotAvailable {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    during?: Period;
}

export interface ImagingStudy {
    /**
     * This is a ImagingStudy resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers for the ImagingStudy such as DICOM Study Instance UID, and Accession Number.
     */
    identifier?: Identifier[];
    /**
     * The current state of the ImagingStudy.
     */
    status?: "registered" | "available" | "cancelled" | "entered-in-error" | "unknown";
    /**
     * A list of all the series.modality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
     */
    modality?: Coding[];
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    started?: dateTime;
    /**
     * A list of the diagnostic requests that resulted in this imaging study being performed.
     */
    basedOn?: Reference[];
    /**
     * A reference from one resource to another.
     */
    referrer?: Reference;
    /**
     * Who read the study and interpreted the images or other content.
     */
    interpreter?: Reference[];
    /**
     * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.
     */
    endpoint?: Reference[];
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    numberOfSeries?: unsignedInt;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    numberOfInstances?: unsignedInt;
    /**
     * A reference from one resource to another.
     */
    procedureReference?: Reference;
    /**
     * The code for the performed procedure type.
     */
    procedureCode?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * Description of clinical condition indicating why the ImagingStudy was requested.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this Study.
     */
    reasonReference?: Reference[];
    /**
     * Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
     */
    note?: Annotation[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Each study has one or more series of images or other content.
     */
    series?: ImagingStudy_Series[];
}

export interface ImagingStudy_Series {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    uid?: id;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    number?: unsignedInt;
    /**
     * A reference to a code defined by a terminology system.
     */
    modality: Coding;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    numberOfInstances?: unsignedInt;
    /**
     * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
     */
    endpoint?: Reference[];
    /**
     * A reference to a code defined by a terminology system.
     */
    bodySite?: Coding;
    /**
     * A reference to a code defined by a terminology system.
     */
    laterality?: Coding;
    /**
     * The specimen imaged, e.g., for whole slide imaging of a biopsy.
     */
    specimen?: Reference[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    started?: dateTime;
    /**
     * Indicates who or what performed the series and how they were involved.
     */
    performer?: ImagingStudy_Performer[];
    /**
     * A single SOP instance within the series, e.g. an image, or presentation state.
     */
    instance?: ImagingStudy_Instance[];
}

export interface ImagingStudy_Performer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    function?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    actor: Reference;
}

export interface ImagingStudy_Instance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    uid?: id;
    /**
     * A reference to a code defined by a terminology system.
     */
    sopClass: Coding;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    number?: unsignedInt;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
}

export interface Immunization {
    /**
     * This is a Immunization resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this immunization record.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    vaccineCode: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * Date vaccine administered or was to be administered.
     */
    occurrenceDateTime?: string;
    /**
     * Date vaccine administered or was to be administered.
     */
    occurrenceString?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    recorded?: dateTime;
    /**
     * Value of "true" or "false"
     */
    primarySource?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reportOrigin?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * A reference from one resource to another.
     */
    manufacturer?: Reference;
    /**
     * A sequence of Unicode characters
     */
    lotNumber?: string;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    expirationDate?: date;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    site?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    route?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    doseQuantity?: Quantity;
    /**
     * Indicates who performed the immunization event.
     */
    performer?: Immunization_Performer[];
    /**
     * Extra information about the immunization that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Reasons why the vaccine was administered.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
     */
    reasonReference?: Reference[];
    /**
     * Value of "true" or "false"
     */
    isSubpotent?: boolean;
    /**
     * Reason why a dose is considered to be subpotent.
     */
    subpotentReason?: CodeableConcept[];
    /**
     * Educational material presented to the patient (or guardian) at the time of vaccine administration.
     */
    education?: Immunization_Education[];
    /**
     * Indicates a patient's eligibility for a funding program.
     */
    programEligibility?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fundingSource?: CodeableConcept;
    /**
     * Categorical data indicating that an adverse event is associated in time to an immunization.
     */
    reaction?: Immunization_Reaction[];
    /**
     * The protocol (set of recommendations) being followed by the provider who administered the dose.
     */
    protocolApplied?: Immunization_ProtocolApplied[];
}

export interface Immunization_Performer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    function?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    actor: Reference;
}

export interface Immunization_Education {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    documentType?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    reference?: uri;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    publicationDate?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    presentationDate?: dateTime;
}

export interface Immunization_Reaction {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    detail?: Reference;
    /**
     * Value of "true" or "false"
     */
    reported?: boolean;
}

export interface Immunization_ProtocolApplied {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    series?: string;
    /**
     * A reference from one resource to another.
     */
    authority?: Reference;
    /**
     * The vaccine preventable disease the dose is being administered against.
     */
    targetDisease?: CodeableConcept[];
    /**
     * Nominal position in a series.
     */
    doseNumberPositiveInt?: string;
    /**
     * Nominal position in a series.
     */
    doseNumberString?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesPositiveInt?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesString?: string;
}

export interface ImmunizationEvaluation {
    /**
     * This is a ImmunizationEvaluation resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this immunization evaluation record.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    authority?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    targetDisease: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    immunizationEvent: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    doseStatus: CodeableConcept;
    /**
     * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
     */
    doseStatusReason?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A sequence of Unicode characters
     */
    series?: string;
    /**
     * Nominal position in a series.
     */
    doseNumberPositiveInt?: string;
    /**
     * Nominal position in a series.
     */
    doseNumberString?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesPositiveInt?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesString?: string;
}

export interface ImmunizationRecommendation {
    /**
     * This is a ImmunizationRecommendation resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this particular recommendation record.
     */
    identifier?: Identifier[];
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    authority?: Reference;
    /**
     * Vaccine administration recommendations.
     */
    recommendation: ImmunizationRecommendation_Recommendation[];
}

export interface ImmunizationRecommendation_Recommendation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Vaccine(s) or vaccine group that pertain to the recommendation.
     */
    vaccineCode?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    targetDisease?: CodeableConcept;
    /**
     * Vaccine(s) which should not be used to fulfill the recommendation.
     */
    contraindicatedVaccineCode?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    forecastStatus: CodeableConcept;
    /**
     * The reason for the assigned forecast status.
     */
    forecastReason?: CodeableConcept[];
    /**
     * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
     */
    dateCriterion?: ImmunizationRecommendation_DateCriterion[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A sequence of Unicode characters
     */
    series?: string;
    /**
     * Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
     */
    doseNumberPositiveInt?: string;
    /**
     * Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
     */
    doseNumberString?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesPositiveInt?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesString?: string;
    /**
     * Immunization event history and/or evaluation that supports the status and recommendation.
     */
    supportingImmunization?: Reference[];
    /**
     * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
     */
    supportingPatientInformation?: Reference[];
}

export interface ImmunizationRecommendation_DateCriterion {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    value?: dateTime;
}

export interface ImplementationGuide {
    /**
     * This is a ImplementationGuide resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this implementation guide. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the implementation guide is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    packageId?: id;
    /**
     * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
     */
    license?: "not-open-source" | "0BSD" | "AAL" | "Abstyles" | "Adobe-2006" | "Adobe-Glyph" | "ADSL" | "AFL-1.1" | "AFL-1.2" | "AFL-2.0" | "AFL-2.1" | "AFL-3.0" | "Afmparse" | "AGPL-1.0-only" | "AGPL-1.0-or-later" | "AGPL-3.0-only" | "AGPL-3.0-or-later" | "Aladdin" | "AMDPLPA" | "AML" | "AMPAS" | "ANTLR-PD" | "Apache-1.0" | "Apache-1.1" | "Apache-2.0" | "APAFML" | "APL-1.0" | "APSL-1.0" | "APSL-1.1" | "APSL-1.2" | "APSL-2.0" | "Artistic-1.0-cl8" | "Artistic-1.0-Perl" | "Artistic-1.0" | "Artistic-2.0" | "Bahyph" | "Barr" | "Beerware" | "BitTorrent-1.0" | "BitTorrent-1.1" | "Borceux" | "BSD-1-Clause" | "BSD-2-Clause-FreeBSD" | "BSD-2-Clause-NetBSD" | "BSD-2-Clause-Patent" | "BSD-2-Clause" | "BSD-3-Clause-Attribution" | "BSD-3-Clause-Clear" | "BSD-3-Clause-LBNL" | "BSD-3-Clause-No-Nuclear-License-2014" | "BSD-3-Clause-No-Nuclear-License" | "BSD-3-Clause-No-Nuclear-Warranty" | "BSD-3-Clause" | "BSD-4-Clause-UC" | "BSD-4-Clause" | "BSD-Protection" | "BSD-Source-Code" | "BSL-1.0" | "bzip2-1.0.5" | "bzip2-1.0.6" | "Caldera" | "CATOSL-1.1" | "CC-BY-1.0" | "CC-BY-2.0" | "CC-BY-2.5" | "CC-BY-3.0" | "CC-BY-4.0" | "CC-BY-NC-1.0" | "CC-BY-NC-2.0" | "CC-BY-NC-2.5" | "CC-BY-NC-3.0" | "CC-BY-NC-4.0" | "CC-BY-NC-ND-1.0" | "CC-BY-NC-ND-2.0" | "CC-BY-NC-ND-2.5" | "CC-BY-NC-ND-3.0" | "CC-BY-NC-ND-4.0" | "CC-BY-NC-SA-1.0" | "CC-BY-NC-SA-2.0" | "CC-BY-NC-SA-2.5" | "CC-BY-NC-SA-3.0" | "CC-BY-NC-SA-4.0" | "CC-BY-ND-1.0" | "CC-BY-ND-2.0" | "CC-BY-ND-2.5" | "CC-BY-ND-3.0" | "CC-BY-ND-4.0" | "CC-BY-SA-1.0" | "CC-BY-SA-2.0" | "CC-BY-SA-2.5" | "CC-BY-SA-3.0" | "CC-BY-SA-4.0" | "CC0-1.0" | "CDDL-1.0" | "CDDL-1.1" | "CDLA-Permissive-1.0" | "CDLA-Sharing-1.0" | "CECILL-1.0" | "CECILL-1.1" | "CECILL-2.0" | "CECILL-2.1" | "CECILL-B" | "CECILL-C" | "ClArtistic" | "CNRI-Jython" | "CNRI-Python-GPL-Compatible" | "CNRI-Python" | "Condor-1.1" | "CPAL-1.0" | "CPL-1.0" | "CPOL-1.02" | "Crossword" | "CrystalStacker" | "CUA-OPL-1.0" | "Cube" | "curl" | "D-FSL-1.0" | "diffmark" | "DOC" | "Dotseqn" | "DSDP" | "dvipdfm" | "ECL-1.0" | "ECL-2.0" | "EFL-1.0" | "EFL-2.0" | "eGenix" | "Entessa" | "EPL-1.0" | "EPL-2.0" | "ErlPL-1.1" | "EUDatagrid" | "EUPL-1.0" | "EUPL-1.1" | "EUPL-1.2" | "Eurosym" | "Fair" | "Frameworx-1.0" | "FreeImage" | "FSFAP" | "FSFUL" | "FSFULLR" | "FTL" | "GFDL-1.1-only" | "GFDL-1.1-or-later" | "GFDL-1.2-only" | "GFDL-1.2-or-later" | "GFDL-1.3-only" | "GFDL-1.3-or-later" | "Giftware" | "GL2PS" | "Glide" | "Glulxe" | "gnuplot" | "GPL-1.0-only" | "GPL-1.0-or-later" | "GPL-2.0-only" | "GPL-2.0-or-later" | "GPL-3.0-only" | "GPL-3.0-or-later" | "gSOAP-1.3b" | "HaskellReport" | "HPND" | "IBM-pibs" | "ICU" | "IJG" | "ImageMagick" | "iMatix" | "Imlib2" | "Info-ZIP" | "Intel-ACPI" | "Intel" | "Interbase-1.0" | "IPA" | "IPL-1.0" | "ISC" | "JasPer-2.0" | "JSON" | "LAL-1.2" | "LAL-1.3" | "Latex2e" | "Leptonica" | "LGPL-2.0-only" | "LGPL-2.0-or-later" | "LGPL-2.1-only" | "LGPL-2.1-or-later" | "LGPL-3.0-only" | "LGPL-3.0-or-later" | "LGPLLR" | "Libpng" | "libtiff" | "LiLiQ-P-1.1" | "LiLiQ-R-1.1" | "LiLiQ-Rplus-1.1" | "Linux-OpenIB" | "LPL-1.0" | "LPL-1.02" | "LPPL-1.0" | "LPPL-1.1" | "LPPL-1.2" | "LPPL-1.3a" | "LPPL-1.3c" | "MakeIndex" | "MirOS" | "MIT-0" | "MIT-advertising" | "MIT-CMU" | "MIT-enna" | "MIT-feh" | "MIT" | "MITNFA" | "Motosoto" | "mpich2" | "MPL-1.0" | "MPL-1.1" | "MPL-2.0-no-copyleft-exception" | "MPL-2.0" | "MS-PL" | "MS-RL" | "MTLL" | "Multics" | "Mup" | "NASA-1.3" | "Naumen" | "NBPL-1.0" | "NCSA" | "Net-SNMP" | "NetCDF" | "Newsletr" | "NGPL" | "NLOD-1.0" | "NLPL" | "Nokia" | "NOSL" | "Noweb" | "NPL-1.0" | "NPL-1.1" | "NPOSL-3.0" | "NRL" | "NTP" | "OCCT-PL" | "OCLC-2.0" | "ODbL-1.0" | "OFL-1.0" | "OFL-1.1" | "OGTSL" | "OLDAP-1.1" | "OLDAP-1.2" | "OLDAP-1.3" | "OLDAP-1.4" | "OLDAP-2.0.1" | "OLDAP-2.0" | "OLDAP-2.1" | "OLDAP-2.2.1" | "OLDAP-2.2.2" | "OLDAP-2.2" | "OLDAP-2.3" | "OLDAP-2.4" | "OLDAP-2.5" | "OLDAP-2.6" | "OLDAP-2.7" | "OLDAP-2.8" | "OML" | "OpenSSL" | "OPL-1.0" | "OSET-PL-2.1" | "OSL-1.0" | "OSL-1.1" | "OSL-2.0" | "OSL-2.1" | "OSL-3.0" | "PDDL-1.0" | "PHP-3.0" | "PHP-3.01" | "Plexus" | "PostgreSQL" | "psfrag" | "psutils" | "Python-2.0" | "Qhull" | "QPL-1.0" | "Rdisc" | "RHeCos-1.1" | "RPL-1.1" | "RPL-1.5" | "RPSL-1.0" | "RSA-MD" | "RSCPL" | "Ruby" | "SAX-PD" | "Saxpath" | "SCEA" | "Sendmail" | "SGI-B-1.0" | "SGI-B-1.1" | "SGI-B-2.0" | "SimPL-2.0" | "SISSL-1.2" | "SISSL" | "Sleepycat" | "SMLNJ" | "SMPPL" | "SNIA" | "Spencer-86" | "Spencer-94" | "Spencer-99" | "SPL-1.0" | "SugarCRM-1.1.3" | "SWL" | "TCL" | "TCP-wrappers" | "TMate" | "TORQUE-1.1" | "TOSL" | "Unicode-DFS-2015" | "Unicode-DFS-2016" | "Unicode-TOU" | "Unlicense" | "UPL-1.0" | "Vim" | "VOSTROM" | "VSL-1.0" | "W3C-19980720" | "W3C-20150513" | "W3C" | "Watcom-1.0" | "Wsuipa" | "WTFPL" | "X11" | "Xerox" | "XFree86-1.1" | "xinetd" | "Xnet" | "xpp" | "XSkat" | "YPL-1.0" | "YPL-1.1" | "Zed" | "Zend-2.0" | "Zimbra-1.3" | "Zimbra-1.4" | "zlib-acknowledgement" | "Zlib" | "ZPL-1.1" | "ZPL-2.0" | "ZPL-2.1";
    /**
     * The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.1. for this version.
     */
    fhirVersion?: ("0.01" | "0.05" | "0.06" | "0.11" | "0.0.80" | "0.0.81" | "0.0.82" | "0.4.0" | "0.5.0" | "1.0.0" | "1.0.1" | "1.0.2" | "1.1.0" | "1.4.0" | "1.6.0" | "1.8.0" | "3.0.0" | "3.0.1" | "3.3.0" | "3.5.0" | "4.0.0" | "4.0.1")[];
    /**
     * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
     */
    dependsOn?: ImplementationGuide_DependsOn[];
    /**
     * A set of profiles that all resources covered by this implementation guide must conform to.
     */
    global?: ImplementationGuide_Global[];
    /**
     * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
     */
    definition?: ImplementationGuide_Definition;
    /**
     * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
     */
    manifest?: ImplementationGuide_Manifest;
}

export interface ImplementationGuide_DependsOn {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    uri: canonical;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    packageId?: id;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
}

export interface ImplementationGuide_Global {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile: canonical;
}

export interface ImplementationGuide_Definition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A logical group of resources. Logical groups can be used when building pages.
     */
    grouping?: ImplementationGuide_Grouping[];
    /**
     * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
     */
    resource: ImplementationGuide_Resource[];
    /**
     * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
     */
    page?: ImplementationGuide_Page;
    /**
     * Defines how IG is built by tools.
     */
    parameter?: ImplementationGuide_Parameter[];
    /**
     * A template for building resources.
     */
    template?: ImplementationGuide_Template[];
}

export interface ImplementationGuide_Grouping {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
}

export interface ImplementationGuide_Resource {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    reference: Reference;
    /**
     * Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
     */
    fhirVersion?: ("0.01" | "0.05" | "0.06" | "0.11" | "0.0.80" | "0.0.81" | "0.0.82" | "0.4.0" | "0.5.0" | "1.0.0" | "1.0.1" | "1.0.2" | "1.1.0" | "1.4.0" | "1.6.0" | "1.8.0" | "3.0.0" | "3.0.1" | "3.3.0" | "3.5.0" | "4.0.0" | "4.0.1")[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleBoolean?: boolean;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleCanonical?: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    groupingId?: id;
}

export interface ImplementationGuide_Page {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The source address for the page.
     */
    nameUrl?: string;
    /**
     * A reference from one resource to another.
     */
    nameReference?: Reference;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A code that indicates how the page is generated.
     */
    generation?: "html" | "markdown" | "xml" | "generated";
    /**
     * Nested Pages/Sections under this page.
     */
    page?: ImplementationGuide_Page[];
}

export interface ImplementationGuide_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.
     */
    code?: "apply" | "path-resource" | "path-pages" | "path-tx-cache" | "expansion-parameter" | "rule-broken-links" | "generate-xml" | "generate-json" | "generate-turtle" | "html-template";
    /**
     * A sequence of Unicode characters
     */
    value?: string;
}

export interface ImplementationGuide_Template {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    source?: string;
    /**
     * A sequence of Unicode characters
     */
    scope?: string;
}

export interface ImplementationGuide_Manifest {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A URI that is a literal reference
     */
    rendering?: url;
    /**
     * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
     */
    resource: ImplementationGuide_Resource1[];
    /**
     * Information about a page within the IG.
     */
    page?: ImplementationGuide_Page1[];
    /**
     * Indicates a relative path to an image that exists within the IG.
     */
    image?: string[];
    /**
     * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
     */
    other?: string[];
}

export interface ImplementationGuide_Resource1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    reference: Reference;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleBoolean?: boolean;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleCanonical?: string;
    /**
     * A URI that is a literal reference
     */
    relativePath?: url;
}

export interface ImplementationGuide_Page1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The name of an anchor available on the page.
     */
    anchor?: string[];
}

export interface InsurancePlan {
    /**
     * This is a InsurancePlan resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The current state of the health insurance product.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * The kind of health insurance product.
     */
    type?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A list of alternate names that the product is known as, or was known as in the past.
     */
    alias?: string[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    ownedBy?: Reference;
    /**
     * A reference from one resource to another.
     */
    administeredBy?: Reference;
    /**
     * The geographic region in which a health insurance product's benefits apply.
     */
    coverageArea?: Reference[];
    /**
     * The contact for the health insurance product for a certain purpose.
     */
    contact?: InsurancePlan_Contact[];
    /**
     * The technical endpoints providing access to services operated for the health insurance product.
     */
    endpoint?: Reference[];
    /**
     * Reference to the network included in the health insurance product.
     */
    network?: Reference[];
    /**
     * Details about the coverage offered by the insurance product.
     */
    coverage?: InsurancePlan_Coverage[];
    /**
     * Details about an insurance plan.
     */
    plan?: InsurancePlan_Plan[];
}

export interface InsurancePlan_Contact {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    purpose?: CodeableConcept;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    name?: HumanName;
    /**
     * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
     */
    telecom?: ContactPoint[];
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    address?: Address;
}

export interface HumanName {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Identifies the purpose for this name.
     */
    use?: "usual" | "official" | "temp" | "nickname" | "anonymous" | "old" | "maiden";
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * A sequence of Unicode characters
     */
    family?: string;
    /**
     * Given name.
     */
    given?: string[];
    /**
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
     */
    prefix?: string[];
    /**
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
     */
    suffix?: string[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface InsurancePlan_Coverage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Reference to the network that providing the type of coverage.
     */
    network?: Reference[];
    /**
     * Specific benefits under this type of coverage.
     */
    benefit: InsurancePlan_Benefit[];
}

export interface InsurancePlan_Benefit {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    requirement?: string;
    /**
     * The specific limits on the benefit.
     */
    limit?: InsurancePlan_Limit[];
}

export interface InsurancePlan_Limit {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    value?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
}

export interface InsurancePlan_Plan {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * The geographic region in which a health insurance plan's benefits apply.
     */
    coverageArea?: Reference[];
    /**
     * Reference to the network that providing the type of coverage.
     */
    network?: Reference[];
    /**
     * Overall costs associated with the plan.
     */
    generalCost?: InsurancePlan_GeneralCost[];
    /**
     * Costs associated with the coverage provided by the product.
     */
    specificCost?: InsurancePlan_SpecificCost[];
}

export interface InsurancePlan_GeneralCost {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    groupSize?: positiveInt;
    /**
     * An amount of economic utility in some recognized currency.
     */
    cost?: Money;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
}

export interface InsurancePlan_SpecificCost {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category: CodeableConcept;
    /**
     * List of the specific benefits under this category of benefit.
     */
    benefit?: InsurancePlan_Benefit1[];
}

export interface InsurancePlan_Benefit1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * List of the costs associated with a specific benefit.
     */
    cost?: InsurancePlan_Cost[];
}

export interface InsurancePlan_Cost {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    applicability?: CodeableConcept;
    /**
     * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
     */
    qualifiers?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    value?: Quantity;
}

export interface Invoice {
    /**
     * This is a Invoice resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
     */
    identifier?: Identifier[];
    /**
     * The current state of the Invoice.
     */
    status?: "draft" | "issued" | "balanced" | "cancelled" | "entered-in-error";
    /**
     * A sequence of Unicode characters
     */
    cancelledReason?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    recipient?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * Indicates who or what performed or participated in the charged service.
     */
    participant?: Invoice_Participant[];
    /**
     * A reference from one resource to another.
     */
    issuer?: Reference;
    /**
     * A reference from one resource to another.
     */
    account?: Reference;
    /**
     * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
     */
    lineItem?: Invoice_LineItem[];
    /**
     * The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
     */
    totalPriceComponent?: Invoice_PriceComponent[];
    /**
     * An amount of economic utility in some recognized currency.
     */
    totalNet?: Money;
    /**
     * An amount of economic utility in some recognized currency.
     */
    totalGross?: Money;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    paymentTerms?: markdown;
    /**
     * Comments made about the invoice by the issuer, subject, or other participants.
     */
    note?: Annotation[];
}

export interface Invoice_Participant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    actor: Reference;
}

export interface Invoice_LineItem {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    sequence?: positiveInt;
    /**
     * A reference from one resource to another.
     */
    chargeItemReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    chargeItemCodeableConcept?: CodeableConcept;
    /**
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
     */
    priceComponent?: Invoice_PriceComponent[];
}

export interface Invoice_PriceComponent {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This code identifies the type of the component.
     */
    type?: "base" | "surcharge" | "deduction" | "discount" | "tax" | "informational";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount?: Money;
}

export interface Library {
    /**
     * This is a Library resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this library. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the library is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * The parameter element defines parameters used by the library.
     */
    parameter?: ParameterDefinition[];
    /**
     * Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
     */
    dataRequirement?: DataRequirement[];
    /**
     * The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
     */
    content?: Attachment[];
}

export interface ParameterDefinition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    name?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    use?: code;
    /**
     * A whole number
     */
    min?: integer;
    /**
     * A sequence of Unicode characters
     */
    max?: string;
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile?: canonical;
}

export interface Linkage {
    /**
     * This is a Linkage resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
     */
    item: Linkage_Item[];
}

export interface Linkage_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
     */
    type?: "source" | "alternate" | "historical";
    /**
     * A reference from one resource to another.
     */
    resource: Reference;
}

export interface List {
    /**
     * This is a List resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the List assigned for business purposes outside the context of FHIR.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current state of this list.
     */
    status?: "current" | "retired" | "entered-in-error";
    /**
     * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     */
    mode?: "working" | "snapshot" | "changes";
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    source?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    orderedBy?: CodeableConcept;
    /**
     * Comments that apply to the overall list.
     */
    note?: Annotation[];
    /**
     * Entries in this list.
     */
    entry?: List_Entry[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    emptyReason?: CodeableConcept;
}

export interface List_Entry {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    flag?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    deleted?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    item: Reference;
}

export interface Location {
    /**
     * This is a Location resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique code or number identifying the location to its users.
     */
    identifier?: Identifier[];
    /**
     * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
     */
    status?: "active" | "suspended" | "inactive";
    /**
     * A reference to a code defined by a terminology system.
     */
    operationalStatus?: Coding;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A list of alternate names that the location is known as, or was known as, in the past.
     */
    alias?: string[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Indicates whether a resource instance represents a specific location or a class of locations.
     */
    mode?: "instance" | "kind";
    /**
     * Indicates the type of function performed at the location.
     */
    type?: CodeableConcept[];
    /**
     * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     */
    telecom?: ContactPoint[];
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    address?: Address;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    physicalType?: CodeableConcept;
    /**
     * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
     */
    position?: Location_Position;
    /**
     * A reference from one resource to another.
     */
    managingOrganization?: Reference;
    /**
     * A reference from one resource to another.
     */
    partOf?: Reference;
    /**
     * What days/times during a week is this location usually open.
     */
    hoursOfOperation?: Location_HoursOfOperation[];
    /**
     * A sequence of Unicode characters
     */
    availabilityExceptions?: string;
    /**
     * Technical endpoints providing access to services operated for the location.
     */
    endpoint?: Reference[];
}

export interface Location_Position {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    longitude?: decimal;
    /**
     * A rational number with implicit precision
     */
    latitude?: decimal;
    /**
     * A rational number with implicit precision
     */
    altitude?: decimal;
}

export interface Location_HoursOfOperation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    daysOfWeek?: code[];
    /**
     * Value of "true" or "false"
     */
    allDay?: boolean;
    /**
     * A time during the day, with no date specified
     */
    openingTime?: time;
    /**
     * A time during the day, with no date specified
     */
    closingTime?: time;
}

export interface Measure {
    /**
     * This is a Measure resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this measure. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the measure is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing the formal logic used by the measure.
     */
    library?: canonical[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    disclaimer?: markdown;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    scoring?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    compositeScoring?: CodeableConcept;
    /**
     * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
     */
    type?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    riskAdjustment?: string;
    /**
     * A sequence of Unicode characters
     */
    rateAggregation?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    rationale?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    clinicalRecommendationStatement?: markdown;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    improvementNotation?: CodeableConcept;
    /**
     * Provides a description of an individual term used within the measure.
     */
    definition?: markdown[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    guidance?: markdown;
    /**
     * A group of population criteria for the measure.
     */
    group?: Measure_Group[];
    /**
     * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
     */
    supplementalData?: Measure_SupplementalData[];
}

export interface Measure_Group {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A population criteria for the measure.
     */
    population?: Measure_Population[];
    /**
     * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     */
    stratifier?: Measure_Stratifier[];
}

export interface Measure_Population {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    criteria: Expression;
}

export interface Measure_Stratifier {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    criteria?: Expression;
    /**
     * A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     */
    component?: Measure_Component[];
}

export interface Measure_Component {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    criteria: Expression;
}

export interface Measure_SupplementalData {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
     */
    usage?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    criteria: Expression;
}

export interface MeasureReport {
    /**
     * This is a MeasureReport resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The MeasureReport status. No data will be available until the MeasureReport status is complete.
     */
    status?: "complete" | "pending" | "error";
    /**
     * The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure.
     */
    type?: "individual" | "subject-list" | "summary" | "data-collection";
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    measure: canonical;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A reference from one resource to another.
     */
    reporter?: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    improvementNotation?: CodeableConcept;
    /**
     * The results of the calculation, one for each population group in the measure.
     */
    group?: MeasureReport_Group[];
    /**
     * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
     */
    evaluatedResource?: Reference[];
}

export interface MeasureReport_Group {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * The populations that make up the population group, one for each type of population appropriate for the measure.
     */
    population?: MeasureReport_Population[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    measureScore?: Quantity;
    /**
     * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
     */
    stratifier?: MeasureReport_Stratifier[];
}

export interface MeasureReport_Population {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A whole number
     */
    count?: integer;
    /**
     * A reference from one resource to another.
     */
    subjectResults?: Reference;
}

export interface MeasureReport_Stratifier {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The meaning of this stratifier, as defined in the measure definition.
     */
    code?: CodeableConcept[];
    /**
     * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
     */
    stratum?: MeasureReport_Stratum[];
}

export interface MeasureReport_Stratum {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    value?: CodeableConcept;
    /**
     * A stratifier component value.
     */
    component?: MeasureReport_Component[];
    /**
     * The populations that make up the stratum, one for each type of population appropriate to the measure.
     */
    population?: MeasureReport_Population1[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    measureScore?: Quantity;
}

export interface MeasureReport_Component {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    value: CodeableConcept;
}

export interface MeasureReport_Population1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A whole number
     */
    count?: integer;
    /**
     * A reference from one resource to another.
     */
    subjectResults?: Reference;
}

export interface Media {
    /**
     * This is a Media resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
     */
    identifier?: Identifier[];
    /**
     * A procedure that is fulfilled in whole or in part by the creation of this media.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    modality?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    view?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * The date and time(s) at which the media was collected.
     */
    createdDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    createdPeriod?: Period;
    /**
     * An instant in time - known at least to the second
     */
    issued?: instant;
    /**
     * A reference from one resource to another.
     */
    operator?: Reference;
    /**
     * Describes why the event occurred in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    deviceName?: string;
    /**
     * A reference from one resource to another.
     */
    device?: Reference;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    height?: positiveInt;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    width?: positiveInt;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    frames?: positiveInt;
    /**
     * A rational number with implicit precision
     */
    duration?: decimal;
    /**
     * For referring to data content defined in other formats.
     */
    content: Attachment;
    /**
     * Comments made about the media by the performer, subject or other participants.
     */
    note?: Annotation[];
}

export interface Medication {
    /**
     * This is a Medication resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier for this medication.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A reference from one resource to another.
     */
    manufacturer?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    form?: CodeableConcept;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    amount?: Ratio;
    /**
     * Identifies a particular constituent of interest in the product.
     */
    ingredient?: Medication_Ingredient[];
    /**
     * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
     */
    batch?: Medication_Batch;
}

export interface Medication_Ingredient {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    itemReference?: Reference;
    /**
     * Value of "true" or "false"
     */
    isActive?: boolean;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    strength?: Ratio;
}

export interface Medication_Batch {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    lotNumber?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    expirationDate?: dateTime;
}

export interface MedicationAdministration {
    /**
     * This is a MedicationAdministration resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A protocol, guideline, orderset, or other definition that was adhered to in whole or in part by this event.
     */
    instantiates?: uri[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A code indicating why the administration was not performed.
     */
    statusReason?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    medicationReference?: Reference;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    context?: Reference;
    /**
     * Additional information (for example, patient height and weight) that supports the administration of the medication.
     */
    supportingInformation?: Reference[];
    /**
     * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    effectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Indicates who or what performed the medication administration and how they were involved.
     */
    performer?: MedicationAdministration_Performer[];
    /**
     * A code indicating why the medication was given.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition or observation that supports why the medication was administered.
     */
    reasonReference?: Reference[];
    /**
     * A reference from one resource to another.
     */
    request?: Reference;
    /**
     * The device used in administering the medication to the patient.  For example, a particular infusion pump.
     */
    device?: Reference[];
    /**
     * Extra information about the medication administration that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
     */
    dosage?: MedicationAdministration_Dosage;
    /**
     * A summary of the events of interest that have occurred, such as when the administration was verified.
     */
    eventHistory?: Reference[];
}

export interface MedicationAdministration_Performer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    function?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    actor: Reference;
}

export interface MedicationAdministration_Dosage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    site?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    route?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    dose?: Quantity;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    rateRatio?: Ratio;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    rateQuantity?: Quantity;
}

export interface MedicationDispense {
    /**
     * This is a MedicationDispense resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The procedure that trigger the dispense.
     */
    partOf?: Reference[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReasonCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    statusReasonReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    medicationReference?: Reference;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    context?: Reference;
    /**
     * Additional information that supports the medication being dispensed.
     */
    supportingInformation?: Reference[];
    /**
     * Indicates who or what performed the event.
     */
    performer?: MedicationDispense_Performer[];
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * Indicates the medication order that is being dispensed against.
     */
    authorizingPrescription?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    daysSupply?: Quantity;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    whenPrepared?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    whenHandedOver?: dateTime;
    /**
     * A reference from one resource to another.
     */
    destination?: Reference;
    /**
     * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
     */
    receiver?: Reference[];
    /**
     * Extra information about the dispense that could not be conveyed in the other attributes.
     */
    note?: Annotation[];
    /**
     * Indicates how the medication is to be used by the patient.
     */
    dosageInstruction?: Dosage[];
    /**
     * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
     */
    substitution?: MedicationDispense_Substitution;
    /**
     * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. drug-drug interaction, duplicate therapy, dosage alert etc.
     */
    detectedIssue?: Reference[];
    /**
     * A summary of the events of interest that have occurred, such as when the dispense was verified.
     */
    eventHistory?: Reference[];
}

export interface MedicationDispense_Performer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    function?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    actor: Reference;
}

export interface MedicationDispense_Substitution {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    wasSubstituted?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
     */
    reason?: CodeableConcept[];
    /**
     * The person or organization that has primary responsibility for the substitution.
     */
    responsibleParty?: Reference[];
}

export interface MedicationKnowledge {
    /**
     * This is a MedicationKnowledge resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A reference from one resource to another.
     */
    manufacturer?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    doseForm?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amount?: Quantity;
    /**
     * Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
     */
    synonym?: string[];
    /**
     * Associated or related knowledge about a medication.
     */
    relatedMedicationKnowledge?: MedicationKnowledge_RelatedMedicationKnowledge[];
    /**
     * Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
     */
    associatedMedication?: Reference[];
    /**
     * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
     */
    productType?: CodeableConcept[];
    /**
     * Associated documentation about the medication.
     */
    monograph?: MedicationKnowledge_Monograph[];
    /**
     * Identifies a particular constituent of interest in the product.
     */
    ingredient?: MedicationKnowledge_Ingredient[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    preparationInstruction?: markdown;
    /**
     * The intended or approved route of administration.
     */
    intendedRoute?: CodeableConcept[];
    /**
     * The price of the medication.
     */
    cost?: MedicationKnowledge_Cost[];
    /**
     * The program under which the medication is reviewed.
     */
    monitoringProgram?: MedicationKnowledge_MonitoringProgram[];
    /**
     * Guidelines for the administration of the medication.
     */
    administrationGuidelines?: MedicationKnowledge_AdministrationGuidelines[];
    /**
     * Categorization of the medication within a formulary or classification system.
     */
    medicineClassification?: MedicationKnowledge_MedicineClassification[];
    /**
     * Information about a medication that is used to support knowledge.
     */
    packaging?: MedicationKnowledge_Packaging;
    /**
     * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
     */
    drugCharacteristic?: MedicationKnowledge_DrugCharacteristic[];
    /**
     * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
     */
    contraindication?: Reference[];
    /**
     * Regulatory information about a medication.
     */
    regulatory?: MedicationKnowledge_Regulatory[];
    /**
     * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
     */
    kinetics?: MedicationKnowledge_Kinetics[];
}

export interface MedicationKnowledge_RelatedMedicationKnowledge {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Associated documentation about the associated medication knowledge.
     */
    reference: Reference[];
}

export interface MedicationKnowledge_Monograph {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    source?: Reference;
}

export interface MedicationKnowledge_Ingredient {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    itemReference?: Reference;
    /**
     * Value of "true" or "false"
     */
    isActive?: boolean;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    strength?: Ratio;
}

export interface MedicationKnowledge_Cost {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    source?: string;
    /**
     * An amount of economic utility in some recognized currency.
     */
    cost: Money;
}

export interface MedicationKnowledge_MonitoringProgram {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
}

export interface MedicationKnowledge_AdministrationGuidelines {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Dosage for the medication for the specific guidelines.
     */
    dosage?: MedicationKnowledge_Dosage[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    indicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    indicationReference?: Reference;
    /**
     * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
     */
    patientCharacteristics?: MedicationKnowledge_PatientCharacteristics[];
}

export interface MedicationKnowledge_Dosage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Dosage for the medication for the specific guidelines.
     */
    dosage: Dosage[];
}

export interface MedicationKnowledge_PatientCharacteristics {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    characteristicCodeableConcept?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    characteristicQuantity?: Quantity;
    /**
     * The specific characteristic (e.g. height, weight, gender, etc.).
     */
    value?: string[];
}

export interface MedicationKnowledge_MedicineClassification {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
     */
    classification?: CodeableConcept[];
}

export interface MedicationKnowledge_Packaging {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
}

export interface MedicationKnowledge_DrugCharacteristic {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Description of the characteristic.
     */
    valueString?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * Description of the characteristic.
     */
    valueBase64Binary?: string;
}

export interface MedicationKnowledge_Regulatory {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    regulatoryAuthority: Reference;
    /**
     * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
     */
    substitution?: MedicationKnowledge_Substitution[];
    /**
     * Specifies the schedule of a medication in jurisdiction.
     */
    schedule?: MedicationKnowledge_Schedule[];
    /**
     * Information about a medication that is used to support knowledge.
     */
    maxDispense?: MedicationKnowledge_MaxDispense;
}

export interface MedicationKnowledge_Substitution {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    allowed?: boolean;
}

export interface MedicationKnowledge_Schedule {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    schedule: CodeableConcept;
}

export interface MedicationKnowledge_MaxDispense {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity: Quantity;
    /**
     * A length of time.
     */
    period?: Duration;
}

export interface MedicationKnowledge_Kinetics {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The drug concentration measured at certain discrete points in time.
     */
    areaUnderCurve?: Quantity[];
    /**
     * The median lethal dose of a drug.
     */
    lethalDose50?: Quantity[];
    /**
     * A length of time.
     */
    halfLifePeriod?: Duration;
}

export interface MedicationRequest {
    /**
     * This is a MedicationRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    intent?: code;
    /**
     * Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
     */
    category?: CodeableConcept[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * Value of "true" or "false"
     */
    doNotPerform?: boolean;
    /**
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
     */
    reportedBoolean?: boolean;
    /**
     * A reference from one resource to another.
     */
    reportedReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    medicationReference?: Reference;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * Include additional information (for example, patient height and weight) that supports the ordering of the medication.
     */
    supportingInformation?: Reference[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authoredOn?: dateTime;
    /**
     * A reference from one resource to another.
     */
    requester?: Reference;
    /**
     * A reference from one resource to another.
     */
    performer?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    performerType?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    recorder?: Reference;
    /**
     * The reason or the indication for ordering or not ordering the medication.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition or observation that supports why the medication was ordered.
     */
    reasonReference?: Reference[];
    /**
     * The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
     */
    instantiatesUri?: uri[];
    /**
     * A plan or request that is fulfilled in whole or in part by this medication request.
     */
    basedOn?: Reference[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    groupIdentifier?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    courseOfTherapyType?: CodeableConcept;
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Extra information about the prescription that could not be conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Indicates how the medication is to be used by the patient.
     */
    dosageInstruction?: Dosage[];
    /**
     * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
     */
    dispenseRequest?: MedicationRequest_DispenseRequest;
    /**
     * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
     */
    substitution?: MedicationRequest_Substitution;
    /**
     * A reference from one resource to another.
     */
    priorPrescription?: Reference;
    /**
     * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
     */
    detectedIssue?: Reference[];
    /**
     * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
     */
    eventHistory?: Reference[];
}

export interface MedicationRequest_DispenseRequest {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
     */
    initialFill?: MedicationRequest_InitialFill;
    /**
     * A length of time.
     */
    dispenseInterval?: Duration;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    validityPeriod?: Period;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    numberOfRepeatsAllowed?: unsignedInt;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A length of time.
     */
    expectedSupplyDuration?: Duration;
    /**
     * A reference from one resource to another.
     */
    performer?: Reference;
}

export interface MedicationRequest_InitialFill {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A length of time.
     */
    duration?: Duration;
}

export interface MedicationRequest_Substitution {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * True if the prescriber allows a different drug to be dispensed from what was prescribed.
     */
    allowedBoolean?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    allowedCodeableConcept?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reason?: CodeableConcept;
}

export interface MedicationStatement {
    /**
     * This is a MedicationStatement resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * Captures the reason for the current state of the MedicationStatement.
     */
    statusReason?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    medicationReference?: Reference;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    context?: Reference;
    /**
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.taken element is No).
     */
    effectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    dateAsserted?: dateTime;
    /**
     * A reference from one resource to another.
     */
    informationSource?: Reference;
    /**
     * Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
     */
    derivedFrom?: Reference[];
    /**
     * A reason for why the medication is being/was taken.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition or observation that supports why the medication is being/was taken.
     */
    reasonReference?: Reference[];
    /**
     * Provides extra information about the medication statement that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Indicates how the medication is/was or should be taken by the patient.
     */
    dosage?: Dosage[];
}

export interface MedicinalProduct {
    /**
     * This is a MedicinalProduct resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier for this product. Could be an MPID.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    domain?: Coding;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    combinedPharmaceuticalDoseForm?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    additionalMonitoringIndicator?: CodeableConcept;
    /**
     * Whether the Medicinal Product is subject to special measures for regulatory reasons.
     */
    specialMeasures?: string[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    paediatricUseIndicator?: CodeableConcept;
    /**
     * Allows the product to be classified by various systems.
     */
    productClassification?: CodeableConcept[];
    /**
     * Marketing status of the medicinal product, in contrast to marketing authorizaton.
     */
    marketingStatus?: MarketingStatus[];
    /**
     * Pharmaceutical aspects of product.
     */
    pharmaceuticalProduct?: Reference[];
    /**
     * Package representation for the product.
     */
    packagedMedicinalProduct?: Reference[];
    /**
     * Supporting documentation, typically for regulatory submission.
     */
    attachedDocument?: Reference[];
    /**
     * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
     */
    masterFile?: Reference[];
    /**
     * A product specific contact, person (in a role), or an organization.
     */
    contact?: Reference[];
    /**
     * Clinical trials or studies that this product is involved in.
     */
    clinicalTrial?: Reference[];
    /**
     * The product's name, including full name and possibly coded parts.
     */
    name: MedicinalProduct_Name[];
    /**
     * Reference to another product, e.g. for linking authorised to investigational product.
     */
    crossReference?: Identifier[];
    /**
     * An operation applied to the product, for manufacturing or adminsitrative purpose.
     */
    manufacturingBusinessOperation?: MedicinalProduct_ManufacturingBusinessOperation[];
    /**
     * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
     */
    specialDesignation?: MedicinalProduct_SpecialDesignation[];
}

export interface MarketingStatus {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    country: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    jurisdiction?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    dateRange: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    restoreDate?: dateTime;
}

export interface MedicinalProduct_Name {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    productName?: string;
    /**
     * Coding words or phrases of the name.
     */
    namePart?: MedicinalProduct_NamePart[];
    /**
     * Country where the name applies.
     */
    countryLanguage?: MedicinalProduct_CountryLanguage[];
}

export interface MedicinalProduct_NamePart {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    part?: string;
    /**
     * A reference to a code defined by a terminology system.
     */
    type: Coding;
}

export interface MedicinalProduct_CountryLanguage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    country: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    jurisdiction?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    language: CodeableConcept;
}

export interface MedicinalProduct_ManufacturingBusinessOperation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    operationType?: CodeableConcept;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    authorisationReferenceNumber?: Identifier;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    effectiveDate?: dateTime;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    confidentialityIndicator?: CodeableConcept;
    /**
     * The manufacturer or establishment associated with the process.
     */
    manufacturer?: Reference[];
    /**
     * A reference from one resource to another.
     */
    regulator?: Reference;
}

export interface MedicinalProduct_SpecialDesignation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the designation, or procedure number.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    intendedUse?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    indicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    indicationReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status?: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    species?: CodeableConcept;
}

export interface MedicinalProductAuthorization {
    /**
     * This is a MedicinalProductAuthorization resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier for the marketing authorization, as assigned by a regulator.
     */
    identifier?: Identifier[];
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * The country in which the marketing authorization has been granted.
     */
    country?: CodeableConcept[];
    /**
     * Jurisdiction within a country.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status?: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    statusDate?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    restoreDate?: dateTime;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    validityPeriod?: Period;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    dataExclusivityPeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    dateOfFirstAuthorization?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    internationalBirthDate?: dateTime;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    legalBasis?: CodeableConcept;
    /**
     * Authorization in areas within a country.
     */
    jurisdictionalAuthorization?: MedicinalProductAuthorization_JurisdictionalAuthorization[];
    /**
     * A reference from one resource to another.
     */
    holder?: Reference;
    /**
     * A reference from one resource to another.
     */
    regulator?: Reference;
    /**
     * The regulatory authorization of a medicinal product.
     */
    procedure?: MedicinalProductAuthorization_Procedure;
}

export interface MedicinalProductAuthorization_JurisdictionalAuthorization {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The assigned number for the marketing authorization.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    country?: CodeableConcept;
    /**
     * Jurisdiction within a country.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    validityPeriod?: Period;
}

export interface MedicinalProductAuthorization_Procedure {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    datePeriod?: Period;
    /**
     * Date of procedure.
     */
    dateDateTime?: string;
    /**
     * Applcations submitted to obtain a marketing authorization.
     */
    application?: MedicinalProductAuthorization_Procedure[];
}

export interface MedicinalProductContraindication {
    /**
     * This is a MedicinalProductContraindication resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is an indication.
     */
    subject?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    disease?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    diseaseStatus?: CodeableConcept;
    /**
     * A comorbidity (concurrent condition) or coinfection.
     */
    comorbidity?: CodeableConcept[];
    /**
     * Information about the use of the medicinal product in relation to other therapies as part of the indication.
     */
    therapeuticIndication?: Reference[];
    /**
     * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
     */
    otherTherapy?: MedicinalProductContraindication_OtherTherapy[];
    /**
     * The population group to which this applies.
     */
    population?: Population[];
}

export interface MedicinalProductContraindication_OtherTherapy {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    therapyRelationshipType: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    medicationReference?: Reference;
}

export interface Population {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    ageRange?: Range;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    ageCodeableConcept?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    gender?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    race?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    physiologicalCondition?: CodeableConcept;
}

export interface MedicinalProductIndication {
    /**
     * This is a MedicinalProductIndication resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is an indication.
     */
    subject?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    diseaseSymptomProcedure?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    diseaseStatus?: CodeableConcept;
    /**
     * Comorbidity (concurrent condition) or co-infection as part of the indication.
     */
    comorbidity?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    intendedEffect?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    duration?: Quantity;
    /**
     * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
     */
    otherTherapy?: MedicinalProductIndication_OtherTherapy[];
    /**
     * Describe the undesirable effects of the medicinal product.
     */
    undesirableEffect?: Reference[];
    /**
     * The population group to which this applies.
     */
    population?: Population[];
}

export interface MedicinalProductIndication_OtherTherapy {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    therapyRelationshipType: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    medicationReference?: Reference;
}

export interface MedicinalProductIngredient {
    /**
     * This is a MedicinalProductIngredient resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    allergenicIndicator?: boolean;
    /**
     * Manufacturer of this Ingredient.
     */
    manufacturer?: Reference[];
    /**
     * A specified substance that comprises this ingredient.
     */
    specifiedSubstance?: MedicinalProductIngredient_SpecifiedSubstance[];
    /**
     * An ingredient of a manufactured item or pharmaceutical product.
     */
    substance?: MedicinalProductIngredient_Substance;
}

export interface MedicinalProductIngredient_SpecifiedSubstance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    group: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    confidentiality?: CodeableConcept;
    /**
     * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
     */
    strength?: MedicinalProductIngredient_Strength[];
}

export interface MedicinalProductIngredient_Strength {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    presentation: Ratio;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    presentationLowLimit?: Ratio;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    concentration?: Ratio;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    concentrationLowLimit?: Ratio;
    /**
     * A sequence of Unicode characters
     */
    measurementPoint?: string;
    /**
     * The country or countries for which the strength range applies.
     */
    country?: CodeableConcept[];
    /**
     * Strength expressed in terms of a reference substance.
     */
    referenceStrength?: MedicinalProductIngredient_ReferenceStrength[];
}

export interface MedicinalProductIngredient_ReferenceStrength {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    substance?: CodeableConcept;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    strength: Ratio;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    strengthLowLimit?: Ratio;
    /**
     * A sequence of Unicode characters
     */
    measurementPoint?: string;
    /**
     * The country or countries for which the strength range applies.
     */
    country?: CodeableConcept[];
}

export interface MedicinalProductIngredient_Substance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
     */
    strength?: MedicinalProductIngredient_Strength[];
}

export interface MedicinalProductInteraction {
    /**
     * This is a MedicinalProductInteraction resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is a described interaction.
     */
    subject?: Reference[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * The specific medication, food or laboratory test that interacts.
     */
    interactant?: MedicinalProductInteraction_Interactant[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    effect?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    incidence?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    management?: CodeableConcept;
}

export interface MedicinalProductInteraction_Interactant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    itemReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    itemCodeableConcept?: CodeableConcept;
}

export interface MedicinalProductManufactured {
    /**
     * This is a MedicinalProductManufactured resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    manufacturedDoseForm: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unitOfPresentation?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity: Quantity;
    /**
     * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
     */
    manufacturer?: Reference[];
    /**
     * Ingredient.
     */
    ingredient?: Reference[];
    /**
     * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
     */
    physicalCharacteristics?: ProdCharacteristic;
    /**
     * Other codeable characteristics.
     */
    otherCharacteristics?: CodeableConcept[];
}

export interface MedicinalProductPackaged {
    /**
     * This is a MedicinalProductPackaged resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier.
     */
    identifier?: Identifier[];
    /**
     * The product with this is a pack for.
     */
    subject?: Reference[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * Marketing information.
     */
    marketingStatus?: MarketingStatus[];
    /**
     * A reference from one resource to another.
     */
    marketingAuthorization?: Reference;
    /**
     * Manufacturer of this Package Item.
     */
    manufacturer?: Reference[];
    /**
     * Batch numbering.
     */
    batchIdentifier?: MedicinalProductPackaged_BatchIdentifier[];
    /**
     * A packaging item, as a contained for medicine, possibly with other packaging items within.
     */
    packageItem: MedicinalProductPackaged_PackageItem[];
}

export interface MedicinalProductPackaged_BatchIdentifier {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    outerPackaging: Identifier;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    immediatePackaging?: Identifier;
}

export interface MedicinalProductPackaged_PackageItem {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Including possibly Data Carrier Identifier.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity: Quantity;
    /**
     * Material type of the package item.
     */
    material?: CodeableConcept[];
    /**
     * A possible alternate material for the packaging.
     */
    alternateMaterial?: CodeableConcept[];
    /**
     * A device accompanying a medicinal product.
     */
    device?: Reference[];
    /**
     * The manufactured item as contained in the packaged medicinal product.
     */
    manufacturedItem?: Reference[];
    /**
     * Allows containers within containers.
     */
    packageItem?: MedicinalProductPackaged_PackageItem[];
    /**
     * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
     */
    physicalCharacteristics?: ProdCharacteristic;
    /**
     * Other codeable characteristics.
     */
    otherCharacteristics?: CodeableConcept[];
    /**
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: ProductShelfLife[];
    /**
     * Manufacturer of this Package Item.
     */
    manufacturer?: Reference[];
}

export interface MedicinalProductPharmaceutical {
    /**
     * This is a MedicinalProductPharmaceutical resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier for the pharmaceutical medicinal product.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    administrableDoseForm: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unitOfPresentation?: CodeableConcept;
    /**
     * Ingredient.
     */
    ingredient?: Reference[];
    /**
     * Accompanying device.
     */
    device?: Reference[];
    /**
     * Characteristics e.g. a products onset of action.
     */
    characteristics?: MedicinalProductPharmaceutical_Characteristics[];
    /**
     * The path by which the pharmaceutical product is taken into or makes contact with the body.
     */
    routeOfAdministration: MedicinalProductPharmaceutical_RouteOfAdministration[];
}

export interface MedicinalProductPharmaceutical_Characteristics {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status?: CodeableConcept;
}

export interface MedicinalProductPharmaceutical_RouteOfAdministration {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    firstDose?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    maxSingleDose?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    maxDosePerDay?: Quantity;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    maxDosePerTreatmentPeriod?: Ratio;
    /**
     * A length of time.
     */
    maxTreatmentPeriod?: Duration;
    /**
     * A species for which this route applies.
     */
    targetSpecies?: MedicinalProductPharmaceutical_TargetSpecies[];
}

export interface MedicinalProductPharmaceutical_TargetSpecies {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A species specific time during which consumption of animal product is not appropriate.
     */
    withdrawalPeriod?: MedicinalProductPharmaceutical_WithdrawalPeriod[];
}

export interface MedicinalProductPharmaceutical_WithdrawalPeriod {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    tissue: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    value: Quantity;
    /**
     * A sequence of Unicode characters
     */
    supportingInformation?: string;
}

export interface MedicinalProductUndesirableEffect {
    /**
     * This is a MedicinalProductUndesirableEffect resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is an indication.
     */
    subject?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    symptomConditionEffect?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    classification?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    frequencyOfOccurrence?: CodeableConcept;
    /**
     * The population group to which this applies.
     */
    population?: Population[];
}

export interface MessageDefinition {
    /**
     * This is a MessageDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A MessageDefinition that is superseded by this definition.
     */
    replaces?: canonical[];
    /**
     * The status of this message definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the message definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    base?: canonical;
    /**
     * Identifies a protocol or workflow that this MessageDefinition represents a step in.
     */
    parent?: canonical[];
    /**
     * A reference to a code defined by a terminology system.
     */
    eventCoding?: Coding;
    /**
     * Event code or link to the EventDefinition.
     */
    eventUri?: string;
    /**
     * The impact of the content of the message.
     */
    category?: "consequence" | "currency" | "notification";
    /**
     * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
     */
    focus?: MessageDefinition_Focus[];
    /**
     * Declare at a message definition level whether a response is required or only upon error or success, or never.
     */
    responseRequired?: "always" | "on-error" | "never" | "on-success";
    /**
     * Indicates what types of messages may be sent as an application-level response to this message.
     */
    allowedResponse?: MessageDefinition_AllowedResponse[];
    /**
     * Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a [[[GraphDefinition]]] that it controls what resources are to be added to the bundle when building the document. The GraphDefinition can also specify profiles that apply to the various resources.
     */
    graph?: canonical[];
}

export interface MessageDefinition_Focus {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    profile?: canonical;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    min?: unsignedInt;
    /**
     * A sequence of Unicode characters
     */
    max?: string;
}

export interface MessageDefinition_AllowedResponse {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    message: canonical;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    situation?: markdown;
}

export interface MessageHeader {
    /**
     * This is a MessageHeader resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    eventCoding?: Coding;
    /**
     * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri to the EventDefinition.
     */
    eventUri?: string;
    /**
     * The destination application which the message is intended for.
     */
    destination?: MessageHeader_Destination[];
    /**
     * A reference from one resource to another.
     */
    sender?: Reference;
    /**
     * A reference from one resource to another.
     */
    enterer?: Reference;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
     */
    source: MessageHeader_Source;
    /**
     * A reference from one resource to another.
     */
    responsible?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reason?: CodeableConcept;
    /**
     * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
     */
    response?: MessageHeader_Response;
    /**
     * The actual data of the message - a reference to the root/focus class of the event.
     */
    focus?: Reference[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    definition?: canonical;
}

export interface MessageHeader_Destination {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A reference from one resource to another.
     */
    target?: Reference;
    /**
     * A URI that is a literal reference
     */
    endpoint?: url;
    /**
     * A reference from one resource to another.
     */
    receiver?: Reference;
}

export interface MessageHeader_Source {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    software?: string;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    contact?: ContactPoint;
    /**
     * A URI that is a literal reference
     */
    endpoint?: url;
}

export interface MessageHeader_Response {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    identifier?: id;
    /**
     * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
     */
    code?: "ok" | "transient-error" | "fatal-error";
    /**
     * A reference from one resource to another.
     */
    details?: Reference;
}

export interface MolecularSequence {
    /**
     * This is a MolecularSequence resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier for this particular sequence instance. This is a FHIR-defined id.
     */
    identifier?: Identifier[];
    /**
     * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
     */
    type?: "aa" | "dna" | "rna";
    /**
     * A whole number
     */
    coordinateSystem?: integer;
    /**
     * A reference from one resource to another.
     */
    patient?: Reference;
    /**
     * A reference from one resource to another.
     */
    specimen?: Reference;
    /**
     * A reference from one resource to another.
     */
    device?: Reference;
    /**
     * A reference from one resource to another.
     */
    performer?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * Raw data describing a biological sequence.
     */
    referenceSeq?: MolecularSequence_ReferenceSeq;
    /**
     * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
     */
    variant?: MolecularSequence_Variant[];
    /**
     * A sequence of Unicode characters
     */
    observedSeq?: string;
    /**
     * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
     */
    quality?: MolecularSequence_Quality[];
    /**
     * A whole number
     */
    readCoverage?: integer;
    /**
     * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
     */
    repository?: MolecularSequence_Repository[];
    /**
     * Pointer to next atomic sequence which at most contains one variant.
     */
    pointer?: Reference[];
    /**
     * Information about chromosome structure variation.
     */
    structureVariant?: MolecularSequence_StructureVariant[];
}

export interface MolecularSequence_ReferenceSeq {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    chromosome?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    genomeBuild?: string;
    /**
     * A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
     */
    orientation?: "sense" | "antisense";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    referenceSeqId?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    referenceSeqPointer?: Reference;
    /**
     * A sequence of Unicode characters
     */
    referenceSeqString?: string;
    /**
     * An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
     */
    strand?: "watson" | "crick";
    /**
     * A whole number
     */
    windowStart?: integer;
    /**
     * A whole number
     */
    windowEnd?: integer;
}

export interface MolecularSequence_Variant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    start?: integer;
    /**
     * A whole number
     */
    end?: integer;
    /**
     * A sequence of Unicode characters
     */
    observedAllele?: string;
    /**
     * A sequence of Unicode characters
     */
    referenceAllele?: string;
    /**
     * A sequence of Unicode characters
     */
    cigar?: string;
    /**
     * A reference from one resource to another.
     */
    variantPointer?: Reference;
}

export interface MolecularSequence_Quality {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * INDEL / SNP / Undefined variant.
     */
    type?: "indel" | "snp" | "unknown";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    standardSequence?: CodeableConcept;
    /**
     * A whole number
     */
    start?: integer;
    /**
     * A whole number
     */
    end?: integer;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    score?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    truthTP?: decimal;
    /**
     * A rational number with implicit precision
     */
    queryTP?: decimal;
    /**
     * A rational number with implicit precision
     */
    truthFN?: decimal;
    /**
     * A rational number with implicit precision
     */
    queryFP?: decimal;
    /**
     * A rational number with implicit precision
     */
    gtFP?: decimal;
    /**
     * A rational number with implicit precision
     */
    precision?: decimal;
    /**
     * A rational number with implicit precision
     */
    recall?: decimal;
    /**
     * A rational number with implicit precision
     */
    fScore?: decimal;
    /**
     * Raw data describing a biological sequence.
     */
    roc?: MolecularSequence_Roc;
}

export interface MolecularSequence_Roc {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Invidual data point representing the GQ (genotype quality) score threshold.
     */
    score?: integer[];
    /**
     * The number of true positives if the GQ score threshold was set to "score" field value.
     */
    numTP?: integer[];
    /**
     * The number of false positives if the GQ score threshold was set to "score" field value.
     */
    numFP?: integer[];
    /**
     * The number of false negatives if the GQ score threshold was set to "score" field value.
     */
    numFN?: integer[];
    /**
     * Calculated precision if the GQ score threshold was set to "score" field value.
     */
    precision?: decimal[];
    /**
     * Calculated sensitivity if the GQ score threshold was set to "score" field value.
     */
    sensitivity?: decimal[];
    /**
     * Calculated fScore if the GQ score threshold was set to "score" field value.
     */
    fMeasure?: decimal[];
}

export interface MolecularSequence_Repository {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
     */
    type?: "directlink" | "openapi" | "login" | "oauth" | "other";
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    datasetId?: string;
    /**
     * A sequence of Unicode characters
     */
    variantsetId?: string;
    /**
     * A sequence of Unicode characters
     */
    readsetId?: string;
}

export interface MolecularSequence_StructureVariant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    variantType?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    exact?: boolean;
    /**
     * A whole number
     */
    length?: integer;
    /**
     * Raw data describing a biological sequence.
     */
    outer?: MolecularSequence_Outer;
    /**
     * Raw data describing a biological sequence.
     */
    inner?: MolecularSequence_Inner;
}

export interface MolecularSequence_Outer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    start?: integer;
    /**
     * A whole number
     */
    end?: integer;
}

export interface MolecularSequence_Inner {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    start?: integer;
    /**
     * A whole number
     */
    end?: integer;
}

export interface NamingSystem {
    /**
     * This is a NamingSystem resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The status of this naming system. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Indicates the purpose for the naming system - what kinds of things does it make unique?
     */
    kind?: "codesystem" | "identifier" | "root";
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A sequence of Unicode characters
     */
    responsible?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the naming system is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * Indicates how the system may be identified when referenced in electronic exchange.
     */
    uniqueId: NamingSystem_UniqueId[];
}

export interface NamingSystem_UniqueId {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies the unique identifier scheme used for this particular identifier.
     */
    type?: "oid" | "uuid" | "uri" | "other";
    /**
     * A sequence of Unicode characters
     */
    value?: string;
    /**
     * Value of "true" or "false"
     */
    preferred?: boolean;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface NutritionOrder {
    /**
     * This is a NutritionOrder resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this order by the order sender or by the order receiver.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    instantiatesUri?: uri[];
    /**
     * The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    instantiates?: uri[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    intent?: code;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    dateTime?: dateTime;
    /**
     * A reference from one resource to another.
     */
    orderer?: Reference;
    /**
     * A link to a record of allergies or intolerances  which should be included in the nutrition order.
     */
    allergyIntolerance?: Reference[];
    /**
     * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     */
    foodPreferenceModifier?: CodeableConcept[];
    /**
     * This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     */
    excludeFoodModifier?: CodeableConcept[];
    /**
     * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
     */
    oralDiet?: NutritionOrder_OralDiet;
    /**
     * Oral nutritional products given in order to add further nutritional value to the patient's diet.
     */
    supplement?: NutritionOrder_Supplement[];
    /**
     * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
     */
    enteralFormula?: NutritionOrder_EnteralFormula;
    /**
     * Comments made about the {{title}} by the requester, performer, subject or other participants.
     */
    note?: Annotation[];
}

export interface NutritionOrder_OralDiet {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
     */
    type?: CodeableConcept[];
    /**
     * The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
     */
    schedule?: Timing[];
    /**
     * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
     */
    nutrient?: NutritionOrder_Nutrient[];
    /**
     * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
     */
    texture?: NutritionOrder_Texture[];
    /**
     * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
     */
    fluidConsistencyType?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    instruction?: string;
}

export interface NutritionOrder_Nutrient {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    modifier?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amount?: Quantity;
}

export interface NutritionOrder_Texture {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    modifier?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    foodType?: CodeableConcept;
}

export interface NutritionOrder_Supplement {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    productName?: string;
    /**
     * The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
     */
    schedule?: Timing[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A sequence of Unicode characters
     */
    instruction?: string;
}

export interface NutritionOrder_EnteralFormula {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    baseFormulaType?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    baseFormulaProductName?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    additiveType?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    additiveProductName?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    caloricDensity?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    routeofAdministration?: CodeableConcept;
    /**
     * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
     */
    administration?: NutritionOrder_Administration[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    maxVolumeToDeliver?: Quantity;
    /**
     * A sequence of Unicode characters
     */
    administrationInstruction?: string;
}

export interface NutritionOrder_Administration {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    schedule?: Timing;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    rateQuantity?: Quantity;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    rateRatio?: Ratio;
}

export interface Observation {
    /**
     * This is a Observation resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this observation.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
     */
    partOf?: Reference[];
    /**
     * The status of the result value.
     */
    status?: "registered" | "preliminary" | "final" | "amended" | "corrected" | "cancelled" | "entered-in-error" | "unknown";
    /**
     * A code that classifies the general type of observation being made.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
     */
    focus?: Reference[];
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    effectiveTiming?: Timing;
    /**
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveInstant?: string;
    /**
     * An instant in time - known at least to the second
     */
    issued?: instant;
    /**
     * Who was responsible for asserting the observed value as "true".
     */
    performer?: Reference[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueString?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueBoolean?: boolean;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueInteger?: string;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    valueRatio?: Ratio;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    valueSampledData?: SampledData;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueTime?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * A categorical assessment of an observation value.  For example, high, low, normal.
     */
    interpretation?: CodeableConcept[];
    /**
     * Comments about the observation or the results.
     */
    note?: Annotation[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    specimen?: Reference;
    /**
     * A reference from one resource to another.
     */
    device?: Reference;
    /**
     * Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two \`referenceRange\` elements would be used.
     */
    referenceRange?: Observation_ReferenceRange[];
    /**
     * This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    hasMember?: Reference[];
    /**
     * The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
     */
    derivedFrom?: Reference[];
    /**
     * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
     */
    component?: Observation_Component[];
}

export interface SampledData {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    origin: Quantity;
    /**
     * A rational number with implicit precision
     */
    period?: decimal;
    /**
     * A rational number with implicit precision
     */
    factor?: decimal;
    /**
     * A rational number with implicit precision
     */
    lowerLimit?: decimal;
    /**
     * A rational number with implicit precision
     */
    upperLimit?: decimal;
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    dimensions?: positiveInt;
    /**
     * A sequence of Unicode characters
     */
    data?: string;
}

export interface Observation_ReferenceRange {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    low?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    high?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple \`appliesTo\`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
     */
    appliesTo?: CodeableConcept[];
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    age?: Range;
    /**
     * A sequence of Unicode characters
     */
    text?: string;
}

export interface Observation_Component {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueString?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueBoolean?: boolean;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueInteger?: string;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    valueRatio?: Ratio;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    valueSampledData?: SampledData;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueTime?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * A categorical assessment of an observation value.  For example, high, low, normal.
     */
    interpretation?: CodeableConcept[];
    /**
     * Guidance on how to interpret the value by comparison to a normal or recommended range.
     */
    referenceRange?: Observation_ReferenceRange[];
}

export interface ObservationDefinition {
    /**
     * This is a ObservationDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    publisher?: Reference;
    /**
     * A code that classifies the general type of observation.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A unique identifier assigned to this ObservationDefinition artifact.
     */
    identifier?: Identifier[];
    /**
     * The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
     */
    permittedDataType?: ("Quantity" | "CodeableConcept" | "string" | "boolean" | "integer" | "Range" | "Ratio" | "SampledData" | "time" | "dateTime" | "Period")[];
    /**
     * Value of "true" or "false"
     */
    multipleResultsAllowed?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    preferredReportName?: string;
    /**
     * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
     */
    quantitativeDetails?: ObservationDefinition_QuantitativeDetails;
    /**
     * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
     */
    qualifiedInterval?: ObservationDefinition_QualifiedInterval[];
    /**
     * A reference from one resource to another.
     */
    validCodedValueSet?: Reference;
    /**
     * A reference from one resource to another.
     */
    normalCodedValueSet?: Reference;
    /**
     * A reference from one resource to another.
     */
    abnormalCodedValueSet?: Reference;
    /**
     * A reference from one resource to another.
     */
    criticalCodedValueSet?: Reference;
}

export interface ObservationDefinition_QuantitativeDetails {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    customaryUnit?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unit?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    conversionFactor?: decimal;
    /**
     * A whole number
     */
    decimalPrecision?: integer;
}

export interface ObservationDefinition_QualifiedInterval {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The category of interval of values for continuous or ordinal observations conforming to this ObservationDefinition.
     */
    category?: "reference" | "critical" | "absolute";
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    range?: Range;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    context?: CodeableConcept;
    /**
     * Codes to indicate the target population this reference range applies to.
     */
    appliesTo?: CodeableConcept[];
    /**
     * Sex of the population the range applies to.
     */
    gender?: "male" | "female" | "other" | "unknown";
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    age?: Range;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    gestationalAge?: Range;
    /**
     * A sequence of Unicode characters
     */
    condition?: string;
}

export interface OperationDefinition {
    /**
     * This is a OperationDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this operation definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Whether this is an operation or a named query.
     */
    kind?: "operation" | "query";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the operation definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * Value of "true" or "false"
     */
    affectsState?: boolean;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    comment?: markdown;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    base?: canonical;
    /**
     * The types on which this operation can be executed.
     */
    resource?: code[];
    /**
     * Value of "true" or "false"
     */
    system?: boolean;
    /**
     * Value of "true" or "false"
     */
    type?: boolean;
    /**
     * Value of "true" or "false"
     */
    instance?: boolean;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    inputProfile?: canonical;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    outputProfile?: canonical;
    /**
     * The parameters for the operation/query.
     */
    parameter?: OperationDefinition_Parameter[];
    /**
     * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
     */
    overload?: OperationDefinition_Overload[];
}

export interface OperationDefinition_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    name?: code;
    /**
     * Whether this is an input or an output parameter.
     */
    use?: "in" | "out";
    /**
     * A whole number
     */
    min?: integer;
    /**
     * A sequence of Unicode characters
     */
    max?: string;
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type?: code;
    /**
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     */
    targetProfile?: canonical[];
    /**
     * How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
     */
    searchType?: "number" | "date" | "string" | "token" | "reference" | "composite" | "quantity" | "uri" | "special";
    /**
     * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
     */
    binding?: OperationDefinition_Binding;
    /**
     * Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
     */
    referencedFrom?: OperationDefinition_ReferencedFrom[];
    /**
     * The parts of a nested Parameter.
     */
    part?: OperationDefinition_Parameter[];
}

export interface OperationDefinition_Binding {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
     */
    strength?: "required" | "extensible" | "preferred" | "example";
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    valueSet: canonical;
}

export interface OperationDefinition_ReferencedFrom {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    source?: string;
    /**
     * A sequence of Unicode characters
     */
    sourceId?: string;
}

export interface OperationDefinition_Overload {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name of parameter to include in overload.
     */
    parameterName?: string[];
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
}

export interface OperationOutcome {
    /**
     * This is a OperationOutcome resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An error, warning, or information message that results from a system action.
     */
    issue: OperationOutcome_Issue[];
    /**
     * A whole number
     */
    status?: integer;
    resource?: ResourceList;
}

export interface OperationOutcome_Issue {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates whether the issue indicates a variation from successful processing.
     */
    severity?: "fatal" | "error" | "warning" | "information";
    /**
     * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
     */
    code?: "invalid" | "structure" | "required" | "value" | "invariant" | "security" | "login" | "unknown" | "expired" | "forbidden" | "suppressed" | "processing" | "not-supported" | "duplicate" | "multiple-matches" | "not-found" | "deleted" | "too-long" | "code-invalid" | "extension" | "too-costly" | "business-rule" | "conflict" | "transient" | "lock-error" | "no-store" | "exception" | "timeout" | "incomplete" | "throttled" | "informational";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    details?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    diagnostics?: string;
    /**
     * This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse.
     *
     * For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
     */
    location?: string[];
    /**
     * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
     */
    expression?: string[];
}

export interface Organization {
    /**
     * This is a Organization resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the organization that is used to identify the organization across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * The kind(s) of organization that this is.
     */
    type?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A list of alternate names that the organization is known as, or was known as in the past.
     */
    alias?: string[];
    /**
     * A contact detail for the organization.
     */
    telecom?: ContactPoint[];
    /**
     * An address for the organization.
     */
    address?: Address[];
    /**
     * A reference from one resource to another.
     */
    partOf?: Reference;
    /**
     * Contact for the organization for a certain purpose.
     */
    contact?: Organization_Contact[];
    /**
     * Technical endpoints providing access to services operated for the organization.
     */
    endpoint?: Reference[];
}

export interface Organization_Contact {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    purpose?: CodeableConcept;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    name?: HumanName;
    /**
     * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
     */
    telecom?: ContactPoint[];
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    address?: Address;
}

export interface OrganizationAffiliation {
    /**
     * This is a OrganizationAffiliation resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers that are specific to this role.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    organization?: Reference;
    /**
     * A reference from one resource to another.
     */
    participatingOrganization?: Reference;
    /**
     * Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
     */
    network?: Reference[];
    /**
     * Definition of the role the participatingOrganization plays in the association.
     */
    code?: CodeableConcept[];
    /**
     * Specific specialty of the participatingOrganization in the context of the role.
     */
    specialty?: CodeableConcept[];
    /**
     * The location(s) at which the role occurs.
     */
    location?: Reference[];
    /**
     * Healthcare services provided through the role.
     */
    healthcareService?: Reference[];
    /**
     * Contact details at the participatingOrganization relevant to this Affiliation.
     */
    telecom?: ContactPoint[];
    /**
     * Technical endpoints providing access to services operated for this role.
     */
    endpoint?: Reference[];
}

export interface Parameters {
    /**
     * This is a Parameters resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A parameter passed to or received from the operation.
     */
    parameter?: Parameters_Parameter[];
}

export interface Parameters_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * If the parameter is a data type.
     */
    valueBase64Binary?: string;
    /**
     * If the parameter is a data type.
     */
    valueBoolean?: boolean;
    /**
     * If the parameter is a data type.
     */
    valueCanonical?: string;
    /**
     * If the parameter is a data type.
     */
    valueCode?: string;
    /**
     * If the parameter is a data type.
     */
    valueDate?: string;
    /**
     * If the parameter is a data type.
     */
    valueDateTime?: string;
    /**
     * If the parameter is a data type.
     */
    valueDecimal?: string;
    /**
     * If the parameter is a data type.
     */
    valueId?: string;
    /**
     * If the parameter is a data type.
     */
    valueInstant?: string;
    /**
     * If the parameter is a data type.
     */
    valueInteger?: string;
    /**
     * If the parameter is a data type.
     */
    valueMarkdown?: string;
    /**
     * If the parameter is a data type.
     */
    valueOid?: string;
    /**
     * If the parameter is a data type.
     */
    valuePositiveInt?: string;
    /**
     * If the parameter is a data type.
     */
    valueString?: string;
    /**
     * If the parameter is a data type.
     */
    valueTime?: string;
    /**
     * If the parameter is a data type.
     */
    valueUnsignedInt?: string;
    /**
     * If the parameter is a data type.
     */
    valueUri?: string;
    /**
     * If the parameter is a data type.
     */
    valueUrl?: string;
    /**
     * If the parameter is a data type.
     */
    valueUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    valueAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    valueAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    valueAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    valueContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    valueDistance?: Distance;
    /**
     * A length of time.
     */
    valueDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    valueHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    valueIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    valueMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    valueRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    valueSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    valueSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    valueTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    valueContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    valueContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    valueExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    valueUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    valueDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    valueMeta?: Meta;
    resource?: ResourceList;
    /**
     * A named part of a multi-part parameter.
     */
    part?: Parameters_Parameter[];
}

export interface Count {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: "<" | "<=" | ">=" | ">";
    /**
     * A sequence of Unicode characters
     */
    unit?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
}

export interface Distance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: "<" | "<=" | ">=" | ">";
    /**
     * A sequence of Unicode characters
     */
    unit?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
}

export interface Contributor {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The type of contributor.
     */
    type?: "author" | "editor" | "reviewer" | "endorser";
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * Contact details to assist a user in finding and communicating with the contributor.
     */
    contact?: ContactDetail[];
}

export interface Patient {
    /**
     * This is a Patient resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier for this patient.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A name associated with the individual.
     */
    name?: HumanName[];
    /**
     * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
     */
    telecom?: ContactPoint[];
    /**
     * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
     */
    gender?: "male" | "female" | "other" | "unknown";
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    birthDate?: date;
    /**
     * Indicates if the individual is deceased or not.
     */
    deceasedBoolean?: boolean;
    /**
     * Indicates if the individual is deceased or not.
     */
    deceasedDateTime?: string;
    /**
     * An address for the individual.
     */
    address?: Address[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    maritalStatus?: CodeableConcept;
    /**
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     */
    multipleBirthBoolean?: boolean;
    /**
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     */
    multipleBirthInteger?: string;
    /**
     * Image of the patient.
     */
    photo?: Attachment[];
    /**
     * A contact party (e.g. guardian, partner, friend) for the patient.
     */
    contact?: Patient_Contact[];
    /**
     * A language which may be used to communicate with the patient about his or her health.
     */
    communication?: Patient_Communication[];
    /**
     * Patient's nominated care provider.
     */
    generalPractitioner?: Reference[];
    /**
     * A reference from one resource to another.
     */
    managingOrganization?: Reference;
    /**
     * Link to another patient resource that concerns the same actual patient.
     */
    link?: Patient_Link[];
}

export interface Patient_Contact {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The nature of the relationship between the patient and the contact person.
     */
    relationship?: CodeableConcept[];
    /**
     * A human's name with the ability to identify parts and usage.
     */
    name?: HumanName;
    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    address?: Address;
    /**
     * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
     */
    gender?: "male" | "female" | "other" | "unknown";
    /**
     * A reference from one resource to another.
     */
    organization?: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
}

export interface Patient_Communication {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    language: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    preferred?: boolean;
}

export interface Patient_Link {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    other: Reference;
    /**
     * The type of link between this patient resource and another patient resource.
     */
    type?: "replaced-by" | "replaces" | "refer" | "seealso";
}

export interface PaymentNotice {
    /**
     * This is a PaymentNotice resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this payment notice.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A reference from one resource to another.
     */
    request?: Reference;
    /**
     * A reference from one resource to another.
     */
    response?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    provider?: Reference;
    /**
     * A reference from one resource to another.
     */
    payment: Reference;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    paymentDate?: date;
    /**
     * A reference from one resource to another.
     */
    payee?: Reference;
    /**
     * A reference from one resource to another.
     */
    recipient: Reference;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount: Money;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    paymentStatus?: CodeableConcept;
}

export interface PaymentReconciliation {
    /**
     * This is a PaymentReconciliation resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this payment reconciliation.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    paymentIssuer?: Reference;
    /**
     * A reference from one resource to another.
     */
    request?: Reference;
    /**
     * A reference from one resource to another.
     */
    requestor?: Reference;
    /**
     * The outcome of a request for a reconciliation.
     */
    outcome?: "queued" | "complete" | "error" | "partial";
    /**
     * A sequence of Unicode characters
     */
    disposition?: string;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    paymentDate?: date;
    /**
     * An amount of economic utility in some recognized currency.
     */
    paymentAmount: Money;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    paymentIdentifier?: Identifier;
    /**
     * Distribution of the payment amount for a previously acknowledged payable.
     */
    detail?: PaymentReconciliation_Detail[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    formCode?: CodeableConcept;
    /**
     * A note that describes or explains the processing in a human readable form.
     */
    processNote?: PaymentReconciliation_ProcessNote[];
}

export interface PaymentReconciliation_Detail {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    predecessor?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    request?: Reference;
    /**
     * A reference from one resource to another.
     */
    submitter?: Reference;
    /**
     * A reference from one resource to another.
     */
    response?: Reference;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    date?: date;
    /**
     * A reference from one resource to another.
     */
    responsible?: Reference;
    /**
     * A reference from one resource to another.
     */
    payee?: Reference;
    /**
     * An amount of economic utility in some recognized currency.
     */
    amount?: Money;
}

export interface PaymentReconciliation_ProcessNote {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The business purpose of the note text.
     */
    type?: "display" | "print" | "printoper";
    /**
     * A sequence of Unicode characters
     */
    text?: string;
}

export interface Person {
    /**
     * This is a Person resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for a person within a particular scope.
     */
    identifier?: Identifier[];
    /**
     * A name associated with the person.
     */
    name?: HumanName[];
    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * Administrative Gender.
     */
    gender?: "male" | "female" | "other" | "unknown";
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    birthDate?: date;
    /**
     * One or more addresses for the person.
     */
    address?: Address[];
    /**
     * For referring to data content defined in other formats.
     */
    photo?: Attachment;
    /**
     * A reference from one resource to another.
     */
    managingOrganization?: Reference;
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * Link to a resource that concerns the same actual person.
     */
    link?: Person_Link[];
}

export interface Person_Link {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    target: Reference;
    /**
     * Level of assurance that this link is associated with the target resource.
     */
    assurance?: "level1" | "level2" | "level3" | "level4";
}

export interface PlanDefinition {
    /**
     * This is a PlanDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * The status of this plan definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the plan definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing any formal logic used by the plan definition.
     */
    library?: canonical[];
    /**
     * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
     */
    goal?: PlanDefinition_Goal[];
    /**
     * An action or group of actions to be taken as part of the plan.
     */
    action?: PlanDefinition_Action[];
}

export interface PlanDefinition_Goal {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    description: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    priority?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    start?: CodeableConcept;
    /**
     * Identifies problems, conditions, issues, or concerns the goal is intended to address.
     */
    addresses?: CodeableConcept[];
    /**
     * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * Indicates what should be done and within what timeframe.
     */
    target?: PlanDefinition_Target[];
}

export interface PlanDefinition_Target {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    measure?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    detailQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    detailRange?: Range;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * A length of time.
     */
    due?: Duration;
}

export interface PlanDefinition_Action {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    prefix?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A sequence of Unicode characters
     */
    textEquivalent?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for the section of a documentation template.
     */
    code?: CodeableConcept[];
    /**
     * A description of why this action is necessary or appropriate.
     */
    reason?: CodeableConcept[];
    /**
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
     */
    goalId?: id[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A description of when the action should be triggered.
     */
    trigger?: TriggerDefinition[];
    /**
     * An expression that describes applicability criteria or start/stop conditions for the action.
     */
    condition?: PlanDefinition_Condition[];
    /**
     * Defines input data requirements for the action.
     */
    input?: DataRequirement[];
    /**
     * Defines the outputs of the action, if any.
     */
    output?: DataRequirement[];
    /**
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     */
    relatedAction?: PlanDefinition_RelatedAction[];
    /**
     * An optional value describing when the action should be performed.
     */
    timingDateTime?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    timingAge?: Age;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timingPeriod?: Period;
    /**
     * A length of time.
     */
    timingDuration?: Duration;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    timingRange?: Range;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    timingTiming?: Timing;
    /**
     * Indicates who should participate in performing the action described.
     */
    participant?: PlanDefinition_Participant[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Defines the grouping behavior for the action and its children.
     */
    groupingBehavior?: "visual-group" | "logical-group" | "sentence-group";
    /**
     * Defines the selection behavior for the action and its children.
     */
    selectionBehavior?: "any" | "all" | "all-or-none" | "exactly-one" | "at-most-one" | "one-or-more";
    /**
     * Defines the required behavior for the action.
     */
    requiredBehavior?: "must" | "could" | "must-unless-documented";
    /**
     * Defines whether the action should usually be preselected.
     */
    precheckBehavior?: "yes" | "no";
    /**
     * Defines whether the action can be selected multiple times.
     */
    cardinalityBehavior?: "single" | "multiple";
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
     */
    definitionCanonical?: string;
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
     */
    definitionUri?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    transform?: canonical;
    /**
     * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
     */
    dynamicValue?: PlanDefinition_DynamicValue[];
    /**
     * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
     */
    action?: PlanDefinition_Action[];
}

export interface PlanDefinition_Condition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of condition.
     */
    kind?: "applicability" | "start" | "stop";
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    expression?: Expression;
}

export interface PlanDefinition_RelatedAction {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    actionId?: id;
    /**
     * The relationship of this action to the related action.
     */
    relationship?: "before-start" | "before" | "before-end" | "concurrent-with-start" | "concurrent" | "concurrent-with-end" | "after-start" | "after" | "after-end";
    /**
     * A length of time.
     */
    offsetDuration?: Duration;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    offsetRange?: Range;
}

export interface PlanDefinition_Participant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of participant in the action.
     */
    type?: "patient" | "practitioner" | "related-person" | "device";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
}

export interface PlanDefinition_DynamicValue {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    expression?: Expression;
}

export interface Practitioner {
    /**
     * This is a Practitioner resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier that applies to this person in this role.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * The name(s) associated with the practitioner.
     */
    name?: HumanName[];
    /**
     * A contact detail for the practitioner, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * Address(es) of the practitioner that are not role specific (typically home address).
    Work addresses are not typically entered in this property as they are usually role dependent.
     */
    address?: Address[];
    /**
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: "male" | "female" | "other" | "unknown";
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    birthDate?: date;
    /**
     * Image of the person.
     */
    photo?: Attachment[];
    /**
     * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
     */
    qualification?: Practitioner_Qualification[];
    /**
     * A language the practitioner can use in patient communication.
     */
    communication?: CodeableConcept[];
}

export interface Practitioner_Qualification {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier that applies to this person's qualification in this role.
     */
    identifier?: Identifier[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    issuer?: Reference;
}

export interface PractitionerRole {
    /**
     * This is a PractitionerRole resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business Identifiers that are specific to a role/location.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    practitioner?: Reference;
    /**
     * A reference from one resource to another.
     */
    organization?: Reference;
    /**
     * Roles which this practitioner is authorized to perform for the organization.
     */
    code?: CodeableConcept[];
    /**
     * Specific specialty of the practitioner.
     */
    specialty?: CodeableConcept[];
    /**
     * The location(s) at which this practitioner provides care.
     */
    location?: Reference[];
    /**
     * The list of healthcare services that this worker provides for this role's Organization/Location(s).
     */
    healthcareService?: Reference[];
    /**
     * Contact details that are specific to the role/location/service.
     */
    telecom?: ContactPoint[];
    /**
     * A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
     */
    availableTime?: PractitionerRole_AvailableTime[];
    /**
     * The practitioner is not available or performing this role during this period of time due to the provided reason.
     */
    notAvailable?: PractitionerRole_NotAvailable[];
    /**
     * A sequence of Unicode characters
     */
    availabilityExceptions?: string;
    /**
     * Technical endpoints providing access to services operated for the practitioner with this role.
     */
    endpoint?: Reference[];
}

export interface PractitionerRole_AvailableTime {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    daysOfWeek?: code[];
    /**
     * Value of "true" or "false"
     */
    allDay?: boolean;
    /**
     * A time during the day, with no date specified
     */
    availableStartTime?: time;
    /**
     * A time during the day, with no date specified
     */
    availableEndTime?: time;
}

export interface PractitionerRole_NotAvailable {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    during?: Period;
}

export interface Procedure {
    /**
     * This is a Procedure resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     */
    instantiatesUri?: uri[];
    /**
     * A reference to a resource that contains details of the request for this procedure.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular procedure is a component or step.
     */
    partOf?: Reference[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    performedPeriod?: Period;
    /**
     * Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedString?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    performedAge?: Age;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    performedRange?: Range;
    /**
     * A reference from one resource to another.
     */
    recorder?: Reference;
    /**
     * A reference from one resource to another.
     */
    asserter?: Reference;
    /**
     * Limited to "real" people rather than equipment.
     */
    performer?: Procedure_Performer[];
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * The coded reason why the procedure was performed. This may be a coded entity of some type, or may simply be present as text.
     */
    reasonCode?: CodeableConcept[];
    /**
     * The justification of why the procedure was performed.
     */
    reasonReference?: Reference[];
    /**
     * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
     */
    bodySite?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    outcome?: CodeableConcept;
    /**
     * This could be a histology result, pathology report, surgical report, etc.
     */
    report?: Reference[];
    /**
     * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
     */
    complication?: CodeableConcept[];
    /**
     * Any complications that occurred during the procedure, or in the immediate post-performance period.
     */
    complicationDetail?: Reference[];
    /**
     * If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
     */
    followUp?: CodeableConcept[];
    /**
     * Any other notes and comments about the procedure.
     */
    note?: Annotation[];
    /**
     * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
     */
    focalDevice?: Procedure_FocalDevice[];
    /**
     * Identifies medications, devices and any other substance used as part of the procedure.
     */
    usedReference?: Reference[];
    /**
     * Identifies coded items that were used as part of the procedure.
     */
    usedCode?: CodeableConcept[];
}

export interface Procedure_Performer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    function?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    actor: Reference;
    /**
     * A reference from one resource to another.
     */
    onBehalfOf?: Reference;
}

export interface Procedure_FocalDevice {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    action?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    manipulated: Reference;
}

export interface Provenance {
    /**
     * This is a Provenance resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
     */
    target: Reference[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurredPeriod?: Period;
    /**
     * The period during which the activity occurred.
     */
    occurredDateTime?: string;
    /**
     * An instant in time - known at least to the second
     */
    recorded?: instant;
    /**
     * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
     */
    policy?: uri[];
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * The reason that the activity was taking place.
     */
    reason?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    activity?: CodeableConcept;
    /**
     * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
     */
    agent: Provenance_Agent[];
    /**
     * An entity used in this activity.
     */
    entity?: Provenance_Entity[];
    /**
     * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
     */
    signature?: Signature[];
}

export interface Provenance_Agent {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity.
     */
    role?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    who: Reference;
    /**
     * A reference from one resource to another.
     */
    onBehalfOf?: Reference;
}

export interface Provenance_Entity {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * How the entity was used during the activity.
     */
    role?: "derivation" | "revision" | "quotation" | "source" | "removal";
    /**
     * A reference from one resource to another.
     */
    what: Reference;
    /**
     * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
     */
    agent?: Provenance_Agent[];
}

export interface Questionnaire {
    /**
     * This is a Questionnaire resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The URL of a Questionnaire that this Questionnaire is based on.
     */
    derivedFrom?: canonical[];
    /**
     * The status of this questionnaire. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * The types of subjects that can be the subject of responses created for the questionnaire.
     */
    subjectType?: code[];
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaire instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the questionnaire is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * An identifier for this question or group of questions in a particular terminology such as LOINC.
     */
    code?: Coding[];
    /**
     * A particular question, question grouping or display text that is part of the questionnaire.
     */
    item?: Questionnaire_Item[];
}

export interface Questionnaire_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    linkId?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    definition?: uri;
    /**
     * A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
     */
    code?: Coding[];
    /**
     * A sequence of Unicode characters
     */
    prefix?: string;
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).
     */
    type?: "group" | "display" | "boolean" | "decimal" | "integer" | "date" | "dateTime" | "time" | "string" | "text" | "url" | "choice" | "open-choice" | "attachment" | "reference" | "quantity";
    /**
     * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
     */
    enableWhen?: Questionnaire_EnableWhen[];
    /**
     * Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
     */
    enableBehavior?: "all" | "any";
    /**
     * Value of "true" or "false"
     */
    required?: boolean;
    /**
     * Value of "true" or "false"
     */
    repeats?: boolean;
    /**
     * Value of "true" or "false"
     */
    readOnly?: boolean;
    /**
     * A whole number
     */
    maxLength?: integer;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    answerValueSet?: canonical;
    /**
     * One of the permitted answers for a "choice" or "open-choice" question.
     */
    answerOption?: Questionnaire_AnswerOption[];
    /**
     * One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
     */
    initial?: Questionnaire_Initial[];
    /**
     * Text, questions and other groups to be nested beneath a question or group.
     */
    item?: Questionnaire_Item[];
}

export interface Questionnaire_EnableWhen {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    question?: string;
    /**
     * Specifies the criteria by which the question is enabled.
     */
    operator?: "exists" | "=" | "!=" | ">" | "<" | ">=" | "<=";
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerBoolean?: boolean;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDecimal?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerInteger?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDate?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDateTime?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerTime?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerString?: string;
    /**
     * A reference to a code defined by a terminology system.
     */
    answerCoding?: Coding;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    answerQuantity?: Quantity;
    /**
     * A reference from one resource to another.
     */
    answerReference?: Reference;
}

export interface Questionnaire_AnswerOption {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueInteger?: string;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueDate?: string;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueTime?: string;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueString?: string;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * Value of "true" or "false"
     */
    initialSelected?: boolean;
}

export interface Questionnaire_Initial {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The actual value to for an initial answer.
     */
    valueBoolean?: boolean;
    /**
     * The actual value to for an initial answer.
     */
    valueDecimal?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueInteger?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueDate?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueDateTime?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueTime?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueString?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueUri?: string;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
}

export interface QuestionnaireResponse {
    /**
     * This is a QuestionnaireResponse resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
     */
    basedOn?: Reference[];
    /**
     * A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
     */
    partOf?: Reference[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    questionnaire?: canonical;
    /**
     * The position of the questionnaire response within its overall lifecycle.
     */
    status?: "in-progress" | "completed" | "amended" | "entered-in-error" | "stopped";
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authored?: dateTime;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * A reference from one resource to another.
     */
    source?: Reference;
    /**
     * A group or question item from the original questionnaire for which answers are provided.
     */
    item?: QuestionnaireResponse_Item[];
}

export interface QuestionnaireResponse_Item {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    linkId?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    definition?: uri;
    /**
     * A sequence of Unicode characters
     */
    text?: string;
    /**
     * The respondent's answer(s) to the question.
     */
    answer?: QuestionnaireResponse_Answer[];
    /**
     * Questions or sub-groups nested beneath a question or group.
     */
    item?: QuestionnaireResponse_Item[];
}

export interface QuestionnaireResponse_Answer {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueBoolean?: boolean;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDecimal?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueInteger?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDate?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDateTime?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueTime?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueString?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueUri?: string;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * Nested groups and/or questions found within this particular answer.
     */
    item?: QuestionnaireResponse_Item[];
}

export interface RelatedPerson {
    /**
     * This is a RelatedPerson resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for a person within a particular scope.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * The nature of the relationship between a patient and the related person.
     */
    relationship?: CodeableConcept[];
    /**
     * A name associated with the person.
     */
    name?: HumanName[];
    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: "male" | "female" | "other" | "unknown";
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    birthDate?: date;
    /**
     * Address where the related person can be contacted or visited.
     */
    address?: Address[];
    /**
     * Image of the person.
     */
    photo?: Attachment[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A language which may be used to communicate with about the patient's health.
     */
    communication?: RelatedPerson_Communication[];
}

export interface RelatedPerson_Communication {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    language: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    preferred?: boolean;
}

export interface RequestGroup {
    /**
     * This is a RequestGroup resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Allows a service to provide a unique, business identifier for the request.
     */
    identifier?: Identifier[];
    /**
     * A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    instantiatesCanonical?: canonical[];
    /**
     * A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    instantiatesUri?: uri[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this request.
     */
    basedOn?: Reference[];
    /**
     * Completed or terminated request(s) whose function is taken by this new request.
     */
    replaces?: Reference[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    groupIdentifier?: Identifier;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    intent?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authoredOn?: dateTime;
    /**
     * A reference from one resource to another.
     */
    author?: Reference;
    /**
     * Describes the reason for the request group in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this request group.
     */
    reasonReference?: Reference[];
    /**
     * Provides a mechanism to communicate additional information about the response.
     */
    note?: Annotation[];
    /**
     * The actions, if any, produced by the evaluation of the artifact.
     */
    action?: RequestGroup_Action[];
}

export interface RequestGroup_Action {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    prefix?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A sequence of Unicode characters
     */
    textEquivalent?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
     */
    code?: CodeableConcept[];
    /**
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * An expression that describes applicability criteria, or start/stop conditions for the action.
     */
    condition?: RequestGroup_Condition[];
    /**
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     */
    relatedAction?: RequestGroup_RelatedAction[];
    /**
     * An optional value describing when the action should be performed.
     */
    timingDateTime?: string;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    timingAge?: Age;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timingPeriod?: Period;
    /**
     * A length of time.
     */
    timingDuration?: Duration;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    timingRange?: Range;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    timingTiming?: Timing;
    /**
     * The participant that should perform or be responsible for this action.
     */
    participant?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    groupingBehavior?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    selectionBehavior?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    requiredBehavior?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    precheckBehavior?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    cardinalityBehavior?: code;
    /**
     * A reference from one resource to another.
     */
    resource?: Reference;
    /**
     * Sub actions.
     */
    action?: RequestGroup_Action[];
}

export interface RequestGroup_Condition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    kind?: code;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    expression?: Expression;
}

export interface RequestGroup_RelatedAction {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    actionId?: id;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    relationship?: code;
    /**
     * A length of time.
     */
    offsetDuration?: Duration;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    offsetRange?: Range;
}

export interface ResearchDefinition {
    /**
     * This is a ResearchDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this research definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    shortTitle?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this research definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    comment?: string[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate research definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the research definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the ResearchDefinition. Topics provide a high-level categorization grouping types of ResearchDefinitions that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing the formal logic used by the ResearchDefinition.
     */
    library?: canonical[];
    /**
     * A reference from one resource to another.
     */
    population: Reference;
    /**
     * A reference from one resource to another.
     */
    exposure?: Reference;
    /**
     * A reference from one resource to another.
     */
    exposureAlternative?: Reference;
    /**
     * A reference from one resource to another.
     */
    outcome?: Reference;
}

export interface ResearchElementDefinition {
    /**
     * This is a ResearchElementDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this research element definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * A sequence of Unicode characters
     */
    shortTitle?: string;
    /**
     * A sequence of Unicode characters
     */
    subtitle?: string;
    /**
     * The status of this research element definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subjectReference?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    comment?: string[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate research element definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the research element definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A sequence of Unicode characters
     */
    usage?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the ResearchElementDefinition. Topics provide a high-level categorization grouping types of ResearchElementDefinitions that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing the formal logic used by the ResearchElementDefinition.
     */
    library?: canonical[];
    /**
     * The type of research element, a population, an exposure, or an outcome.
     */
    type?: "population" | "exposure" | "outcome";
    /**
     * The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive).
     */
    variableType?: "dichotomous" | "continuous" | "descriptive";
    /**
     * A characteristic that defines the members of the research element. Multiple characteristics are applied with "and" semantics.
     */
    characteristic: ResearchElementDefinition_Characteristic[];
}

export interface ResearchElementDefinition_Characteristic {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    definitionCodeableConcept?: CodeableConcept;
    /**
     * Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCanonical?: string;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    definitionExpression?: Expression;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    definitionDataRequirement?: DataRequirement;
    /**
     * Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
     */
    usageContext?: UsageContext[];
    /**
     * Value of "true" or "false"
     */
    exclude?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unitOfMeasure?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    studyEffectiveDescription?: string;
    /**
     * Indicates what effective period the study covers.
     */
    studyEffectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    studyEffectivePeriod?: Period;
    /**
     * A length of time.
     */
    studyEffectiveDuration?: Duration;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    studyEffectiveTiming?: Timing;
    /**
     * A length of time.
     */
    studyEffectiveTimeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    studyEffectiveGroupMeasure?: "mean" | "median" | "mean-of-mean" | "mean-of-median" | "median-of-mean" | "median-of-median";
    /**
     * A sequence of Unicode characters
     */
    participantEffectiveDescription?: string;
    /**
     * Indicates what effective period the study covers.
     */
    participantEffectiveDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    participantEffectivePeriod?: Period;
    /**
     * A length of time.
     */
    participantEffectiveDuration?: Duration;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    participantEffectiveTiming?: Timing;
    /**
     * A length of time.
     */
    participantEffectiveTimeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    participantEffectiveGroupMeasure?: "mean" | "median" | "mean-of-mean" | "mean-of-median" | "median-of-mean" | "median-of-median";
}

export interface ResearchStudy {
    /**
     * This is a ResearchStudy resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this research study by the sponsor or other systems.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The set of steps expected to be performed as part of the execution of the study.
     */
    protocol?: Reference[];
    /**
     * A larger research study of which this particular study is a component or step.
     */
    partOf?: Reference[];
    /**
     * The current state of the study.
     */
    status?: "active" | "administratively-completed" | "approved" | "closed-to-accrual" | "closed-to-accrual-and-intervention" | "completed" | "disapproved" | "in-review" | "temporarily-closed-to-accrual" | "temporarily-closed-to-accrual-and-intervention" | "withdrawn";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    primaryPurposeType?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    phase?: CodeableConcept;
    /**
     * Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
     */
    category?: CodeableConcept[];
    /**
     * The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
     */
    focus?: CodeableConcept[];
    /**
     * The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
     */
    condition?: CodeableConcept[];
    /**
     * Contact details to assist a user in learning more about or engaging with the study.
     */
    contact?: ContactDetail[];
    /**
     * Citations, references and other related documents.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Key terms to aid in searching for or filtering the study.
     */
    keyword?: CodeableConcept[];
    /**
     * Indicates a country, state or other region where the study is taking place.
     */
    location?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * Reference to a Group that defines the criteria for and quantity of subjects participating in the study.  E.g. " 200 female Europeans between the ages of 20 and 45 with early onset diabetes".
     */
    enrollment?: Reference[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    sponsor?: Reference;
    /**
     * A reference from one resource to another.
     */
    principalInvestigator?: Reference;
    /**
     * A facility in which study activities are conducted.
     */
    site?: Reference[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reasonStopped?: CodeableConcept;
    /**
     * Comments made about the study by the performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
     */
    arm?: ResearchStudy_Arm[];
    /**
     * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
     */
    objective?: ResearchStudy_Objective[];
}

export interface ResearchStudy_Arm {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
}

export interface ResearchStudy_Objective {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
}

export interface ResearchSubject {
    /**
     * This is a ResearchSubject resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this research subject for a study.
     */
    identifier?: Identifier[];
    /**
     * The current state of the subject.
     */
    status?: "candidate" | "eligible" | "follow-up" | "ineligible" | "not-registered" | "off-study" | "on-study" | "on-study-intervention" | "on-study-observation" | "pending-on-study" | "potential-candidate" | "screening" | "withdrawn";
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * A reference from one resource to another.
     */
    study: Reference;
    /**
     * A reference from one resource to another.
     */
    individual: Reference;
    /**
     * A sequence of Unicode characters
     */
    assignedArm?: string;
    /**
     * A sequence of Unicode characters
     */
    actualArm?: string;
    /**
     * A reference from one resource to another.
     */
    consent?: Reference;
}

export interface RiskAssessment {
    /**
     * This is a RiskAssessment resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier assigned to the risk assessment.
     */
    identifier?: Identifier[];
    /**
     * A reference from one resource to another.
     */
    basedOn?: Reference;
    /**
     * A reference from one resource to another.
     */
    parent?: Reference;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * The date (and possibly time) the risk assessment was performed.
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * A reference from one resource to another.
     */
    condition?: Reference;
    /**
     * A reference from one resource to another.
     */
    performer?: Reference;
    /**
     * The reason the risk assessment was performed.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Resources supporting the reason the risk assessment was performed.
     */
    reasonReference?: Reference[];
    /**
     * Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    basis?: Reference[];
    /**
     * Describes the expected outcome for the subject.
     */
    prediction?: RiskAssessment_Prediction[];
    /**
     * A sequence of Unicode characters
     */
    mitigation?: string;
    /**
     * Additional comments about the risk assessment.
     */
    note?: Annotation[];
}

export interface RiskAssessment_Prediction {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    outcome?: CodeableConcept;
    /**
     * Indicates how likely the outcome is (in the specified timeframe).
     */
    probabilityDecimal?: string;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    probabilityRange?: Range;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    qualitativeRisk?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    relativeRisk?: decimal;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    whenPeriod?: Period;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    whenRange?: Range;
    /**
     * A sequence of Unicode characters
     */
    rationale?: string;
}

export interface RiskEvidenceSynthesis {
    /**
     * This is a RiskEvidenceSynthesis resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this risk evidence synthesis when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this risk evidence synthesis. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate risk evidence synthesis instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the risk evidence synthesis is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    approvalDate?: date;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lastReviewDate?: date;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the RiskEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    synthesisType?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    studyType?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    population: Reference;
    /**
     * A reference from one resource to another.
     */
    exposure?: Reference;
    /**
     * A reference from one resource to another.
     */
    outcome: Reference;
    /**
     * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
     */
    sampleSize?: RiskEvidenceSynthesis_SampleSize;
    /**
     * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
     */
    riskEstimate?: RiskEvidenceSynthesis_RiskEstimate;
    /**
     * A description of the certainty of the risk estimate.
     */
    certainty?: RiskEvidenceSynthesis_Certainty[];
}

export interface RiskEvidenceSynthesis_SampleSize {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A whole number
     */
    numberOfStudies?: integer;
    /**
     * A whole number
     */
    numberOfParticipants?: integer;
}

export interface RiskEvidenceSynthesis_RiskEstimate {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    value?: decimal;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    unitOfMeasure?: CodeableConcept;
    /**
     * A whole number
     */
    denominatorCount?: integer;
    /**
     * A whole number
     */
    numeratorCount?: integer;
    /**
     * A description of the precision of the estimate for the effect.
     */
    precisionEstimate?: RiskEvidenceSynthesis_PrecisionEstimate[];
}

export interface RiskEvidenceSynthesis_PrecisionEstimate {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A rational number with implicit precision
     */
    level?: decimal;
    /**
     * A rational number with implicit precision
     */
    from?: decimal;
    /**
     * A rational number with implicit precision
     */
    to?: decimal;
}

export interface RiskEvidenceSynthesis_Certainty {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A rating of the certainty of the effect estimate.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * A description of a component of the overall certainty.
     */
    certaintySubcomponent?: RiskEvidenceSynthesis_CertaintySubcomponent[];
}

export interface RiskEvidenceSynthesis_CertaintySubcomponent {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A rating of a subcomponent of rating certainty.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
}

export interface Schedule {
    /**
     * This is a Schedule resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * External Ids for this item.
     */
    identifier?: Identifier[];
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The specific service that is to be performed during this appointment.
     */
    serviceType?: CodeableConcept[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * Slots that reference this schedule resource provide the availability details to these referenced resource(s).
     */
    actor: Reference[];
    /**
     * A time period defined by a start and end date and optionally time.
     */
    planningHorizon?: Period;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
}

export interface SearchParameter {
    /**
     * This is a SearchParameter resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    derivedFrom?: canonical;
    /**
     * The status of this search parameter. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the search parameter is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * The base resource type(s) that this search parameter can be used against.
     */
    base?: code[];
    /**
     * The type of value that a search parameter may contain, and how the content is interpreted.
     */
    type?: "number" | "date" | "string" | "token" | "reference" | "composite" | "quantity" | "uri" | "special";
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
    /**
     * A sequence of Unicode characters
     */
    xpath?: string;
    /**
     * How the search parameter relates to the set of elements returned by evaluating the xpath query.
     */
    xpathUsage?: "normal" | "phonetic" | "nearby" | "distance" | "other";
    /**
     * Types of resource (if a resource is referenced).
     */
    target?: code[];
    /**
     * Value of "true" or "false"
     */
    multipleOr?: boolean;
    /**
     * Value of "true" or "false"
     */
    multipleAnd?: boolean;
    /**
     * Comparators supported for the search parameter.
     */
    comparator?: ("eq" | "ne" | "gt" | "lt" | "ge" | "le" | "sa" | "eb" | "ap")[];
    /**
     * A modifier supported for the search parameter.
     */
    modifier?: ("missing" | "exact" | "contains" | "not" | "text" | "in" | "not-in" | "below" | "above" | "type" | "identifier" | "ofType")[];
    /**
     * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
     */
    chain?: string[];
    /**
     * Used to define the parts of a composite search parameter.
     */
    component?: SearchParameter_Component[];
}

export interface SearchParameter_Component {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    definition: canonical;
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
}

export interface ServiceRequest {
    /**
     * This is a ServiceRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    instantiatesUri?: uri[];
    /**
     * Plan/proposal/order fulfilled by this request.
     */
    basedOn?: Reference[];
    /**
     * The request takes the place of the referenced completed or terminated request(s).
     */
    replaces?: Reference[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    requisition?: Identifier;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    intent?: code;
    /**
     * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    category?: CodeableConcept[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * Value of "true" or "false"
     */
    doNotPerform?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
     */
    orderDetail?: CodeableConcept[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantityQuantity?: Quantity;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    quantityRatio?: Ratio;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    quantityRange?: Range;
    /**
     * A reference from one resource to another.
     */
    subject: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * The date/time at which the requested service should occur.
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    occurrenceTiming?: Timing;
    /**
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asNeededBoolean?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    asNeededCodeableConcept?: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authoredOn?: dateTime;
    /**
     * A reference from one resource to another.
     */
    requester?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    performerType?: CodeableConcept;
    /**
     * The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
     */
    performer?: Reference[];
    /**
     * The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
     */
    locationCode?: CodeableConcept[];
    /**
     * A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
     */
    locationReference?: Reference[];
    /**
     * An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in \`supportingInfo\`.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in \`supportingInfo\`.
     */
    reasonReference?: Reference[];
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
     */
    supportingInfo?: Reference[];
    /**
     * One or more specimens that the laboratory procedure will use.
     */
    specimen?: Reference[];
    /**
     * Anatomic location where the procedure should be performed. This is the target site.
     */
    bodySite?: CodeableConcept[];
    /**
     * Any other notes and comments made about the service request. For example, internal billing notes.
     */
    note?: Annotation[];
    /**
     * A sequence of Unicode characters
     */
    patientInstruction?: string;
    /**
     * Key events in the history of the request.
     */
    relevantHistory?: Reference[];
}

export interface Slot {
    /**
     * This is a Slot resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * External Ids for this item.
     */
    identifier?: Identifier[];
    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
     */
    serviceType?: CodeableConcept[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    appointmentType?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    schedule: Reference;
    /**
     * busy | free | busy-unavailable | busy-tentative | entered-in-error.
     */
    status?: "busy" | "free" | "busy-unavailable" | "busy-tentative" | "entered-in-error";
    /**
     * An instant in time - known at least to the second
     */
    start?: instant;
    /**
     * An instant in time - known at least to the second
     */
    end?: instant;
    /**
     * Value of "true" or "false"
     */
    overbooked?: boolean;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
}

export interface Specimen {
    /**
     * This is a Specimen resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Id for specimen.
     */
    identifier?: Identifier[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    accessionIdentifier?: Identifier;
    /**
     * The availability of the specimen.
     */
    status?: "available" | "unavailable" | "unsatisfactory" | "entered-in-error";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    subject?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    receivedTime?: dateTime;
    /**
     * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
     */
    parent?: Reference[];
    /**
     * Details concerning a service request that required a specimen to be collected.
     */
    request?: Reference[];
    /**
     * A sample to be used for analysis.
     */
    collection?: Specimen_Collection;
    /**
     * Details concerning processing and processing steps for the specimen.
     */
    processing?: Specimen_Processing[];
    /**
     * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
     */
    container?: Specimen_Container[];
    /**
     * A mode or state of being that describes the nature of the specimen.
     */
    condition?: CodeableConcept[];
    /**
     * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
     */
    note?: Annotation[];
}

export interface Specimen_Collection {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    collector?: Reference;
    /**
     * Time when specimen was collected from subject - the physiologically relevant time.
     */
    collectedDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    collectedPeriod?: Period;
    /**
     * A length of time.
     */
    duration?: Duration;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    bodySite?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fastingStatusCodeableConcept?: CodeableConcept;
    /**
     * A length of time.
     */
    fastingStatusDuration?: Duration;
}

export interface Specimen_Processing {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    procedure?: CodeableConcept;
    /**
     * Material used in the processing step.
     */
    additive?: Reference[];
    /**
     * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
     */
    timeDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    timePeriod?: Period;
}

export interface Specimen_Container {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    capacity?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    specimenQuantity?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    additiveCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    additiveReference?: Reference;
}

export interface SpecimenDefinition {
    /**
     * This is a SpecimenDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    typeCollected?: CodeableConcept;
    /**
     * Preparation of the patient for specimen collection.
     */
    patientPreparation?: CodeableConcept[];
    /**
     * A sequence of Unicode characters
     */
    timeAspect?: string;
    /**
     * The action to be performed for collecting the specimen.
     */
    collection?: CodeableConcept[];
    /**
     * Specimen conditioned in a container as expected by the testing laboratory.
     */
    typeTested?: SpecimenDefinition_TypeTested[];
}

export interface SpecimenDefinition_TypeTested {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    isDerived?: boolean;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * The preference for this type of conditioned specimen.
     */
    preference?: "preferred" | "alternate";
    /**
     * A kind of specimen with associated set of requirements.
     */
    container?: SpecimenDefinition_Container;
    /**
     * A sequence of Unicode characters
     */
    requirement?: string;
    /**
     * A length of time.
     */
    retentionTime?: Duration;
    /**
     * Criterion for rejection of the specimen in its container by the laboratory.
     */
    rejectionCriterion?: CodeableConcept[];
    /**
     * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
     */
    handling?: SpecimenDefinition_Handling[];
}

export interface SpecimenDefinition_Container {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    material?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    cap?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    capacity?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    minimumVolumeQuantity?: Quantity;
    /**
     * The minimum volume to be conditioned in the container.
     */
    minimumVolumeString?: string;
    /**
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additive?: SpecimenDefinition_Additive[];
    /**
     * A sequence of Unicode characters
     */
    preparation?: string;
}

export interface SpecimenDefinition_Additive {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    additiveCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    additiveReference?: Reference;
}

export interface SpecimenDefinition_Handling {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    temperatureQualifier?: CodeableConcept;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    temperatureRange?: Range;
    /**
     * A length of time.
     */
    maxDuration?: Duration;
    /**
     * A sequence of Unicode characters
     */
    instruction?: string;
}

export interface StructureDefinition {
    /**
     * This is a StructureDefinition resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this structure definition. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the structure definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
     */
    keyword?: Coding[];
    /**
     * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.1. for this version.
     */
    fhirVersion?: "0.01" | "0.05" | "0.06" | "0.11" | "0.0.80" | "0.0.81" | "0.0.82" | "0.4.0" | "0.5.0" | "1.0.0" | "1.0.1" | "1.0.2" | "1.1.0" | "1.4.0" | "1.6.0" | "1.8.0" | "3.0.0" | "3.0.1" | "3.3.0" | "3.5.0" | "4.0.0" | "4.0.1";
    /**
     * An external specification that the content is mapped to.
     */
    mapping?: StructureDefinition_Mapping[];
    /**
     * Defines the kind of structure that this definition is describing.
     */
    kind?: "primitive-type" | "complex-type" | "resource" | "logical";
    /**
     * Value of "true" or "false"
     */
    abstract?: boolean;
    /**
     * Identifies the types of resource or data type elements to which the extension can be applied.
     */
    context?: StructureDefinition_Context[];
    /**
     * A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.
     */
    contextInvariant?: string[];
    /**
     * String of characters used to identify a name or a resource
     */
    type?: uri;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    baseDefinition?: canonical;
    /**
     * How the type relates to the baseDefinition.
     */
    derivation?: "specialization" | "constraint";
    /**
     * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
     */
    snapshot?: StructureDefinition_Snapshot;
    /**
     * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
     */
    differential?: StructureDefinition_Differential;
}

export interface StructureDefinition_Mapping {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    identity?: id;
    /**
     * String of characters used to identify a name or a resource
     */
    uri?: uri;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
}

export interface StructureDefinition_Context {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Defines how to interpret the expression that defines what the context of the extension is.
     */
    type?: "fhirpath" | "element" | "extension";
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
}

export interface StructureDefinition_Snapshot {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Captures constraints on each element within the resource.
     */
    element: ElementDefinition[];
}

export interface ElementDefinition {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     */
    representation?: ("xmlAttr" | "xmlText" | "typeAttr" | "cdaText" | "xhtml")[];
    /**
     * A sequence of Unicode characters
     */
    sliceName?: string;
    /**
     * Value of "true" or "false"
     */
    sliceIsConstraining?: boolean;
    /**
     * A sequence of Unicode characters
     */
    label?: string;
    /**
     * A code that has the same meaning as the element in a particular terminology.
     */
    code?: Coding[];
    /**
     * Captures constraints on each element within the resource, profile, or extension.
     */
    slicing?: ElementDefinition_Slicing;
    /**
     * A sequence of Unicode characters
     */
    short?: string;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    definition?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    comment?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    requirements?: markdown;
    /**
     * Identifies additional names by which this element might also be known.
     */
    alias?: string[];
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    min?: unsignedInt;
    /**
     * A sequence of Unicode characters
     */
    max?: string;
    /**
     * Captures constraints on each element within the resource, profile, or extension.
     */
    base?: ElementDefinition_Base;
    /**
     * String of characters used to identify a name or a resource
     */
    contentReference?: uri;
    /**
     * The data type or resource that the value of this element is permitted to be.
     */
    type?: ElementDefinition_Type[];
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueBase64Binary?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueBoolean?: boolean;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCanonical?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCode?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDate?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDateTime?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDecimal?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueId?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueInstant?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueInteger?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueMarkdown?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueOid?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValuePositiveInt?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueString?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueTime?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUnsignedInt?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUri?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUrl?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    defaultValueAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    defaultValueAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    defaultValueAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    defaultValueAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    defaultValueCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    defaultValueCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    defaultValueContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    defaultValueCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    defaultValueDistance?: Distance;
    /**
     * A length of time.
     */
    defaultValueDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    defaultValueHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    defaultValueIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    defaultValueMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    defaultValuePeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    defaultValueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    defaultValueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    defaultValueRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    defaultValueReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    defaultValueSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    defaultValueSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    defaultValueTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    defaultValueContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    defaultValueContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    defaultValueDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    defaultValueExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    defaultValueParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    defaultValueRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    defaultValueTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    defaultValueUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    defaultValueDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    defaultValueMeta?: Meta;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    meaningWhenMissing?: markdown;
    /**
     * A sequence of Unicode characters
     */
    orderMeaning?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedBase64Binary?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedBoolean?: boolean;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCanonical?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCode?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDate?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDateTime?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDecimal?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedId?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedInstant?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedInteger?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedMarkdown?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedOid?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedPositiveInt?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedString?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedTime?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUnsignedInt?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUri?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUrl?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    fixedAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    fixedAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    fixedAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    fixedAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fixedCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    fixedCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    fixedContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    fixedCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    fixedDistance?: Distance;
    /**
     * A length of time.
     */
    fixedDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    fixedHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    fixedIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    fixedMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    fixedPeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    fixedQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    fixedRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    fixedRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    fixedReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    fixedSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    fixedSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    fixedTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    fixedContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    fixedContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    fixedDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    fixedExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    fixedParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    fixedRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    fixedTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    fixedUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    fixedDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    fixedMeta?: Meta;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternBase64Binary?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternBoolean?: boolean;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCanonical?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCode?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDate?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDateTime?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDecimal?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternId?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternInstant?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternInteger?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternMarkdown?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternOid?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternPositiveInt?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternString?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternTime?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUnsignedInt?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUri?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUrl?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    patternAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    patternAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    patternAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    patternAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    patternCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    patternCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    patternContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    patternCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    patternDistance?: Distance;
    /**
     * A length of time.
     */
    patternDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    patternHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    patternIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    patternMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    patternPeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    patternQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    patternRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    patternRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    patternReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    patternSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    patternSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    patternTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    patternContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    patternContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    patternDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    patternExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    patternParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    patternRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    patternTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    patternUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    patternDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    patternMeta?: Meta;
    /**
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     */
    example?: ElementDefinition_Example[];
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueDate?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueDateTime?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueInstant?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueTime?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueDecimal?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueInteger?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValuePositiveInt?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueUnsignedInt?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    minValueQuantity?: Quantity;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueDate?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueDateTime?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueInstant?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueTime?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueDecimal?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueInteger?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValuePositiveInt?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueUnsignedInt?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    maxValueQuantity?: Quantity;
    /**
     * A whole number
     */
    maxLength?: integer;
    /**
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     */
    condition?: id[];
    /**
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     */
    constraint?: ElementDefinition_Constraint[];
    /**
     * Value of "true" or "false"
     */
    mustSupport?: boolean;
    /**
     * Value of "true" or "false"
     */
    isModifier?: boolean;
    /**
     * A sequence of Unicode characters
     */
    isModifierReason?: string;
    /**
     * Value of "true" or "false"
     */
    isSummary?: boolean;
    /**
     * Captures constraints on each element within the resource, profile, or extension.
     */
    binding?: ElementDefinition_Binding;
    /**
     * Identifies a concept from an external specification that roughly corresponds to this element.
     */
    mapping?: ElementDefinition_Mapping[];
}

export interface ElementDefinition_Slicing {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
     */
    discriminator?: ElementDefinition_Discriminator[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Value of "true" or "false"
     */
    ordered?: boolean;
    /**
     * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
     */
    rules?: "closed" | "open" | "openAtEnd";
}

export interface ElementDefinition_Discriminator {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * How the element value is interpreted when discrimination is evaluated.
     */
    type?: "value" | "exists" | "pattern" | "type" | "profile";
    /**
     * A sequence of Unicode characters
     */
    path?: string;
}

export interface ElementDefinition_Base {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * An integer with a value that is not negative (e.g. >= 0)
     */
    min?: unsignedInt;
    /**
     * A sequence of Unicode characters
     */
    max?: string;
}

export interface ElementDefinition_Type {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    code?: uri;
    /**
     * Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
     */
    profile?: canonical[];
    /**
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     */
    targetProfile?: canonical[];
    /**
     * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
     */
    aggregation?: ("contained" | "referenced" | "bundled")[];
    /**
     * Whether this reference needs to be version specific or version independent, or whether either can be used.
     */
    versioning?: "either" | "independent" | "specific";
}

export interface ElementDefinition_Example {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    label?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBase64Binary?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBoolean?: boolean;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCanonical?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCode?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDate?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDateTime?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDecimal?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueId?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInstant?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInteger?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMarkdown?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueOid?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valuePositiveInt?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueString?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTime?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUnsignedInt?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUri?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUrl?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    valueAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    valueAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    valueAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    valueContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    valueDistance?: Distance;
    /**
     * A length of time.
     */
    valueDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    valueHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    valueIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    valueMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    valueRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    valueSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    valueSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    valueTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    valueContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    valueContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    valueExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    valueUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    valueDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    valueMeta?: Meta;
}

export interface ElementDefinition_Constraint {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    key?: id;
    /**
     * A sequence of Unicode characters
     */
    requirements?: string;
    /**
     * Identifies the impact constraint violation has on the conformance of the instance.
     */
    severity?: "error" | "warning";
    /**
     * A sequence of Unicode characters
     */
    human?: string;
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
    /**
     * A sequence of Unicode characters
     */
    xpath?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    source?: canonical;
}

export interface ElementDefinition_Binding {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
     */
    strength?: "required" | "extensible" | "preferred" | "example";
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    valueSet?: canonical;
}

export interface ElementDefinition_Mapping {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    identity?: id;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A sequence of Unicode characters
     */
    map?: string;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
}

export interface StructureDefinition_Differential {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Captures constraints on each element within the resource.
     */
    element: ElementDefinition[];
}

export interface StructureMap {
    /**
     * This is a StructureMap resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this structure map. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the structure map is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
     */
    structure?: StructureMap_Structure[];
    /**
     * Other maps used by this map (canonical URLs).
     */
    import?: canonical[];
    /**
     * Organizes the mapping into manageable chunks for human review/ease of maintenance.
     */
    group: StructureMap_Group[];
}

export interface StructureMap_Structure {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    url: canonical;
    /**
     * How the referenced structure is used in this mapping.
     */
    mode?: "source" | "queried" | "target" | "produced";
    /**
     * A sequence of Unicode characters
     */
    alias?: string;
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
}

export interface StructureMap_Group {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    name?: id;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    extends?: id;
    /**
     * If this is the default rule set to apply for the source type or this combination of types.
     */
    typeMode?: "none" | "types" | "type-and-types";
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
    /**
     * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
     */
    input: StructureMap_Input[];
    /**
     * Transform Rule from source to target.
     */
    rule: StructureMap_Rule[];
}

export interface StructureMap_Input {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    name?: id;
    /**
     * A sequence of Unicode characters
     */
    type?: string;
    /**
     * Mode for this instance of data.
     */
    mode?: "source" | "target";
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
}

export interface StructureMap_Rule {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    name?: id;
    /**
     * Source inputs to the mapping.
     */
    source: StructureMap_Source[];
    /**
     * Content to create because of this mapping rule.
     */
    target?: StructureMap_Target[];
    /**
     * Rules contained in this rule.
     */
    rule?: StructureMap_Rule[];
    /**
     * Which other rules to apply in the context of this rule.
     */
    dependent?: StructureMap_Dependent[];
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
}

export interface StructureMap_Source {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    context?: id;
    /**
     * A whole number
     */
    min?: integer;
    /**
     * A sequence of Unicode characters
     */
    max?: string;
    /**
     * A sequence of Unicode characters
     */
    type?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueBase64Binary?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueBoolean?: boolean;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueCanonical?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueCode?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDate?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDateTime?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDecimal?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueId?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueInstant?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueInteger?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueMarkdown?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueOid?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValuePositiveInt?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueString?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueTime?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUnsignedInt?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUri?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUrl?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    defaultValueAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    defaultValueAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    defaultValueAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    defaultValueAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    defaultValueCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    defaultValueCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    defaultValueContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    defaultValueCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    defaultValueDistance?: Distance;
    /**
     * A length of time.
     */
    defaultValueDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    defaultValueHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    defaultValueIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    defaultValueMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    defaultValuePeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    defaultValueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    defaultValueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    defaultValueRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    defaultValueReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    defaultValueSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    defaultValueSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    defaultValueTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    defaultValueContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    defaultValueContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    defaultValueDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    defaultValueExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    defaultValueParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    defaultValueRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    defaultValueTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    defaultValueUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    defaultValueDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    defaultValueMeta?: Meta;
    /**
     * A sequence of Unicode characters
     */
    element?: string;
    /**
     * How to handle the list mode for this element.
     */
    listMode?: "first" | "not_first" | "last" | "not_last" | "only_one";
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    variable?: id;
    /**
     * A sequence of Unicode characters
     */
    condition?: string;
    /**
     * A sequence of Unicode characters
     */
    check?: string;
    /**
     * A sequence of Unicode characters
     */
    logMessage?: string;
}

export interface StructureMap_Target {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    context?: id;
    /**
     * How to interpret the context.
     */
    contextType?: "type" | "variable";
    /**
     * A sequence of Unicode characters
     */
    element?: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    variable?: id;
    /**
     * If field is a list, how to manage the list.
     */
    listMode?: ("first" | "share" | "last" | "collate")[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    listRuleId?: id;
    /**
     * How the data is copied / created.
     */
    transform?: "create" | "copy" | "truncate" | "escape" | "cast" | "append" | "translate" | "reference" | "dateOp" | "uuid" | "pointer" | "evaluate" | "cc" | "c" | "qty" | "id" | "cp";
    /**
     * Parameters to the transform.
     */
    parameter?: StructureMap_Parameter[];
}

export interface StructureMap_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Parameter value - variable or literal.
     */
    valueId?: string;
    /**
     * Parameter value - variable or literal.
     */
    valueString?: string;
    /**
     * Parameter value - variable or literal.
     */
    valueBoolean?: boolean;
    /**
     * Parameter value - variable or literal.
     */
    valueInteger?: string;
    /**
     * Parameter value - variable or literal.
     */
    valueDecimal?: string;
}

export interface StructureMap_Dependent {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    name?: id;
    /**
     * Variable to pass to the rule or group.
     */
    variable?: string[];
}

export interface Subscription {
    /**
     * This is a Subscription resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The status of the subscription, which marks the server state for managing the subscription.
     */
    status?: "requested" | "active" | "error" | "off";
    /**
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    contact?: ContactPoint[];
    /**
     * An instant in time - known at least to the second
     */
    end?: instant;
    /**
     * A sequence of Unicode characters
     */
    reason?: string;
    /**
     * A sequence of Unicode characters
     */
    criteria?: string;
    /**
     * A sequence of Unicode characters
     */
    error?: string;
    /**
     * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
     */
    channel: Subscription_Channel;
}

export interface Subscription_Channel {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of channel to send notifications on.
     */
    type?: "rest-hook" | "websocket" | "email" | "sms" | "message";
    /**
     * A URI that is a literal reference
     */
    endpoint?: url;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    payload?: code;
    /**
     * Additional headers / information to send as part of the notification.
     */
    header?: string[];
}

export interface Substance {
    /**
     * This is a Substance resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for the substance.
     */
    identifier?: Identifier[];
    /**
     * A code to indicate if the substance is actively used.
     */
    status?: "active" | "inactive" | "entered-in-error";
    /**
     * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
     */
    category?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
     */
    instance?: Substance_Instance[];
    /**
     * A substance can be composed of other substances.
     */
    ingredient?: Substance_Ingredient[];
}

export interface Substance_Instance {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    expiry?: dateTime;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
}

export interface Substance_Ingredient {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    quantity?: Ratio;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    substanceCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    substanceReference?: Reference;
}

export interface SubstanceNucleicAcid {
    /**
     * This is a SubstanceNucleicAcid resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    sequenceType?: CodeableConcept;
    /**
     * A whole number
     */
    numberOfSubunits?: integer;
    /**
     * A sequence of Unicode characters
     */
    areaOfHybridisation?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    oligoNucleotideType?: CodeableConcept;
    /**
     * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
     */
    subunit?: SubstanceNucleicAcid_Subunit[];
}

export interface SubstanceNucleicAcid_Subunit {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    subunit?: integer;
    /**
     * A sequence of Unicode characters
     */
    sequence?: string;
    /**
     * A whole number
     */
    length?: integer;
    /**
     * For referring to data content defined in other formats.
     */
    sequenceAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    fivePrime?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    threePrime?: CodeableConcept;
    /**
     * The linkages between sugar residues will also be captured.
     */
    linkage?: SubstanceNucleicAcid_Linkage[];
    /**
     * 5.3.6.8.1 Sugar ID (Mandatory).
     */
    sugar?: SubstanceNucleicAcid_Sugar[];
}

export interface SubstanceNucleicAcid_Linkage {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    connectivity?: string;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    residueSite?: string;
}

export interface SubstanceNucleicAcid_Sugar {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    residueSite?: string;
}

export interface SubstancePolymer {
    /**
     * This is a SubstancePolymer resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    class?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    geometry?: CodeableConcept;
    /**
     * Todo.
     */
    copolymerConnectivity?: CodeableConcept[];
    /**
     * Todo.
     */
    modification?: string[];
    /**
     * Todo.
     */
    monomerSet?: SubstancePolymer_MonomerSet[];
    /**
     * Todo.
     */
    repeat?: SubstancePolymer_Repeat[];
}

export interface SubstancePolymer_MonomerSet {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    ratioType?: CodeableConcept;
    /**
     * Todo.
     */
    startingMaterial?: SubstancePolymer_StartingMaterial[];
}

export interface SubstancePolymer_StartingMaterial {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    material?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    isDefining?: boolean;
    /**
     * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
     */
    amount?: SubstanceAmount;
}

export interface SubstanceAmount {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amountQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    amountRange?: Range;
    /**
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    amountString?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    amountType?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    amountText?: string;
    /**
     * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
     */
    referenceRange?: SubstanceAmount_ReferenceRange;
}

export interface SubstanceAmount_ReferenceRange {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    lowLimit?: Quantity;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    highLimit?: Quantity;
}

export interface SubstancePolymer_Repeat {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    numberOfUnits?: integer;
    /**
     * A sequence of Unicode characters
     */
    averageMolecularFormula?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    repeatUnitAmountType?: CodeableConcept;
    /**
     * Todo.
     */
    repeatUnit?: SubstancePolymer_RepeatUnit[];
}

export interface SubstancePolymer_RepeatUnit {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    orientationOfPolymerisation?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    repeatUnit?: string;
    /**
     * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
     */
    amount?: SubstanceAmount;
    /**
     * Todo.
     */
    degreeOfPolymerisation?: SubstancePolymer_DegreeOfPolymerisation[];
    /**
     * Todo.
     */
    structuralRepresentation?: SubstancePolymer_StructuralRepresentation[];
}

export interface SubstancePolymer_DegreeOfPolymerisation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    degree?: CodeableConcept;
    /**
     * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
     */
    amount?: SubstanceAmount;
}

export interface SubstancePolymer_StructuralRepresentation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    representation?: string;
    /**
     * For referring to data content defined in other formats.
     */
    attachment?: Attachment;
}

export interface SubstanceProtein {
    /**
     * This is a SubstanceProtein resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    sequenceType?: CodeableConcept;
    /**
     * A whole number
     */
    numberOfSubunits?: integer;
    /**
     * The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
     */
    disulfideLinkage?: string[];
    /**
     * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
     */
    subunit?: SubstanceProtein_Subunit[];
}

export interface SubstanceProtein_Subunit {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    subunit?: integer;
    /**
     * A sequence of Unicode characters
     */
    sequence?: string;
    /**
     * A whole number
     */
    length?: integer;
    /**
     * For referring to data content defined in other formats.
     */
    sequenceAttachment?: Attachment;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    nTerminalModificationId?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    nTerminalModification?: string;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    cTerminalModificationId?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    cTerminalModification?: string;
}

export interface SubstanceReferenceInformation {
    /**
     * This is a SubstanceReferenceInformation resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * Todo.
     */
    gene?: SubstanceReferenceInformation_Gene[];
    /**
     * Todo.
     */
    geneElement?: SubstanceReferenceInformation_GeneElement[];
    /**
     * Todo.
     */
    classification?: SubstanceReferenceInformation_Classification[];
    /**
     * Todo.
     */
    target?: SubstanceReferenceInformation_Target[];
}

export interface SubstanceReferenceInformation_Gene {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    geneSequenceOrigin?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    gene?: CodeableConcept;
    /**
     * Todo.
     */
    source?: Reference[];
}

export interface SubstanceReferenceInformation_GeneElement {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    element?: Identifier;
    /**
     * Todo.
     */
    source?: Reference[];
}

export interface SubstanceReferenceInformation_Classification {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    domain?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    classification?: CodeableConcept;
    /**
     * Todo.
     */
    subtype?: CodeableConcept[];
    /**
     * Todo.
     */
    source?: Reference[];
}

export interface SubstanceReferenceInformation_Target {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    target?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    interaction?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    organism?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    organismType?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amountQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    amountRange?: Range;
    /**
     * Todo.
     */
    amountString?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    amountType?: CodeableConcept;
    /**
     * Todo.
     */
    source?: Reference[];
}

export interface SubstanceSourceMaterial {
    /**
     * This is a SubstanceSourceMaterial resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    sourceMaterialClass?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    sourceMaterialType?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    sourceMaterialState?: CodeableConcept;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    organismId?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    organismName?: string;
    /**
     * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
     */
    parentSubstanceId?: Identifier[];
    /**
     * The parent substance of the Herbal Drug, or Herbal preparation.
     */
    parentSubstanceName?: string[];
    /**
     * The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
     */
    countryOfOrigin?: CodeableConcept[];
    /**
     * The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
     */
    geographicalLocation?: string[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    developmentStage?: CodeableConcept;
    /**
     * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
     */
    fractionDescription?: SubstanceSourceMaterial_FractionDescription[];
    /**
     * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
     */
    organism?: SubstanceSourceMaterial_Organism;
    /**
     * To do.
     */
    partDescription?: SubstanceSourceMaterial_PartDescription[];
}

export interface SubstanceSourceMaterial_FractionDescription {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    fraction?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    materialType?: CodeableConcept;
}

export interface SubstanceSourceMaterial_Organism {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    family?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    genus?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    species?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    intraspecificType?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    intraspecificDescription?: string;
    /**
     * 4.9.13.6.1 Author type (Conditional).
     */
    author?: SubstanceSourceMaterial_Author[];
    /**
     * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
     */
    hybrid?: SubstanceSourceMaterial_Hybrid;
    /**
     * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
     */
    organismGeneral?: SubstanceSourceMaterial_OrganismGeneral;
}

export interface SubstanceSourceMaterial_Author {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    authorType?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    authorDescription?: string;
}

export interface SubstanceSourceMaterial_Hybrid {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    maternalOrganismId?: string;
    /**
     * A sequence of Unicode characters
     */
    maternalOrganismName?: string;
    /**
     * A sequence of Unicode characters
     */
    paternalOrganismId?: string;
    /**
     * A sequence of Unicode characters
     */
    paternalOrganismName?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    hybridType?: CodeableConcept;
}

export interface SubstanceSourceMaterial_OrganismGeneral {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    kingdom?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    phylum?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    class?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    order?: CodeableConcept;
}

export interface SubstanceSourceMaterial_PartDescription {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    part?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    partLocation?: CodeableConcept;
}

export interface SubstanceSpecification {
    /**
     * This is a SubstanceSpecification resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    domain?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Supporting literature.
     */
    source?: Reference[];
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * Moiety, for structural modifications.
     */
    moiety?: SubstanceSpecification_Moiety[];
    /**
     * General specifications for this substance, including how it is related to other substances.
     */
    property?: SubstanceSpecification_Property[];
    /**
     * A reference from one resource to another.
     */
    referenceInformation?: Reference;
    /**
     * The detailed description of a substance, typically at a level beyond what is used for prescribing.
     */
    structure?: SubstanceSpecification_Structure;
    /**
     * Codes associated with the substance.
     */
    code?: SubstanceSpecification_Code[];
    /**
     * Names applicable to this substance.
     */
    name?: SubstanceSpecification_Name[];
    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    molecularWeight?: SubstanceSpecification_MolecularWeight[];
    /**
     * A link between this substance and another, with details of the relationship.
     */
    relationship?: SubstanceSpecification_Relationship[];
    /**
     * A reference from one resource to another.
     */
    nucleicAcid?: Reference;
    /**
     * A reference from one resource to another.
     */
    polymer?: Reference;
    /**
     * A reference from one resource to another.
     */
    protein?: Reference;
    /**
     * A reference from one resource to another.
     */
    sourceMaterial?: Reference;
}

export interface SubstanceSpecification_Moiety {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    role?: CodeableConcept;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    stereochemistry?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    opticalActivity?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    molecularFormula?: string;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amountQuantity?: Quantity;
    /**
     * Quantitative value for this moiety.
     */
    amountString?: string;
}

export interface SubstanceSpecification_Property {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    parameters?: string;
    /**
     * A reference from one resource to another.
     */
    definingSubstanceReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    definingSubstanceCodeableConcept?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amountQuantity?: Quantity;
    /**
     * Quantitative value for this property.
     */
    amountString?: string;
}

export interface SubstanceSpecification_Structure {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    stereochemistry?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    opticalActivity?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    molecularFormula?: string;
    /**
     * A sequence of Unicode characters
     */
    molecularFormulaByMoiety?: string;
    /**
     * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
     */
    isotope?: SubstanceSpecification_Isotope[];
    /**
     * The detailed description of a substance, typically at a level beyond what is used for prescribing.
     */
    molecularWeight?: SubstanceSpecification_MolecularWeight;
    /**
     * Supporting literature.
     */
    source?: Reference[];
    /**
     * Molecular structural representation.
     */
    representation?: SubstanceSpecification_Representation[];
}

export interface SubstanceSpecification_Isotope {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    name?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    substitution?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    halfLife?: Quantity;
    /**
     * The detailed description of a substance, typically at a level beyond what is used for prescribing.
     */
    molecularWeight?: SubstanceSpecification_MolecularWeight;
}

export interface SubstanceSpecification_MolecularWeight {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    method?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amount?: Quantity;
}

export interface SubstanceSpecification_Representation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    representation?: string;
    /**
     * For referring to data content defined in other formats.
     */
    attachment?: Attachment;
}

export interface SubstanceSpecification_Code {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status?: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    statusDate?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    comment?: string;
    /**
     * Supporting literature.
     */
    source?: Reference[];
}

export interface SubstanceSpecification_Name {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    preferred?: boolean;
    /**
     * Language of the name.
     */
    language?: CodeableConcept[];
    /**
     * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
     */
    domain?: CodeableConcept[];
    /**
     * The jurisdiction where this name applies.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A synonym of this name.
     */
    synonym?: SubstanceSpecification_Name[];
    /**
     * A translation for this name.
     */
    translation?: SubstanceSpecification_Name[];
    /**
     * Details of the official nature of this name.
     */
    official?: SubstanceSpecification_Official[];
    /**
     * Supporting literature.
     */
    source?: Reference[];
}

export interface SubstanceSpecification_Official {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    authority?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    status?: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
}

export interface SubstanceSpecification_Relationship {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    substanceReference?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    substanceCodeableConcept?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    relationship?: CodeableConcept;
    /**
     * Value of "true" or "false"
     */
    isDefining?: boolean;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    amountQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    amountRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    amountRatio?: Ratio;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountString?: string;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    amountRatioLowLimit?: Ratio;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    amountType?: CodeableConcept;
    /**
     * Supporting literature.
     */
    source?: Reference[];
}

export interface SupplyDelivery {
    /**
     * This is a SupplyDelivery resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the supply delivery event that is used to identify it across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * A code specifying the state of the dispense event.
     */
    status?: "in-progress" | "completed" | "abandoned" | "entered-in-error";
    /**
     * A reference from one resource to another.
     */
    patient?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type?: CodeableConcept;
    /**
     * Record of delivery of what is supplied.
     */
    suppliedItem?: SupplyDelivery_SuppliedItem;
    /**
     * The date or time(s) the activity occurred.
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    occurrenceTiming?: Timing;
    /**
     * A reference from one resource to another.
     */
    supplier?: Reference;
    /**
     * A reference from one resource to another.
     */
    destination?: Reference;
    /**
     * Identifies the person who picked up the Supply.
     */
    receiver?: Reference[];
}

export interface SupplyDelivery_SuppliedItem {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity?: Quantity;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    itemReference?: Reference;
}

export interface SupplyRequest {
    /**
     * This is a SupplyRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Status of the supply request.
     */
    status?: "draft" | "active" | "suspended" | "cancelled" | "completed" | "entered-in-error" | "unknown";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    category?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    itemReference?: Reference;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    quantity: Quantity;
    /**
     * Specific parameters for the ordered item.  For example, the size of the indicated item.
     */
    parameter?: SupplyRequest_Parameter[];
    /**
     * When the request should be fulfilled.
     */
    occurrenceDateTime?: string;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    occurrencePeriod?: Period;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    occurrenceTiming?: Timing;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authoredOn?: dateTime;
    /**
     * A reference from one resource to another.
     */
    requester?: Reference;
    /**
     * Who is intended to fulfill the request.
     */
    supplier?: Reference[];
    /**
     * The reason why the supply item was requested.
     */
    reasonCode?: CodeableConcept[];
    /**
     * The reason why the supply item was requested.
     */
    reasonReference?: Reference[];
    /**
     * A reference from one resource to another.
     */
    deliverFrom?: Reference;
    /**
     * A reference from one resource to another.
     */
    deliverTo?: Reference;
}

export interface SupplyRequest_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * The value of the device detail.
     */
    valueBoolean?: boolean;
}

export interface Task {
    /**
     * This is a Task resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The business identifier for this task.
     */
    identifier?: Identifier[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    instantiatesCanonical?: canonical;
    /**
     * String of characters used to identify a name or a resource
     */
    instantiatesUri?: uri;
    /**
     * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
     */
    basedOn?: Reference[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    groupIdentifier?: Identifier;
    /**
     * Task that this particular task is part of.
     */
    partOf?: Reference[];
    /**
     * The current status of the task.
     */
    status?: "draft" | "requested" | "received" | "accepted" | "rejected" | "ready" | "cancelled" | "in-progress" | "on-hold" | "failed" | "completed" | "entered-in-error";
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    statusReason?: CodeableConcept;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    businessStatus?: CodeableConcept;
    /**
     * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
     */
    intent?: "unknown" | "proposal" | "plan" | "order" | "original-order" | "reflex-order" | "filler-order" | "instance-order" | "option";
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    priority?: code;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    code?: CodeableConcept;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A reference from one resource to another.
     */
    focus?: Reference;
    /**
     * A reference from one resource to another.
     */
    for?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    executionPeriod?: Period;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    authoredOn?: dateTime;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    lastModified?: dateTime;
    /**
     * A reference from one resource to another.
     */
    requester?: Reference;
    /**
     * The kind of participant that should perform the task.
     */
    performerType?: CodeableConcept[];
    /**
     * A reference from one resource to another.
     */
    owner?: Reference;
    /**
     * A reference from one resource to another.
     */
    location?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    reasonCode?: CodeableConcept;
    /**
     * A reference from one resource to another.
     */
    reasonReference?: Reference;
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
     */
    insurance?: Reference[];
    /**
     * Free-text information captured about the task as it progresses.
     */
    note?: Annotation[];
    /**
     * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
     */
    relevantHistory?: Reference[];
    /**
     * A task to be performed.
     */
    restriction?: Task_Restriction;
    /**
     * Additional information that may be needed in the execution of the task.
     */
    input?: Task_Input[];
    /**
     * Outputs produced by the Task.
     */
    output?: Task_Output[];
}

export interface Task_Restriction {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An integer with a value that is positive (e.g. >0)
     */
    repetitions?: positiveInt;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    period?: Period;
    /**
     * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
     */
    recipient?: Reference[];
}

export interface Task_Input {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * The value of the input parameter as a basic type.
     */
    valueBase64Binary?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCanonical?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCode?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDate?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDateTime?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDecimal?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueId?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueInstant?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueInteger?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueMarkdown?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueOid?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valuePositiveInt?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueString?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueTime?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUnsignedInt?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUri?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUrl?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    valueAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    valueAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    valueAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    valueContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    valueDistance?: Distance;
    /**
     * A length of time.
     */
    valueDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    valueHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    valueIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    valueMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    valueRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    valueSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    valueSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    valueTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    valueContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    valueContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    valueExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    valueUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    valueDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    valueMeta?: Meta;
}

export interface Task_Output {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    type: CodeableConcept;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueBase64Binary?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCanonical?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCode?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDate?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDateTime?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDecimal?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueId?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueInstant?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueInteger?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueMarkdown?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueOid?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valuePositiveInt?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueString?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueTime?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUnsignedInt?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUri?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUrl?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUuid?: string;
    /**
     * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    valueAddress?: Address;
    /**
     * A duration of time during which an organism (or a process) has existed.
     */
    valueAge?: Age;
    /**
     * A  text note which also  contains information about who made the statement and when.
     */
    valueAnnotation?: Annotation;
    /**
     * For referring to data content defined in other formats.
     */
    valueAttachment?: Attachment;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A reference to a code defined by a terminology system.
     */
    valueCoding?: Coding;
    /**
     * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    valueContactPoint?: ContactPoint;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueCount?: Count;
    /**
     * A length - a value with a unit that is a physical distance.
     */
    valueDistance?: Distance;
    /**
     * A length of time.
     */
    valueDuration?: Duration;
    /**
     * A human's name with the ability to identify parts and usage.
     */
    valueHumanName?: HumanName;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    valueIdentifier?: Identifier;
    /**
     * An amount of economic utility in some recognized currency.
     */
    valueMoney?: Money;
    /**
     * A time period defined by a start and end date and optionally time.
     */
    valuePeriod?: Period;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    valueQuantity?: Quantity;
    /**
     * A set of ordered Quantities defined by a low and high limit.
     */
    valueRange?: Range;
    /**
     * A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    valueRatio?: Ratio;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
    /**
     * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    valueSampledData?: SampledData;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    valueSignature?: Signature;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    valueTiming?: Timing;
    /**
     * Specifies contact information for a person or organization.
     */
    valueContactDetail?: ContactDetail;
    /**
     * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    valueContributor?: Contributor;
    /**
     * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
     */
    valueExpression?: Expression;
    /**
     * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    valueUsageContext?: UsageContext;
    /**
     * Indicates how the medication is/was taken or should be taken by the patient.
     */
    valueDosage?: Dosage;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    valueMeta?: Meta;
}

export interface TerminologyCapabilities {
    /**
     * This is a TerminologyCapabilities resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this terminology capabilities. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the terminology capabilities is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    kind?: code;
    /**
     * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    software?: TerminologyCapabilities_Software;
    /**
     * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    implementation?: TerminologyCapabilities_Implementation;
    /**
     * Value of "true" or "false"
     */
    lockedDate?: boolean;
    /**
     * Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
     */
    codeSystem?: TerminologyCapabilities_CodeSystem[];
    /**
     * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    expansion?: TerminologyCapabilities_Expansion;
    /**
     * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
     */
    codeSearch?: "explicit" | "all";
    /**
     * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    validateCode?: TerminologyCapabilities_ValidateCode;
    /**
     * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    translation?: TerminologyCapabilities_Translation;
    /**
     * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    closure?: TerminologyCapabilities_Closure;
}

export interface TerminologyCapabilities_Software {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
}

export interface TerminologyCapabilities_Implementation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A URI that is a literal reference
     */
    url?: url;
}

export interface TerminologyCapabilities_CodeSystem {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    uri?: canonical;
    /**
     * For the code system, a list of versions that are supported by the server.
     */
    version?: TerminologyCapabilities_Version[];
    /**
     * Value of "true" or "false"
     */
    subsumption?: boolean;
}

export interface TerminologyCapabilities_Version {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    code?: string;
    /**
     * Value of "true" or "false"
     */
    isDefault?: boolean;
    /**
     * Value of "true" or "false"
     */
    compositional?: boolean;
    /**
     * Language Displays supported.
     */
    language?: code[];
    /**
     * Filter Properties supported.
     */
    filter?: TerminologyCapabilities_Filter[];
    /**
     * Properties supported for $lookup.
     */
    property?: code[];
}

export interface TerminologyCapabilities_Filter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * Operations supported for the property.
     */
    op?: code[];
}

export interface TerminologyCapabilities_Expansion {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    hierarchical?: boolean;
    /**
     * Value of "true" or "false"
     */
    paging?: boolean;
    /**
     * Value of "true" or "false"
     */
    incomplete?: boolean;
    /**
     * Supported expansion parameter.
     */
    parameter?: TerminologyCapabilities_Parameter[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    textFilter?: markdown;
}

export interface TerminologyCapabilities_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    name?: code;
    /**
     * A sequence of Unicode characters
     */
    documentation?: string;
}

export interface TerminologyCapabilities_ValidateCode {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    translations?: boolean;
}

export interface TerminologyCapabilities_Translation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    needsMap?: boolean;
}

export interface TerminologyCapabilities_Closure {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    translation?: boolean;
}

export interface TestReport {
    /**
     * This is a TestReport resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The current state of this test report.
     */
    status?: "completed" | "in-progress" | "waiting" | "stopped" | "entered-in-error";
    /**
     * A reference from one resource to another.
     */
    testScript: Reference;
    /**
     * The overall result from the execution of the TestScript.
     */
    result?: "pass" | "fail" | "pending";
    /**
     * A rational number with implicit precision
     */
    score?: decimal;
    /**
     * A sequence of Unicode characters
     */
    tester?: string;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    issued?: dateTime;
    /**
     * A participant in the test execution, either the execution engine, a client, or a server.
     */
    participant?: TestReport_Participant[];
    /**
     * A summary of information based on the results of executing a TestScript.
     */
    setup?: TestReport_Setup;
    /**
     * A test executed from the test script.
     */
    test?: TestReport_Test[];
    /**
     * A summary of information based on the results of executing a TestScript.
     */
    teardown?: TestReport_Teardown;
}

export interface TestReport_Participant {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of participant.
     */
    type?: "test-engine" | "client" | "server";
    /**
     * String of characters used to identify a name or a resource
     */
    uri?: uri;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
}

export interface TestReport_Setup {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestReport_Action[];
}

export interface TestReport_Action {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A summary of information based on the results of executing a TestScript.
     */
    operation?: TestReport_Operation;
    /**
     * A summary of information based on the results of executing a TestScript.
     */
    assert?: TestReport_Assert;
}

export interface TestReport_Operation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The result of this operation.
     */
    result?: "pass" | "skip" | "fail" | "warning" | "error";
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    message?: markdown;
    /**
     * String of characters used to identify a name or a resource
     */
    detail?: uri;
}

export interface TestReport_Assert {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The result of this assertion.
     */
    result?: "pass" | "skip" | "fail" | "warning" | "error";
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    message?: markdown;
    /**
     * A sequence of Unicode characters
     */
    detail?: string;
}

export interface TestReport_Test {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestReport_Action1[];
}

export interface TestReport_Action1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A summary of information based on the results of executing a TestScript.
     */
    operation?: TestReport_Operation;
    /**
     * A summary of information based on the results of executing a TestScript.
     */
    assert?: TestReport_Assert;
}

export interface TestReport_Teardown {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The teardown action will only contain an operation.
     */
    action: TestReport_Action2[];
}

export interface TestReport_Action2 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A summary of information based on the results of executing a TestScript.
     */
    operation: TestReport_Operation;
}

export interface TestScript {
    /**
     * This is a TestScript resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
     */
    identifier?: Identifier;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this test script. Enables tracking the life-cycle of the content.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the test script is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * An abstract server used in operations within this test script in the origin element.
     */
    origin?: TestScript_Origin[];
    /**
     * An abstract server used in operations within this test script in the destination element.
     */
    destination?: TestScript_Destination[];
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    metadata?: TestScript_Metadata;
    /**
     * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
     */
    fixture?: TestScript_Fixture[];
    /**
     * Reference to the profile to be used for validation.
     */
    profile?: Reference[];
    /**
     * Variable is set based either on element value in response body or on header field value in the response headers.
     */
    variable?: TestScript_Variable[];
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    setup?: TestScript_Setup;
    /**
     * A test in this script.
     */
    test?: TestScript_Test[];
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    teardown?: TestScript_Teardown;
}

export interface TestScript_Origin {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    index?: integer;
    /**
     * A reference to a code defined by a terminology system.
     */
    profile: Coding;
}

export interface TestScript_Destination {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A whole number
     */
    index?: integer;
    /**
     * A reference to a code defined by a terminology system.
     */
    profile: Coding;
}

export interface TestScript_Metadata {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A link to the FHIR specification that this test is covering.
     */
    link?: TestScript_Link[];
    /**
     * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
     */
    capability: TestScript_Capability[];
}

export interface TestScript_Link {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
}

export interface TestScript_Capability {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    required?: boolean;
    /**
     * Value of "true" or "false"
     */
    validated?: boolean;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Which origin server these requirements apply to.
     */
    origin?: integer[];
    /**
     * A whole number
     */
    destination?: integer;
    /**
     * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
     */
    link?: uri[];
    /**
     * A URI that is a reference to a canonical URL on a FHIR resource
     */
    capabilities: canonical;
}

export interface TestScript_Fixture {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Value of "true" or "false"
     */
    autocreate?: boolean;
    /**
     * Value of "true" or "false"
     */
    autodelete?: boolean;
    /**
     * A reference from one resource to another.
     */
    resource?: Reference;
}

export interface TestScript_Variable {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    defaultValue?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
    /**
     * A sequence of Unicode characters
     */
    headerField?: string;
    /**
     * A sequence of Unicode characters
     */
    hint?: string;
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    sourceId?: id;
}

export interface TestScript_Setup {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestScript_Action[];
}

export interface TestScript_Action {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    operation?: TestScript_Operation;
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    assert?: TestScript_Assert;
}

export interface TestScript_Operation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    type?: Coding;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    resource?: code;
    /**
     * A sequence of Unicode characters
     */
    label?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    accept?: code;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    contentType?: code;
    /**
     * A whole number
     */
    destination?: integer;
    /**
     * Value of "true" or "false"
     */
    encodeRequestUrl?: boolean;
    /**
     * The HTTP method the test engine MUST use for this operation regardless of any other operation details.
     */
    method?: "delete" | "get" | "options" | "patch" | "post" | "put" | "head";
    /**
     * A whole number
     */
    origin?: integer;
    /**
     * A sequence of Unicode characters
     */
    params?: string;
    /**
     * Header elements would be used to set HTTP headers.
     */
    requestHeader?: TestScript_RequestHeader[];
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    requestId?: id;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    responseId?: id;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    sourceId?: id;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    targetId?: id;
    /**
     * A sequence of Unicode characters
     */
    url?: string;
}

export interface TestScript_RequestHeader {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    field?: string;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
}

export interface TestScript_Assert {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    label?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * The direction to use for the assertion.
     */
    direction?: "response" | "request";
    /**
     * A sequence of Unicode characters
     */
    compareToSourceId?: string;
    /**
     * A sequence of Unicode characters
     */
    compareToSourceExpression?: string;
    /**
     * A sequence of Unicode characters
     */
    compareToSourcePath?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    contentType?: code;
    /**
     * A sequence of Unicode characters
     */
    expression?: string;
    /**
     * A sequence of Unicode characters
     */
    headerField?: string;
    /**
     * A sequence of Unicode characters
     */
    minimumId?: string;
    /**
     * Value of "true" or "false"
     */
    navigationLinks?: boolean;
    /**
     * The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
     */
    operator?: "equals" | "notEquals" | "in" | "notIn" | "greaterThan" | "lessThan" | "empty" | "notEmpty" | "contains" | "notContains" | "eval";
    /**
     * A sequence of Unicode characters
     */
    path?: string;
    /**
     * The request method or HTTP operation code to compare against that used by the client system under test.
     */
    requestMethod?: "delete" | "get" | "options" | "patch" | "post" | "put" | "head";
    /**
     * A sequence of Unicode characters
     */
    requestURL?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    resource?: code;
    /**
     * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
     */
    response?: "okay" | "created" | "noContent" | "notModified" | "bad" | "forbidden" | "notFound" | "methodNotAllowed" | "conflict" | "gone" | "preconditionFailed" | "unprocessable";
    /**
     * A sequence of Unicode characters
     */
    responseCode?: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    sourceId?: id;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    validateProfileId?: id;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
    /**
     * Value of "true" or "false"
     */
    warningOnly?: boolean;
}

export interface TestScript_Test {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestScript_Action1[];
}

export interface TestScript_Action1 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    operation?: TestScript_Operation;
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    assert?: TestScript_Assert;
}

export interface TestScript_Teardown {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The teardown action will only contain an operation.
     */
    action: TestScript_Action2[];
}

export interface TestScript_Action2 {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    operation: TestScript_Operation;
}

export interface ValueSet {
    /**
     * This is a ValueSet resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    title?: string;
    /**
     * The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
     */
    status?: "draft" | "active" | "retired" | "unknown";
    /**
     * Value of "true" or "false"
     */
    experimental?: boolean;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    date?: dateTime;
    /**
     * A sequence of Unicode characters
     */
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    description?: markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the value set is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Value of "true" or "false"
     */
    immutable?: boolean;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    purpose?: markdown;
    /**
     * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
     */
    copyright?: markdown;
    /**
     * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
     */
    compose?: ValueSet_Compose;
    /**
     * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
     */
    expansion?: ValueSet_Expansion;
}

export interface ValueSet_Compose {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    lockedDate?: date;
    /**
     * Value of "true" or "false"
     */
    inactive?: boolean;
    /**
     * Include one or more codes from a code system or other value set(s).
     */
    include: ValueSet_Include[];
    /**
     * Exclude one or more codes from the value set based on code system filters and/or other value sets.
     */
    exclude?: ValueSet_Include[];
}

export interface ValueSet_Include {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * Specifies a concept to be included or excluded.
     */
    concept?: ValueSet_Concept[];
    /**
     * Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.
     */
    filter?: ValueSet_Filter[];
    /**
     * Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the union of the contents of all of the referenced value sets.
     */
    valueSet?: canonical[];
}

export interface ValueSet_Concept {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
     */
    designation?: ValueSet_Designation[];
}

export interface ValueSet_Designation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A reference to a code defined by a terminology system.
     */
    use?: Coding;
    /**
     * A sequence of Unicode characters
     */
    value?: string;
}

export interface ValueSet_Filter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    property?: code;
    /**
     * The kind of operation to perform as a part of the filter criteria.
     */
    op?: "=" | "is-a" | "descendent-of" | "is-not-a" | "regex" | "in" | "not-in" | "generalizes" | "exists";
    /**
     * A sequence of Unicode characters
     */
    value?: string;
}

export interface ValueSet_Expansion {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    identifier?: uri;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    timestamp?: dateTime;
    /**
     * A whole number
     */
    total?: integer;
    /**
     * A whole number
     */
    offset?: integer;
    /**
     * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
     */
    parameter?: ValueSet_Parameter[];
    /**
     * The codes that are contained in the value set expansion.
     */
    contains?: ValueSet_Contains[];
}

export interface ValueSet_Parameter {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * The value of the parameter.
     */
    valueString?: string;
    /**
     * The value of the parameter.
     */
    valueBoolean?: boolean;
    /**
     * The value of the parameter.
     */
    valueInteger?: string;
    /**
     * The value of the parameter.
     */
    valueDecimal?: string;
    /**
     * The value of the parameter.
     */
    valueUri?: string;
    /**
     * The value of the parameter.
     */
    valueCode?: string;
    /**
     * The value of the parameter.
     */
    valueDateTime?: string;
}

export interface ValueSet_Contains {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * String of characters used to identify a name or a resource
     */
    system?: uri;
    /**
     * Value of "true" or "false"
     */
    abstract?: boolean;
    /**
     * Value of "true" or "false"
     */
    inactive?: boolean;
    /**
     * A sequence of Unicode characters
     */
    version?: string;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    code?: code;
    /**
     * A sequence of Unicode characters
     */
    display?: string;
    /**
     * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
     */
    designation?: ValueSet_Designation[];
    /**
     * Other codes and entries contained under this entry in the hierarchy.
     */
    contains?: ValueSet_Contains[];
}

export interface VerificationResult {
    /**
     * This is a VerificationResult resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A resource that was validated.
     */
    target?: Reference[];
    /**
     * The fhirpath location(s) within the resource that was validated.
     */
    targetLocation?: string[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    need?: CodeableConcept;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    statusDate?: dateTime;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    validationType?: CodeableConcept;
    /**
     * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
     */
    validationProcess?: CodeableConcept[];
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    frequency?: Timing;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    lastPerformed?: dateTime;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    nextScheduled?: date;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    failureAction?: CodeableConcept;
    /**
     * Information about the primary source(s) involved in validation.
     */
    primarySource?: VerificationResult_PrimarySource[];
    /**
     * Describes validation requirements, source(s), status and dates for one or more elements.
     */
    attestation?: VerificationResult_Attestation;
    /**
     * Information about the entity validating information.
     */
    validator?: VerificationResult_Validator[];
}

export interface VerificationResult_PrimarySource {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    who?: Reference;
    /**
     * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
     */
    type?: CodeableConcept[];
    /**
     * Method for communicating with the primary source (manual; API; Push).
     */
    communicationMethod?: CodeableConcept[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    validationStatus?: CodeableConcept;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    validationDate?: dateTime;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    canPushUpdates?: CodeableConcept;
    /**
     * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
     */
    pushTypeAvailable?: CodeableConcept[];
}

export interface VerificationResult_Attestation {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    who?: Reference;
    /**
     * A reference from one resource to another.
     */
    onBehalfOf?: Reference;
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    communicationMethod?: CodeableConcept;
    /**
     * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    date?: date;
    /**
     * A sequence of Unicode characters
     */
    sourceIdentityCertificate?: string;
    /**
     * A sequence of Unicode characters
     */
    proxyIdentityCertificate?: string;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    proxySignature?: Signature;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    sourceSignature?: Signature;
}

export interface VerificationResult_Validator {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference from one resource to another.
     */
    organization: Reference;
    /**
     * A sequence of Unicode characters
     */
    identityCertificate?: string;
    /**
     * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
     */
    attestationSignature?: Signature;
}

export interface VisionPrescription {
    /**
     * This is a VisionPrescription resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: ResourceList[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this vision prescription.
     */
    identifier?: Identifier[];
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    status?: code;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    created?: dateTime;
    /**
     * A reference from one resource to another.
     */
    patient: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
    /**
     * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    dateWritten?: dateTime;
    /**
     * A reference from one resource to another.
     */
    prescriber: Reference;
    /**
     * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
     */
    lensSpecification: VisionPrescription_LensSpecification[];
}

export interface VisionPrescription_LensSpecification {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    product: CodeableConcept;
    /**
     * The eye for which the lens specification applies.
     */
    eye?: "right" | "left";
    /**
     * A rational number with implicit precision
     */
    sphere?: decimal;
    /**
     * A rational number with implicit precision
     */
    cylinder?: decimal;
    /**
     * A whole number
     */
    axis?: integer;
    /**
     * Allows for adjustment on two axis.
     */
    prism?: VisionPrescription_Prism[];
    /**
     * A rational number with implicit precision
     */
    add?: decimal;
    /**
     * A rational number with implicit precision
     */
    power?: decimal;
    /**
     * A rational number with implicit precision
     */
    backCurve?: decimal;
    /**
     * A rational number with implicit precision
     */
    diameter?: decimal;
    /**
     * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    duration?: Quantity;
    /**
     * A sequence of Unicode characters
     */
    color?: string;
    /**
     * A sequence of Unicode characters
     */
    brand?: string;
    /**
     * Notes for special requirements such as coatings and lens materials.
     */
    note?: Annotation[];
}

export interface VisionPrescription_Prism {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A rational number with implicit precision
     */
    amount?: decimal;
    /**
     * The relative base, or reference lens edge, for the prism.
     */
    base?: "up" | "down" | "in" | "out";
}

export interface Project {
    /**
     * This is a Project resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * Value of "true" or "false"
     */
    superAdmin?: boolean;
    /**
     * Value of "true" or "false"
     */
    strictMode?: boolean;
    /**
     * Value of "true" or "false"
     */
    checkReferencesOnWrite?: boolean;
    /**
     * A reference from one resource to another.
     */
    owner?: Reference;
    /**
     * A list of optional features that are enabled for the project.
     */
    features?: ("bots" | "cron" | "email" | "google-auth-required" | "graphql-introspection")[];
    /**
     * A reference from one resource to another.
     */
    defaultPatientAccessPolicy?: Reference;
    /**
     * Secure environment variable that can be used to store secrets for bots.
     */
    secret?: Project_Secret[];
    /**
     * Web application or web site that is associated with the project.
     */
    site?: Project_Site[];
}

export interface Project_Secret {
    /**
     * A sequence of Unicode characters
     */
    name: string;
    /**
     * A sequence of Unicode characters
     */
    valueString?: string;
    /**
     * Value of "true" or "false"
     */
    valueBoolean?: boolean;
    /**
     * A rational number with implicit precision
     */
    valueDecimal?: decimal;
    /**
     * A whole number
     */
    valueInteger?: integer;
}

export interface Project_Site {
    /**
     * A sequence of Unicode characters
     */
    name: string;
    /**
     * The list of domain names associated with the site. User authentication will be restricted to the domains you enter here, plus any subdomains. In other words, a registration for example.com also registers subdomain.example.com. A valid domain requires a host and must not include any path, port, query or fragment.
     */
    domain: string[];
    /**
     * A sequence of Unicode characters
     */
    googleClientId?: string;
    /**
     * A sequence of Unicode characters
     */
    googleClientSecret?: string;
    /**
     * A sequence of Unicode characters
     */
    recaptchaSiteKey?: string;
    /**
     * A sequence of Unicode characters
     */
    recaptchaSecretKey?: string;
}

export interface ClientApplication {
    /**
     * This is a ClientApplication resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * A sequence of Unicode characters
     */
    secret?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    jwksUri?: uri;
    /**
     * String of characters used to identify a name or a resource
     */
    redirectUri?: uri;
    /**
     * String of characters used to identify a name or a resource
     */
    launchUri?: uri;
    /**
     * Value of "true" or "false"
     */
    pkceOptional?: boolean;
    /**
     * External Identity Provider (IdP) configuration details.
     */
    identityProvider?: IdentityProvider;
}

export interface IdentityProvider {
    /**
     * A sequence of Unicode characters
     */
    authorizeUrl: string;
    /**
     * A sequence of Unicode characters
     */
    tokenUrl: string;
    /**
     * A sequence of Unicode characters
     */
    userInfoUrl: string;
    /**
     * A sequence of Unicode characters
     */
    clientId: string;
    /**
     * A sequence of Unicode characters
     */
    clientSecret: string;
    /**
     * Value of "true" or "false"
     */
    useSubject?: boolean;
}

export interface User {
    /**
     * This is a User resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A sequence of Unicode characters
     */
    firstName: string;
    /**
     * A sequence of Unicode characters
     */
    lastName: string;
    /**
     * A sequence of Unicode characters
     */
    externalId?: string;
    /**
     * A sequence of Unicode characters
     */
    email?: string;
    /**
     * Value of "true" or "false"
     */
    emailVerified?: boolean;
    /**
     * Value of "true" or "false"
     */
    admin?: boolean;
    /**
     * A sequence of Unicode characters
     */
    passwordHash?: string;
    /**
     * A sequence of Unicode characters
     */
    mfaSecret?: string;
    /**
     * Value of "true" or "false"
     */
    mfaEnrolled?: boolean;
    /**
     * A reference from one resource to another.
     */
    project?: Reference;
}

export interface Login {
    /**
     * This is a Login resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A reference from one resource to another.
     */
    client?: Reference;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    profileType?: code;
    /**
     * A reference from one resource to another.
     */
    project?: Reference;
    /**
     * A reference from one resource to another.
     */
    user: Reference;
    /**
     * A reference from one resource to another.
     */
    membership?: Reference;
    /**
     * A sequence of Unicode characters
     */
    scope?: string;
    /**
     * The authentication method used to obtain the code (password or google).
     */
    authMethod: "client" | "exchange" | "execute" | "external" | "google" | "password";
    /**
     * An instant in time - known at least to the second
     */
    authTime: instant;
    /**
     * A sequence of Unicode characters
     */
    cookie?: string;
    /**
     * A sequence of Unicode characters
     */
    code?: string;
    /**
     * A sequence of Unicode characters
     */
    codeChallenge?: string;
    /**
     * OPTIONAL, defaults to "plain" if not present in the request.  Code verifier transformation method is "S256" or "plain".
     */
    codeChallengeMethod?: "plain" | "S256";
    /**
     * A sequence of Unicode characters
     */
    refreshSecret?: string;
    /**
     * A sequence of Unicode characters
     */
    nonce?: string;
    /**
     * Value of "true" or "false"
     */
    mfaVerified?: boolean;
    /**
     * Value of "true" or "false"
     */
    granted?: boolean;
    /**
     * Value of "true" or "false"
     */
    revoked?: boolean;
    /**
     * Value of "true" or "false"
     */
    admin?: boolean;
    /**
     * Value of "true" or "false"
     */
    superAdmin?: boolean;
    /**
     * A reference from one resource to another.
     */
    launch?: Reference;
    /**
     * A sequence of Unicode characters
     */
    remoteAddress?: string;
    /**
     * A sequence of Unicode characters
     */
    userAgent?: string;
}

export interface PasswordChangeRequest {
    /**
     * This is a PasswordChangeRequest resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * The type of password change request (invite or reset).
     */
    type?: "invite" | "reset";
    /**
     * A reference from one resource to another.
     */
    user: Reference;
    /**
     * A sequence of Unicode characters
     */
    secret: string;
    /**
     * Value of "true" or "false"
     */
    used?: boolean;
    /**
     * String of characters used to identify a name or a resource
     */
    redirectUri?: uri;
}

export interface JsonWebKey {
    /**
     * This is a JsonWebKey resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * Value of "true" or "false"
     */
    active?: boolean;
    /**
     * A sequence of Unicode characters
     */
    alg?: string;
    /**
     * A sequence of Unicode characters
     */
    kty?: string;
    /**
     * A sequence of Unicode characters
     */
    use?: string;
    /**
     * The operation(s) for which the key is intended to be used.
     */
    key_ops?: string[];
    /**
     * The x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate.
     */
    x5c?: string[];
    /**
     * A sequence of Unicode characters
     */
    n?: string;
    /**
     * A sequence of Unicode characters
     */
    e?: string;
    /**
     * A sequence of Unicode characters
     */
    kid?: string;
    /**
     * A sequence of Unicode characters
     */
    x5t?: string;
    /**
     * A sequence of Unicode characters
     */
    d?: string;
    /**
     * A sequence of Unicode characters
     */
    p?: string;
    /**
     * A sequence of Unicode characters
     */
    q?: string;
    /**
     * A sequence of Unicode characters
     */
    dp?: string;
    /**
     * A sequence of Unicode characters
     */
    dq?: string;
    /**
     * A sequence of Unicode characters
     */
    qi?: string;
}

export interface Bot {
    /**
     * This is a Bot resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * An identifier for this bot.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    description?: string;
    /**
     * The identifier of the bot runtime environment (i.e., vmcontext, awslambda, etc).
     */
    runtimeVersion?: "awslambda" | "vmcontext";
    /**
     * For referring to data content defined in other formats.
     */
    photo?: Attachment;
    /**
     * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    cronTiming?: Timing;
    /**
     * A sequence of Unicode characters
     */
    cronString?: string;
    /**
     * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    category?: CodeableConcept[];
    /**
     * Value of "true" or "false"
     */
    runAsUser?: boolean;
    /**
     * Criteria for creating an AuditEvent as a result of the bot invocation. Possible values are 'always', 'never', 'on-error', or 'on-output'. Default value is 'always'.
     */
    auditEventTrigger?: "always" | "never" | "on-error" | "on-output";
    /**
     * The destination system in which the AuditEvent is to be sent. Possible values are 'log' or 'resource'. Default value is 'resource'.
     */
    auditEventDestination?: ("log" | "resource")[];
    /**
     * For referring to data content defined in other formats.
     */
    sourceCode?: Attachment;
    /**
     * For referring to data content defined in other formats.
     */
    executableCode?: Attachment;
    /**
     * A sequence of Unicode characters
     */
    code?: string;
}

export interface AccessPolicy {
    /**
     * This is a AccessPolicy resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A reference from one resource to another.
     */
    compartment?: Reference;
    /**
     * Access details for a resource type.
     */
    resource?: AccessPolicy_Resource[];
    /**
     * Use IP Access Rules to allowlist, block, and challenge traffic based on the visitor IP address.
     */
    ipAccessRule?: AccessPolicy_IpAccessRule[];
}

export interface AccessPolicy_Resource {
    /**
     * A sequence of Unicode characters
     */
    resourceType: string;
    /**
     * A reference from one resource to another.
     */
    compartment?: Reference;
    /**
     * A sequence of Unicode characters
     */
    criteria?: string;
    /**
     * Value of "true" or "false"
     */
    readonly?: boolean;
    /**
     * Optional list of hidden fields.  Hidden fields are not readable or writeable.
     */
    hiddenFields?: string[];
    /**
     * Optional list of read-only fields.  Read-only fields are readable but not writeable.
     */
    readonlyFields?: string[];
    /**
     * Invariants that must be satisfied for the resource to be written.  Can include %before and %after placeholders to refer to the resource before and after the updates are applied.
     */
    writeConstraint?: Expression[];
}

export interface AccessPolicy_IpAccessRule {
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * A sequence of Unicode characters
     */
    value: string;
    /**
     * Access rule can perform one of the following actions: "allow" | "block".
     */
    action: "allow" | "block";
}

export interface UserConfiguration {
    /**
     * This is a UserConfiguration resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A sequence of Unicode characters
     */
    name?: string;
    /**
     * Optional menu of shortcuts to URLs.
     */
    menu?: UserConfiguration_Menu[];
    /**
     * Shortcut links to URLs.
     */
    search?: UserConfiguration_Search[];
    /**
     * User options that control the display of the application.
     */
    option?: UserConfiguration_Option[];
}

export interface UserConfiguration_Menu {
    /**
     * A sequence of Unicode characters
     */
    title: string;
    /**
     * Shortcut links to URLs.
     */
    link?: UserConfiguration_Menu_Link[];
}

export interface UserConfiguration_Menu_Link {
    /**
     * A sequence of Unicode characters
     */
    name: string;
    /**
     * A URI that is a literal reference
     */
    target: url;
}

export interface UserConfiguration_Search {
    /**
     * A sequence of Unicode characters
     */
    name: string;
    /**
     * A sequence of Unicode characters
     */
    criteria: string;
}

export interface UserConfiguration_Option {
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id: id;
    /**
     * Value of "true" or "false"
     */
    valueBoolean?: boolean;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    valueCode?: code;
    /**
     * A rational number with implicit precision
     */
    valueDecimal?: decimal;
    /**
     * A whole number
     */
    valueInteger?: integer;
    /**
     * A sequence of Unicode characters
     */
    valueString?: string;
}

export interface ProjectMembership {
    /**
     * This is a ProjectMembership resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A reference from one resource to another.
     */
    project: Reference;
    /**
     * A reference from one resource to another.
     */
    invitedBy?: Reference;
    /**
     * A reference from one resource to another.
     */
    user: Reference;
    /**
     * A reference from one resource to another.
     */
    profile: Reference;
    /**
     * A sequence of Unicode characters
     */
    externalId?: string;
    /**
     * A reference from one resource to another.
     */
    accessPolicy?: Reference;
    /**
     * Extended access configuration using parameterized access policies.
     */
    access?: ProjectMembership_Access[];
    /**
     * A reference from one resource to another.
     */
    userConfiguration?: Reference;
    /**
     * Value of "true" or "false"
     */
    admin?: boolean;
}

export interface ProjectMembership_Access {
    /**
     * A reference from one resource to another.
     */
    policy: Reference;
    /**
     * User options that control the display of the application.
     */
    parameter?: ProjectMembership_Access_Parameter[];
}

export interface ProjectMembership_Access_Parameter {
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    name: code;
    /**
     * A sequence of Unicode characters
     */
    valueString?: string;
    /**
     * A reference from one resource to another.
     */
    valueReference?: Reference;
}

export interface BulkDataExport {
    /**
     * This is a BulkDataExport resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * The status of the request.
     */
    status: "accepted" | "active" | "completed" | "error";
    /**
     * An instant in time - known at least to the second
     */
    requestTime: instant;
    /**
     * An instant in time - known at least to the second
     */
    transactionTime?: instant;
    /**
     * String of characters used to identify a name or a resource
     */
    request: uri;
    /**
     * Value of "true" or "false"
     */
    requiresAccessToken?: boolean;
    /**
     * An array of file items with one entry for each generated file. If no resources are returned from the kick-off request, the server SHOULD return an empty array.
     */
    output?: BulkDataExport_Output[];
    /**
     * An array of deleted file items following the same structure as the output array.
     */
    deleted?: BulkDataExport_Deleted[];
    /**
     * Array of message file items following the same structure as the output array.
     */
    error?: BulkDataExport_Error[];
}

export interface BulkDataExport_Output {
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type: code;
    /**
     * String of characters used to identify a name or a resource
     */
    url: uri;
}

export interface BulkDataExport_Deleted {
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type: code;
    /**
     * String of characters used to identify a name or a resource
     */
    url: uri;
}

export interface BulkDataExport_Error {
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    type: code;
    /**
     * String of characters used to identify a name or a resource
     */
    url: uri;
}

export interface SmartAppLaunch {
    /**
     * This is a SmartAppLaunch resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * A reference from one resource to another.
     */
    patient?: Reference;
    /**
     * A reference from one resource to another.
     */
    encounter?: Reference;
}

export interface DomainConfiguration {
    /**
     * This is a DomainConfiguration resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * String of characters used to identify a name or a resource
     */
    domain: uri;
    /**
     * External Identity Provider (IdP) configuration details.
     */
    identityProvider?: IdentityProvider;
}

export interface AsyncJob {
    /**
     * This is a AsyncJob resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * The status of the request.
     */
    status: "accepted" | "active" | "completed" | "error";
    /**
     * An instant in time - known at least to the second
     */
    requestTime: instant;
    /**
     * An instant in time - known at least to the second
     */
    transactionTime?: instant;
    /**
     * String of characters used to identify a name or a resource
     */
    request: uri;
}

export interface Agent {
    /**
     * This is a Agent resource
     */
    resourceType: string;
    /**
     * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    id?: id;
    /**
     * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * String of characters used to identify a name or a resource
     */
    implicitRules?: uri;
    /**
     * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    language?: code;
    /**
     * An identifier for this agent.
     */
    identifier?: Identifier[];
    /**
     * A sequence of Unicode characters
     */
    name: string;
    /**
     * The status of the agent.
     */
    status: "active" | "off" | "error";
    /**
     * A reference from one resource to another.
     */
    device?: Reference;
    /**
     * The settings for the agent.
     */
    setting?: Agent_Setting[];
    /**
     * Details where to send notifications when resources are received that meet the criteria.
     */
    channel: Agent_Channel[];
}

export interface Agent_Setting {
    /**
     * A sequence of Unicode characters
     */
    name: string;
    /**
     * A sequence of Unicode characters
     */
    valueString?: string;
    /**
     * Value of "true" or "false"
     */
    valueBoolean?: boolean;
    /**
     * A rational number with implicit precision
     */
    valueDecimal?: decimal;
    /**
     * A whole number
     */
    valueInteger?: integer;
}

export interface Agent_Channel {
    /**
     * A reference from one resource to another.
     */
    endpoint: Reference;
    /**
     * A reference from one resource to another.
     */
    targetReference?: Reference;
    /**
     * A URI that is a literal reference
     */
    targetUrl?: url;
}

export interface Bundle_Link {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    relation?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
}

export interface Bundle_Entry {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A series of links that provide context to this entry.
     */
    link?: Bundle_Link[];
    /**
     * String of characters used to identify a name or a resource
     */
    fullUrl?: uri;
    resource?: ResourceList;
    /**
     * A container for a collection of resources.
     */
    search?: Bundle_Search;
    /**
     * A container for a collection of resources.
     */
    request?: Bundle_Request;
    /**
     * A container for a collection of resources.
     */
    response?: Bundle_Response;
}

export interface Bundle_Search {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
     */
    mode?: "match" | "include" | "outcome";
    /**
     * A rational number with implicit precision
     */
    score?: decimal;
}

export interface Bundle_Request {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.
     */
    method?: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "PATCH";
    /**
     * String of characters used to identify a name or a resource
     */
    url?: uri;
    /**
     * A sequence of Unicode characters
     */
    ifNoneMatch?: string;
    /**
     * An instant in time - known at least to the second
     */
    ifModifiedSince?: instant;
    /**
     * A sequence of Unicode characters
     */
    ifMatch?: string;
    /**
     * A sequence of Unicode characters
     */
    ifNoneExist?: string;
}

export interface Bundle_Response {
    /**
     * A sequence of Unicode characters
     */
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A sequence of Unicode characters
     */
    status?: string;
    /**
     * String of characters used to identify a name or a resource
     */
    location?: uri;
    /**
     * A sequence of Unicode characters
     */
    etag?: string;
    /**
     * An instant in time - known at least to the second
     */
    lastModified?: instant;
    outcome?: ResourceList;
}

export interface AxiosOapiInstance {
    /**
     * Search
     * Search
     */
    "GET /fhir/R4/{resourceType}": (resourceType: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<Bundle>>;
    /**
     * Create Resource
     * Create Resource
     */
    "POST /fhir/R4/{resourceType}": (resourceType: string, data: ResourceList, config?: AxiosRequestConfig) => Promise<AxiosResponse<ResourceList>>;
    /**
     * Read Resource
     * Read Resource
     */
    "GET /fhir/R4/{resourceType}/{id}": (resourceType: string, id: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<ResourceList>>;
    /**
     * Update Resource
     * Update Resource
     */
    "PUT /fhir/R4/{resourceType}/{id}": (resourceType: string, id: string, data: ResourceList, config?: AxiosRequestConfig) => Promise<AxiosResponse<ResourceList>>;
    /**
     * Delete Resource
     * Delete Resource
     */
    "DELETE /fhir/R4/{resourceType}/{id}": (resourceType: string, id: string, config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Patch Resource
     * Patch Resource
     */
    "PATCH /fhir/R4/{resourceType}/{id}": (resourceType: string, id: string, data?: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Read Resource History
     * Read Resource History
     */
    "GET /fhir/R4/{resourceType}/{id}/_history": (resourceType: string, id: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<Bundle>>;
    /**
     * Read Version
     * Read Version
     */
    "GET /fhir/R4/{resourceType}/{id}/_history/{versionId}": (resourceType: string, id: string, versionId: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<ResourceList>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test petstore.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Swagger Petstore
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * List all pets
     */
    "GET /pets": config => api.get<Pets | Error>(\`/pets\`, config),
    /**
     * Create a pet
     */
    "POST /pets": (data, config) => api.post<Error>(\`/pets\`, data, config),
    /**
     * Info for a specific pet
     */
    "GET /pets/{petId}": (petId, config) => api.get<Pets | Error>(\`/pets/\${petId}\`, config),
    api: api
});

export type Pets = Pet[];

export interface Pet {
    id: number;
    name: string;
    tag?: string;
    [key: string]: unknown;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: unknown;
}

export interface GetPets {
    params?: {
        /**
         * How many items to return at one time (max 100)
         */
        limit?: number;
    };
}

export interface AxiosOapiInstance {
    /**
     * List all pets
     */
    "GET /pets": (config?: AxiosRequestConfig & GetPets) => Promise<AxiosResponse<Pets | Error>>;
    /**
     * Create a pet
     */
    "POST /pets": (data?: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse<Error>>;
    /**
     * Info for a specific pet
     */
    "GET /pets/{petId}": (petId: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<Pets | Error>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test petstore.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Swagger Petstore
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * List all pets
     */
    "GET /pets": config => api.get<Pets | Error>(\`/pets\`, config),
    /**
     * Create a pet
     */
    "POST /pets": (data, config) => api.post<Error>(\`/pets\`, data, config),
    /**
     * Info for a specific pet
     */
    "GET /pets/{petId}": (petId, config) => api.get<Pets | Error>(\`/pets/\${petId}\`, config),
    api: api
});

export type Pets = Pet[];

export interface Pet {
    id: number;
    name: string;
    tag?: string;
    [key: string]: unknown;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: unknown;
}

export interface GetPets {
    params?: {
        /**
         * How many items to return at one time (max 100)
         */
        limit?: number;
    };
}

export interface AxiosOapiInstance {
    /**
     * List all pets
     */
    "GET /pets": (config?: AxiosRequestConfig & GetPets) => Promise<AxiosResponse<Pets | Error>>;
    /**
     * Create a pet
     */
    "POST /pets": (data?: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse<Error>>;
    /**
     * Info for a specific pet
     */
    "GET /pets/{petId}": (petId: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<Pets | Error>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test petstore-exanded.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Swagger Petstore
 *
 * Version: 1.0.0
 *
 * Description:
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Returns all pets from the system that the user has access to
     * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
     *
     * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
     *
     */
    "GET /pets": config => api.get<Pet[] | Error>(\`/pets\`, config),
    /**
     * Creates a new pet in the store.  Duplicates are allowed
     */
    "POST /pets": (data, config) => api.post<Pet | Error>(\`/pets\`, data, config),
    /**
     * Returns a user based on a single ID, if the user does not have access to the pet
     */
    "GET /pets/{id}": (id, config) => api.get<Pet | Error>(\`/pets/\${id}\`, config),
    /**
     * deletes a single pet based on the ID supplied
     */
    "DELETE /pets/{id}": (id, config) => api.delete<Error>(\`/pets/\${id}\`, config),
    api: api
});

export type Pet = NewPet & {
    id: number;
    [key: string]: unknown;
};

export interface NewPet {
    name: string;
    tag?: string;
    [key: string]: unknown;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: unknown;
}

export interface GetPets {
    params?: {
        /**
         * tags to filter by
         */
        tags?: string[];
        /**
         * maximum number of results to return
         */
        limit?: number;
    };
}

export interface AxiosOapiInstance {
    /**
     * Returns all pets from the system that the user has access to
     * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
     *
     * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
     *
     */
    "GET /pets": (config?: AxiosRequestConfig & GetPets) => Promise<AxiosResponse<Pet[] | Error>>;
    /**
     * Creates a new pet in the store.  Duplicates are allowed
     */
    "POST /pets": (data: NewPet, config?: AxiosRequestConfig) => Promise<AxiosResponse<Pet | Error>>;
    /**
     * Returns a user based on a single ID, if the user does not have access to the pet
     */
    "GET /pets/{id}": (id: number, config?: AxiosRequestConfig) => Promise<AxiosResponse<Pet | Error>>;
    /**
     * deletes a single pet based on the ID supplied
     */
    "DELETE /pets/{id}": (id: number, config?: AxiosRequestConfig) => Promise<AxiosResponse<Error>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test petstore-expanded.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Swagger Petstore
 *
 * Version: 1.0.0
 *
 * Description:
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Returns all pets from the system that the user has access to
     * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
     *
     * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
     *
     */
    "GET /pets": config => api.get<Pet[] | Error>(\`/pets\`, config),
    /**
     * Creates a new pet in the store.  Duplicates are allowed
     */
    "POST /pets": (data, config) => api.post<Pet | Error>(\`/pets\`, data, config),
    /**
     * Returns a user based on a single ID, if the user does not have access to the pet
     */
    "GET /pets/{id}": (id, config) => api.get<Pet | Error>(\`/pets/\${id}\`, config),
    /**
     * deletes a single pet based on the ID supplied
     */
    "DELETE /pets/{id}": (id, config) => api.delete<Error>(\`/pets/\${id}\`, config),
    api: api
});

export type Pet = NewPet & {
    id: number;
    [key: string]: unknown;
};

export interface NewPet {
    name: string;
    tag?: string;
    [key: string]: unknown;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: unknown;
}

export interface GetPets {
    params?: {
        /**
         * tags to filter by
         */
        tags?: string[];
        /**
         * maximum number of results to return
         */
        limit?: number;
    };
}

export interface AxiosOapiInstance {
    /**
     * Returns all pets from the system that the user has access to
     * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
     *
     * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
     *
     */
    "GET /pets": (config?: AxiosRequestConfig & GetPets) => Promise<AxiosResponse<Pet[] | Error>>;
    /**
     * Creates a new pet in the store.  Duplicates are allowed
     */
    "POST /pets": (data: NewPet, config?: AxiosRequestConfig) => Promise<AxiosResponse<Pet | Error>>;
    /**
     * Returns a user based on a single ID, if the user does not have access to the pet
     */
    "GET /pets/{id}": (id: number, config?: AxiosRequestConfig) => Promise<AxiosResponse<Pet | Error>>;
    /**
     * deletes a single pet based on the ID supplied
     */
    "DELETE /pets/{id}": (id: number, config?: AxiosRequestConfig) => Promise<AxiosResponse<Error>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test pol.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Payment Orchestration Layer
 *
 * Version: 1.0.0
 *
 * Description:
 * Overview
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Request a Bearer token
     */
    "POST /authentication/v1.0.0/oauth/token": (data, config) => api.post<Response200AuthenticationTokenRead>(\`/authentication/v1.0.0/oauth/token\`, data, config),
    /**
     * Retrieve information on a UK bank account
     *
     * Required OAuth Audience: <code>BankAccounts</code>
     */
    "POST /bank-account/uk/v1.0.0/information": (data, config) => api.post<Response200UKBankAccountInformation>(\`/bank-account/uk/v1.0.0/information\`, data, config),
    /**
     * Create Direct Debit Collections
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "POST /direct-debit/v1.0.0/instructions/{MandateIdentification}/collections": (MandateIdentification, data, config) => api.post<Response200DirectDebitCollectionRead>(\`/direct-debit/v1.0.0/instructions/\${MandateIdentification}/collections\`, data, config),
    /**
     * Create Direct Debit Instruction
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "POST /direct-debit/v1.0.0/instructions": (data, config) => api.post<Response200DirectDebitInstructionRead>(\`/direct-debit/v1.0.0/instructions\`, data, config),
    /**
     * Update Direct Debit Instruction
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "PUT /direct-debit/v1.0.0/instructions/{MandateIdentification}": (MandateIdentification, data, config) => api.put<Response200UpdateDirectDebitInstructionRead>(\`/direct-debit/v1.0.0/instructions/\${MandateIdentification}\`, data, config),
    /**
     * Update Direct Debit Instruction Status
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "PUT /direct-debit/v1.0.0/instructions/{MandateIdentification}/status": (MandateIdentification, data, config) => api.put<Response200DirectDebitInstructionUpdateStatus>(\`/direct-debit/v1.0.0/instructions/\${MandateIdentification}/status\`, data, config),
    /**
     * Upload a Direct Debit collection file
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     *
     * Example file content:
     *
     * <code>{
     * "document": {
     *  "fi_to_fi_customer_direct_debit": {
     *    "group_header": {
     *      "message_identification": "cc60bfc5-7876-4fba-ae24-2d9c3e32e0b0",
     *      "creation_date_time": "2021-07-23T10:46:56.697Z",
     *      "number_of_transactions": 3
     *    },
     *    "direct_debit_transaction_information": [
     *      {
     *        "payment_identification": {
     *          "end_to_end_identification": "5231998b-d704-40e1-aea4-3ac952aa757b"
     *        },
     *        "interbank_settlement_amount": {
     *          "active_currency": "GBP",
     *          "currency_amount": "10.00"
     *        },
     *        "interbank_settlement_date": "2021-07-23",
     *        "direct_debit_transaction": {
     *          "mandate_related_information": {
     *            "mandate_id": "EXE-123456"
     *          }
     *        }
     *      }
     *    ]
     *  }
     * }
     * }</code>
     */
    "POST /bulk-collections/v1.0.0/collection-files": (data, config) => api.post<Response200BulkCollectionsFileRead>(\`/bulk-collections/v1.0.0/collection-files\`, data, config),
    /**
     * Get the status of a Direct Debit collection file
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "GET /bulk-collections/v1.0.0/collection-files/{CollectionFileIdentification}": (CollectionFileIdentification, config) => api.get<Response200BulkCollectionsFileProgressRead>(\`/bulk-collections/v1.0.0/collection-files/\${CollectionFileIdentification}\`, config),
    /**
     * AUDDIS Bank Returned Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/auddis-bank-returned-advices": (data, config) => api.post(\`/direct-debit-webhooks/v1.0.0/auddis-bank-returned-advices\`, data, config),
    /**
     * ARUDD Unpaid Direct Debit Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/arudd-unpaid-direct-debit-advices": (data, config) => api.post(\`/direct-debit-webhooks/v1.0.0/arudd-unpaid-direct-debit-advices\`, data, config),
    /**
     * ADDACS Amendments Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/addacs-amendments-advices": (data, config) => api.post(\`/direct-debit-webhooks/v1.0.0/addacs-amendments-advices\`, data, config),
    /**
     * ADDACS Cancellations Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/addacs-cancellations-advices": (data, config) => api.post(\`/direct-debit-webhooks/v1.0.0/addacs-cancellations-advices\`, data, config),
    /**
     * DDIC Indemnity Claim Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/ddic-indemnity-claim-advices": (data, config) => api.post(\`/direct-debit-webhooks/v1.0.0/ddic-indemnity-claim-advices\`, data, config),
    /**
     * Collection Advices
     */
    "POST /direct-debit-webhooks/v1.0.0/collection-advices": (data, config) => api.post(\`/direct-debit-webhooks/v1.0.0/collection-advices\`, data, config),
    /**
     * Create Direct Credit
     *
     * Required OAuth Audience: <code>DirectCredits</code>
     */
    "POST /direct-credit/v1.0.0/instructions": (data, config) => api.post<Response200DirectCreditInstructionRead>(\`/direct-credit/v1.0.0/instructions\`, data, config),
    /**
     * AWACS Wrong Account for Credits Advice
     */
    "POST /direct-credit-webhooks/v1.0.0/awacs-wrong-account-for-credits-advices": (data, config) => api.post(\`/direct-credit-webhooks/v1.0.0/awacs-wrong-account-for-credits-advices\`, data, config),
    /**
     * ARUCS Unapplied Credits Advice
     */
    "POST /direct-credit-webhooks/v1.0.0/arucs-unapplied-credits-advices": (data, config) => api.post(\`/direct-credit-webhooks/v1.0.0/arucs-unapplied-credits-advices\`, data, config),
    /**
     * Request Payment Session
     *
     * Required OAuth Audience: <code>PaymentSession</code>
     */
    "POST /payments/v1.0.0/sessions": (data, config) => api.post(\`/payments/v1.0.0/sessions\`, data, config),
    /**
     * Payment approved
     */
    "POST /webhook/v1.0.0/approved": (data, config) => api.post(\`/webhook/v1.0.0/approved\`, data, config),
    /**
     * Payment voided
     */
    "POST /webhook/v1.0.0/voided": (data, config) => api.post(\`/webhook/v1.0.0/voided\`, data, config),
    /**
     * Payment captured
     */
    "POST /webhook/v1.0.0/captured": (data, config) => api.post(\`/webhook/v1.0.0/captured\`, data, config),
    /**
     * Payment declined
     */
    "POST /webhook/v1.0.0/declined": (data, config) => api.post(\`/webhook/v1.0.0/declined\`, data, config),
    /**
     * Payment refund declined
     */
    "POST /webhook/v1.0.0/refund-declined": (data, config) => api.post(\`/webhook/v1.0.0/refund-declined\`, data, config),
    /**
     * Payment Refund
     * Request Payment Refund
     *
     * Required OAuth Audience: <code>PaymentSession</code>
     */
    "POST /payments/v1.0.0/{id}/refunds": (id, data, config) => api.post<SuccessResponseBody>(\`/payments/v1.0.0/\${id}/refunds\`, data, config),
    "POST /inbound-transactions/v1.0.0/transactions/{id}/commit": (id, data, config) => api.post<{
        /**
         * Provides further details on an entry in the report.
         */
        Data: OBTransaction6;
        [key: string]: unknown;
    }>(\`/inbound-transactions/v1.0.0/transactions/\${id}/commit\`, data, config),
    "GET /inbound-transactions/v1.0.0/accounts/{accountId}/transactions": (accountId, config) => api.get<OBReadTransaction6>(\`/inbound-transactions/v1.0.0/accounts/\${accountId}/transactions\`, config),
    "GET /inbound-transactions/v1.0.0/transactions": config => api.get<OBReadTransaction6>(\`/inbound-transactions/v1.0.0/transactions\`, config),
    "PATCH /inbound-transactions/v1.0.0/transactions/{id}": (id, data, config) => api.patch<{
        /**
         * Provides further details on an entry in the report.
         */
        Data: OBTransaction6;
        [key: string]: unknown;
    }>(\`/inbound-transactions/v1.0.0/transactions/\${id}\`, data, config),
    /**
     *
     * NewAccountNumber and New only required if ReasonCode === "3" || ReasonCode === "C"
     */
    "POST /direct-debit-test-harness/v1.0.0/reports/addacs": (data, config) => api.post<DirectDebitReportResponse>(\`/direct-debit-test-harness/v1.0.0/reports/addacs\`, data, config),
    "POST /direct-debit-test-harness/v1.0.0/reports/arucs": (data, config) => api.post<DirectDebitReportResponse>(\`/direct-debit-test-harness/v1.0.0/reports/arucs\`, data, config),
    /**
     *
     * User will either need to provide both returnCode and returnDescription fields or leave both fields as ""
     */
    "POST /direct-debit-test-harness/v1.0.0/reports/arudd": (data, config) => api.post<DirectDebitReportResponse>(\`/direct-debit-test-harness/v1.0.0/reports/arudd\`, data, config),
    /**
     * NewAccountNumber and NewSortcode only required if ReasonCode === "C"
     */
    "POST /direct-debit-test-harness/v1.0.0/reports/auddis": (data, config) => api.post<DirectDebitReportResponse>(\`/direct-debit-test-harness/v1.0.0/reports/auddis\`, data, config),
    "POST /direct-debit-test-harness/v1.0.0/reports/awacs": (data, config) => api.post<DirectDebitReportResponse>(\`/direct-debit-test-harness/v1.0.0/reports/awacs\`, data, config),
    "POST /direct-debit-test-harness/v1.0.0/reports/ddic": (data, config) => api.post<DirectDebitReportResponse>(\`/direct-debit-test-harness/v1.0.0/reports/ddic\`, data, config),
    api: api
});

export interface CreateAuthorizationToken {
    Data: {
        Audience: Audience;
        /**
         * Stringified UUIDv4.
         * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
         */
        ClientSecret: UUID;
        /**
         * Stringified UUIDv4.
         * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
         */
        ClientId: UUID;
        GrantType: "client_credentials";
        [key: string]: unknown;
    };
}

export type Audience = "BankAccounts" | "DirectDebits" | "PaymentSession" | "DirectCredits" | "InboundTransactions" | "FakeCoEvents" | "PlatformDatabaseApi";

export type UUID = string;

export type Response200AuthenticationTokenRead = AuthenticationToken;

export interface AuthenticationToken {
    Data: {
        ExpiresIn: number;
        TokenType: "Bearer";
        AccessToken: string;
        [key: string]: unknown;
    };
}

export interface CreateUKBankAccountInformation {
    Data: {
        AccountNumber: AccountNumber;
        SortCode: SortCode;
        [key: string]: unknown;
    };
}

export type AccountNumber = string;

export type SortCode = string;

export type Response200UKBankAccountInformation = BankAccountResponse;

export interface BankAccountResponse {
    Data: {
        SupportsFasterPayments: boolean;
        SupportsDirectCredits: boolean;
        SupportsDirectDebits: boolean;
        AccountNumberExistsAtSortCode: boolean;
        AccountNumber: AccountNumber;
        SortCode: SortCode;
        [key: string]: unknown;
    };
}

export type IdempotencyKey = string;

export interface CreateDirectDebitCollection {
    Data: {
        DirectDebitCollection?: OBCreateDirectDebitCollection;
        [key: string]: unknown;
    };
}

export interface OBCreateDirectDebitCollection {
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    PaymentAmount: Amount;
    PaymentDate: string;
}

export interface Amount {
    /**
     * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     */
    Amount: string;
    Currency: "GBP";
}

export type Response200DirectDebitCollectionRead = OBReadDirectDebitCollection;

export interface OBReadDirectDebitCollection {
    Data: {
        DirectDebitCollection?: OBDirectDebitCollection;
        [key: string]: unknown;
    };
}

export interface OBDirectDebitCollection {
    /**
     * Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.
     */
    CollectionIdentification: string;
    PaymentAmount: {
        Currency: "GBP";
        Amount: string;
        [key: string]: unknown;
    };
    PaymentDate: string;
}

export interface PostDirectdebitV100InstructionsMandateIdentificationCollections {
    headers?: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
}

export interface DirectDebitInstruction {
    Data: {
        DirectDebitInstruction?: OBCreateDirectDebitInstruction;
        [key: string]: unknown;
    };
    /**
     * MetaData
     * Meta Data relevant to the payload
     */
    Meta?: Meta;
}

export interface OBCreateDirectDebitInstruction {
    /**
     *
     * The Debtor object allows users to submit name of the client.
     */
    Debtor: Debtor;
    /**
     *
     * The DebtorAccount object allows users to submit direct debit account information.
     */
    DebtorAccount: DebtorAccount;
    Frequency: Frequency;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    RecurringPaymentAmount?: Amount;
    FirstPaymentDate?: string;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    FirstPaymentAmount?: Amount;
}

export interface Debtor {
    Name: string;
}

export interface DebtorAccount {
    SchemeName: "SortCodeAccountNumber";
    Identification: string;
    Name: string;
}

export interface Frequency {
    Schedule: "Ad-hoc" | "Ad-hoc Plus" | "Monthly";
    /**
     * Required if Schedule is \`Monthly\`. Zero-indexed, max value 30
     */
    DayOfMonth?: number;
}

export type Meta = any;

export type Response200DirectDebitInstructionRead = OBReadDirectDebit;

export interface OBReadDirectDebit {
    Data: {
        /**
         * Account to or from which a cash entry is made.
         */
        DirectDebitInstruction?: OBDirectDebit;
        [key: string]: unknown;
    };
    /**
     * MetaData
     * Meta Data relevant to the payload
     */
    Meta?: Meta;
}

export interface OBDirectDebit {
    /**
     * Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.
     */
    MandateIdentification: string;
    /**
     *
     * The Debtor object allows users to submit name of the client.
     */
    Debtor: Debtor;
    /**
     *
     * The DebtorAccount object allows users to submit direct debit account information.
     */
    DebtorAccount: DebtorAccount;
    Frequency: Frequency;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    RecurringPaymentAmount?: Amount;
    /**
     * Specifies the status of the direct debit in code form.
     */
    StatusCode: StatusCode;
    FirstPaymentDate?: string;
    /**
     *
     * The Amount object allows users to submit an amount and currency.
     */
    FirstPaymentAmount?: Amount;
}

export type StatusCode = "Active" | "Suspended" | "Cancelled" | "Inactive";

export interface PostDirectdebitV100Instructions {
    headers?: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
}

export interface OBReadUpdateDirectDebit {
    /**
     * MetaData
     * Meta Data relevant to the payload
     */
    Meta: Meta;
}

export type Response200UpdateDirectDebitInstructionRead = OBReadUpdateDirectDebit;

export interface UpdateDirectDebitInstructionStatus {
    Data: {
        /**
         * Specifies the status of the direct debit in code form.
         */
        StatusCode: StatusCode;
        [key: string]: unknown;
    };
}

export type Response200DirectDebitInstructionUpdateStatus = UpdateDirectDebitInstructionStatus;

export interface Response200BulkCollectionsFileRead {
    Data: {
        CollectionFileIdentification: string;
        [key: string]: unknown;
    };
}

export interface PostBulkcollectionsV100Collectionfiles {
    headers?: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
}

export interface Response200BulkCollectionsFileProgressRead {
    Data: {
        NumberOfProcessingErrors: number;
        ProcessingPercentageComplete: number;
        Status: BulkCollectionStatus;
        CollectionFileIdentification: string;
        [key: string]: unknown;
    };
}

export type BulkCollectionStatus = "INITIALISING" | "PROCESSING" | "PENDING_UPLOAD" | "COMPLETED";

export interface AuddisBankReturnedReportBody {
    document: Document;
    [key: string]: unknown;
}

export interface Document {
    mandate_acceptance_report: MandateAcceptanceReportV07;
    [key: string]: unknown;
}

export interface MandateAcceptanceReportV07 {
    group_header: GroupHeader80;
    underlying_acceptance_details: MandateAcceptance7[];
    [key: string]: unknown;
}

export interface GroupHeader80 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    [key: string]: unknown;
}

export type Max35Text = string & string;

export type schemas_ISODateTime = string;

export interface MandateAcceptance7 {
    acceptance_result: AcceptanceResult6;
    original_mandate?: OriginalMandate8Choice;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface AcceptanceResult6 {
    accepted: YesNoIndicator;
    reject_reason?: MandateReason1Choice;
    additional_reject_reason_information?: Max105Text[];
    [key: string]: unknown;
}

export type YesNoIndicator = boolean;

export interface MandateReason1Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export type Max105Text = string & string;

export interface OriginalMandate8Choice {
    original_mandate: Mandate16;
    [key: string]: unknown;
}

export interface Mandate16 {
    mandate_identification: Max35Text;
    type: MandateTypeInformation2;
    occurrences?: MandateOccurrences5Modified;
    creditor: PartyIdentification135;
    creditor_account: CashAccount40;
    creditor_agent: BranchAndFinancialInstitutionIdentification6;
    debtor: PartyIdentification135Modification1;
    debtor_account: CashAccount40;
    debtor_agent: BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface MandateTypeInformation2 {
    local_instrument?: LocalInstrument2Choice;
    [key: string]: unknown;
}

export interface LocalInstrument2Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export type MandateOccurrences5Modified = {
    first_collection_date?: ISODate;
    [key: string]: unknown;
} | undefined;

export type ISODate = string;

export interface PartyIdentification135 {
    identification?: Party38Choice;
    [key: string]: unknown;
}

export interface Party38Choice {
    organisation_identification: OrganisationIdentification29;
    [key: string]: unknown;
}

export interface OrganisationIdentification29 {
    other?: GenericOrganisationIdentification1[];
    [key: string]: unknown;
}

export interface GenericOrganisationIdentification1 {
    identification: Max35Text;
    [key: string]: unknown;
}

export interface CashAccount40 {
    identification?: AccountIdentification4Choice;
    name?: Max70Text;
    [key: string]: unknown;
}

export interface AccountIdentification4Choice {
    other: GenericAccountIdentification1;
    [key: string]: unknown;
}

export interface GenericAccountIdentification1 {
    identification: Max34Text;
    [key: string]: unknown;
}

export type Max34Text = string & string;

export type Max70Text = string & string;

export interface BranchAndFinancialInstitutionIdentification6 {
    financial_institution_identification: FinancialInstitutionIdentification18;
    [key: string]: unknown;
}

export interface FinancialInstitutionIdentification18 {
    clearing_system_member_identification?: ClearingSystemMemberIdentification2;
    [key: string]: unknown;
}

export interface ClearingSystemMemberIdentification2 {
    member_identification: Max35Text;
    [key: string]: unknown;
}

export interface PartyIdentification135Modification1 {
    name?: Max140Text;
    [key: string]: unknown;
}

export type Max140Text = string & string;

export interface SupplementaryData1 {
    place_and_name?: Max350Text;
    envelope: SupplementaryDataEnvelope1;
    [key: string]: unknown;
}

export type Max350Text = string & string;

export type SupplementaryDataEnvelope1 = string | undefined;

export interface PostDirectdebitwebhooksV100Auddisbankreturnedadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export interface AruddReportBody {
    document: schemas_Document;
    [key: string]: unknown;
}

export interface schemas_Document {
    bank_to_customer_debit_credit_notification: BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: AccountNotification19[];
    [key: string]: unknown;
}

export interface GroupHeader81 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    [key: string]: unknown;
}

export interface AccountNotification19 {
    identification: Max35Text;
    creation_date_time?: schemas_ISODateTime;
    account: CashAccount41;
    entry?: ReportEntry11[];
    [key: string]: unknown;
}

export interface CashAccount41 {
    identification?: AccountIdentification4Choice;
    [key: string]: unknown;
}

export interface ReportEntry11 {
    reversal_indicator?: FixedFalseModified1;
    credit_debit_indicator?: CreditDebitCode;
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    status: EntryStatus1Choice;
    bank_transaction_code: BankTransactionCodeStructure4;
    entry_details?: EntryDetails10[];
    [key: string]: unknown;
}

export type FixedFalseModified1 = false;

export type CreditDebitCode = "DBIT";

export type ActiveOrHistoricCurrencyAndAmountModified1 = string;

export interface EntryStatus1Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export interface BankTransactionCodeStructure4 {
    domain?: BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export type ExternalBankTransactionDomain1CodeModified1 = "PMNT";

export interface BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type ExternalBankTransactionFamily1CodeModified1 = "IDDT";

export type ExternalBankTransactionSubFamily1CodeModified1 = "UPDD";

export interface ProprietaryBankTransactionCodeStructure1 {
    code: Max35Text;
    [key: string]: unknown;
}

export interface EntryDetails10 {
    transaction_details?: EntryTransaction11[];
    [key: string]: unknown;
}

export interface EntryTransaction11 {
    references?: TransactionReferences6;
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    credit_debit_indicator?: CreditDebitCode;
    bank_transaction_code?: BankTransactionCodeStructure4;
    related_parties?: TransactionParties9;
    related_agents?: TransactionAgents5;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface TransactionReferences6 {
    instruction_identification?: Max35Text;
    end_to_end_identification?: Max35TextNullable;
    [key: string]: unknown;
}

export type Max35TextNullable = string | undefined;

export interface TransactionParties9 {
    debtor_account?: CashAccount40;
    creditor?: Party40Choice;
    creditor_account?: CashAccount40Modified1;
    [key: string]: unknown;
}

export interface Party40Choice {
    party: schemas_PartyIdentification135;
    [key: string]: unknown;
}

export interface schemas_PartyIdentification135 {
    name?: Max140Text;
    identification?: Party38Choice;
    [key: string]: unknown;
}

export interface CashAccount40Modified1 {
    identification?: AccountIdentification4Choice;
    [key: string]: unknown;
}

export interface TransactionAgents5 {
    debtor_agent?: BranchAndFinancialInstitutionIdentification6Modified2;
    creditor_agent?: BranchAndFinancialInstitutionIdentification6Modified1;
    [key: string]: unknown;
}

export interface BranchAndFinancialInstitutionIdentification6Modified2 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18;
    branch_identification?: BranchData3;
    [key: string]: unknown;
}

export interface schemas_FinancialInstitutionIdentification18 {
    clearing_system_member_identification?: ClearingSystemMemberIdentification2;
    name?: Max140Text;
    [key: string]: unknown;
}

export interface BranchData3 {
    name?: Max140Text;
    [key: string]: unknown;
}

export interface BranchAndFinancialInstitutionIdentification6Modified1 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18;
    [key: string]: unknown;
}

export interface PostDirectdebitwebhooksV100Aruddunpaiddirectdebitadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export interface AddacsAmendmentsReportBody {
    document: components_schemas_Document;
    [key: string]: unknown;
}

export interface components_schemas_Document {
    mandate_amendment_request: MandateAmendmentRequestV07;
    [key: string]: unknown;
}

export interface MandateAmendmentRequestV07 {
    group_header: schemas_GroupHeader80;
    underlying_amendment_details: MandateAmendment7[];
    [key: string]: unknown;
}

export interface schemas_GroupHeader80 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    [key: string]: unknown;
}

export interface MandateAmendment7 {
    amendment_reason: MandateAmendmentReason2;
    mandate: Mandate18;
    original_mandate: OriginalMandate9Choice;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface MandateAmendmentReason2 {
    reason: schemas_MandateReason1Choice;
    [key: string]: unknown;
}

export interface schemas_MandateReason1Choice {
    proprietary: Max35Text;
    [key: string]: unknown;
}

export interface Mandate18 {
    debtor_account?: CashAccount40Modified1;
    debtor_agent?: BranchAndFinancialInstitutionIdentification6;
    tracking_indicator: TrueFalseIndicator;
    mandate_identification: Max35Text;
    [key: string]: unknown;
}

export type TrueFalseIndicator = boolean;

export interface OriginalMandate9Choice {
    original_mandate: Mandate17;
    [key: string]: unknown;
}

export interface Mandate17 {
    mandate_identification: Max35Text;
    creditor: PartyIdentification135;
    debtor_account?: CashAccount40;
    debtor_agent: BranchAndFinancialInstitutionIdentification6;
    tracking_indicator: TrueFalseIndicator;
    debtor: PartyIdentification135Modified1;
    [key: string]: unknown;
}

export interface PartyIdentification135Modified1 {
    name?: Max140Text;
    [key: string]: unknown;
}

export interface PostDirectdebitwebhooksV100Addacsamendmentsadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export interface AddacsCancellationsReportBody {
    document: addacs_cancellations_components_schemas_Document;
    [key: string]: unknown;
}

export interface addacs_cancellations_components_schemas_Document {
    mandate_cancellation_request: MandateCancellationRequestV07;
    [key: string]: unknown;
}

export interface MandateCancellationRequestV07 {
    group_header: schemas_GroupHeader80;
    underlying_cancellation_details: MandateCancellation7[];
    [key: string]: unknown;
}

export interface MandateCancellation7 {
    cancellation_reason: MandateCancellationReason1;
    original_mandate: schemas_OriginalMandate9Choice;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface MandateCancellationReason1 {
    reason: schemas_MandateReason1Choice;
    [key: string]: unknown;
}

export interface schemas_OriginalMandate9Choice {
    original_mandate: schemas_Mandate17;
    [key: string]: unknown;
}

export interface schemas_Mandate17 {
    mandate_identification: Max35Text;
    tracking_indicator: TrueFalseIndicator;
    creditor: schemas_PartyIdentification135Modified1;
    debtor: components_schemas_PartyIdentification135;
    debtor_account?: CashAccount40;
    debtor_agent: BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface schemas_PartyIdentification135Modified1 {
    identification?: Party38ChoiceModified1;
    [key: string]: unknown;
}

export interface Party38ChoiceModified1 {
    organisation_identification: OrganisationIdentification29;
    [key: string]: unknown;
}

export interface components_schemas_PartyIdentification135 {
    name?: Max140Text;
    [key: string]: unknown;
}

export interface PostDirectdebitwebhooksV100Addacscancellationsadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export interface DdicReportBody {
    document: ddic_components_schemas_Document;
    [key: string]: unknown;
}

export interface ddic_components_schemas_Document {
    bank_to_customer_debit_credit_notification: schemas_BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface schemas_BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: schemas_AccountNotification19[];
    [key: string]: unknown;
}

export interface schemas_AccountNotification19 {
    identification: Max35Text;
    creation_date_time?: schemas_ISODateTime;
    account: CashAccount41;
    entry?: schemas_ReportEntry11[];
    [key: string]: unknown;
}

export interface schemas_ReportEntry11 {
    additional_entry_information?: Max500Text;
    reversal_indicator?: FixedTrueModified1;
    credit_debit_indicator?: CreditDebitCodeModified1;
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    status: EntryStatus1Choice;
    bank_transaction_code: schemas_BankTransactionCodeStructure4;
    entry_details?: schemas_EntryDetails10[];
    [key: string]: unknown;
}

export type Max500Text = string & string;

export type FixedTrueModified1 = true;

export type CreditDebitCodeModified1 = "DBIT";

export interface schemas_BankTransactionCodeStructure4 {
    domain?: schemas_BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export interface schemas_BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: schemas_ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type schemas_ExternalBankTransactionSubFamily1CodeModified1 = "PRDD";

export interface schemas_EntryDetails10 {
    transaction_details?: schemas_EntryTransaction11[];
    [key: string]: unknown;
}

export interface schemas_EntryTransaction11 {
    references?: schemas_TransactionReferences6;
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    credit_debit_indicator?: CreditDebitCodeModified1;
    bank_transaction_code?: schemas_BankTransactionCodeStructure4;
    related_parties?: schemas_TransactionParties9;
    related_agents?: schemas_TransactionAgents5;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface schemas_TransactionReferences6 {
    mandate_identification?: Max35Text;
    [key: string]: unknown;
}

export interface schemas_TransactionParties9 {
    debtor_account?: CashAccount40;
    [key: string]: unknown;
}

export interface schemas_TransactionAgents5 {
    debtor_agent?: schemas_BranchAndFinancialInstitutionIdentification6Modified2;
    [key: string]: unknown;
}

export interface schemas_BranchAndFinancialInstitutionIdentification6Modified2 {
    financial_institution_identification: FinancialInstitutionIdentification18Modified1;
    [key: string]: unknown;
}

export interface FinancialInstitutionIdentification18Modified1 {
    name?: Max140Text;
    [key: string]: unknown;
}

export interface PostDirectdebitwebhooksV100Ddicindemnityclaimadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export interface CollectionAdvicesReportBody {
    document: collection_advices_components_schemas_Document;
    [key: string]: unknown;
}

export interface collection_advices_components_schemas_Document {
    bank_to_customer_debit_credit_notification: components_schemas_BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface components_schemas_BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: components_schemas_AccountNotification19[];
    [key: string]: unknown;
}

export interface components_schemas_AccountNotification19 {
    identification: Max35Text;
    creation_date_time?: schemas_ISODateTime;
    account: CashAccount41;
    entry?: components_schemas_ReportEntry11[];
    [key: string]: unknown;
}

export interface components_schemas_ReportEntry11 {
    reversal_indicator?: FixedFalseModified1;
    credit_debit_indicator?: schemas_CreditDebitCode;
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    status: EntryStatus1Choice;
    bank_transaction_code: components_schemas_BankTransactionCodeStructure4;
    entry_details?: components_schemas_EntryDetails10[];
    [key: string]: unknown;
}

export type schemas_CreditDebitCode = "CRDT";

export interface components_schemas_BankTransactionCodeStructure4 {
    domain?: components_schemas_BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface components_schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: components_schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export interface components_schemas_BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: components_schemas_ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type components_schemas_ExternalBankTransactionSubFamily1CodeModified1 = "UPDD" | "PMDD";

export interface components_schemas_EntryDetails10 {
    transaction_details?: components_schemas_EntryTransaction11[];
    [key: string]: unknown;
}

export interface components_schemas_EntryTransaction11 {
    references?: TransactionReferences6;
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    credit_debit_indicator?: schemas_CreditDebitCode;
    bank_transaction_code?: components_schemas_BankTransactionCodeStructure4;
    related_parties?: TransactionParties9;
    related_agents?: components_schemas_TransactionAgents5;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface components_schemas_TransactionAgents5 {
    debtor_agent?: components_schemas_BranchAndFinancialInstitutionIdentification6Modified2;
    creditor_agent?: BranchAndFinancialInstitutionIdentification6Modified1;
    [key: string]: unknown;
}

export interface components_schemas_BranchAndFinancialInstitutionIdentification6Modified2 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18Modified1;
    branch_identification?: schemas_BranchData3;
    [key: string]: unknown;
}

export interface schemas_FinancialInstitutionIdentification18Modified1 {
    name?: Max140TextAndMin0;
    clearing_system_member_identification?: ClearingSystemMemberIdentification2Modified;
    [key: string]: unknown;
}

export type Max140TextAndMin0 = string & string;

export interface ClearingSystemMemberIdentification2Modified {
    member_identification: Max35TextAndMin0;
    [key: string]: unknown;
}

export type Max35TextAndMin0 = string & string;

export interface schemas_BranchData3 {
    name?: Max140TextAndMin0;
    [key: string]: unknown;
}

export interface PostDirectdebitwebhooksV100Collectionadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export interface CreateDirectCredit {
    Data: {
        /**
         *
         * The DirectCreditInstruction object allows users to submit a direct credit to be created.
         */
        DirectCreditInstruction: DirectCreditInstruction;
        [key: string]: unknown;
    };
    Meta?: Meta1;
}

export interface DirectCreditInstruction {
    Creditor: {
        Name: string;
        [key: string]: unknown;
    };
    CreditorAccount: CreditorAccount;
    CreditAmount: CreditorAmount;
    MandateIdentification?: string;
}

export interface CreditorAccount {
    SchemeName: "SortCodeAccountNumber";
    Identification: string;
    Name: string;
}

export interface CreditorAmount {
    /**
     * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     */
    Amount: string;
    Currency: "GBP";
}

export type Meta1 = any;

export type Response200DirectCreditInstructionRead = CreateDirectCredit;

export interface PostDirectcreditV100Instructions {
    headers?: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": IdempotencyKey;
    };
}

export interface AwacsWrongAccountForCreditsReportBody {
    document: awacs_components_schemas_Document;
    [key: string]: unknown;
}

export interface awacs_components_schemas_Document {
    identification_modification_advice: IdentificationModificationAdviceV03;
    [key: string]: unknown;
}

export interface IdentificationModificationAdviceV03 {
    assignment: IdentificationAssignment3;
    original_transaction_reference?: OriginalTransactionReference30;
    modification: IdentificationModification4[];
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface IdentificationAssignment3 {
    message_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    assigner: Party40Choice;
    assignee: Party40Choice;
    [key: string]: unknown;
}

export interface OriginalTransactionReference30 {
    original_transaction?: PaymentIdentification5[];
    [key: string]: unknown;
}

export interface PaymentIdentification5 {
    instruction_identification?: Max35Text;
    end_to_end_identification: Max35Text;
    [key: string]: unknown;
}

export interface IdentificationModification4 {
    identification: Max35Text;
    original_party_and_account_identification?: IdentificationInformation4;
    updated_party_and_account_identification: IdentificationInformation4;
    additional_information?: Max140Text;
    [key: string]: unknown;
}

export interface IdentificationInformation4 {
    party?: PartyIdentification135Modified1;
    account?: schemas_CashAccount40;
    agent?: BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface schemas_CashAccount40 {
    identification?: AccountIdentification4Choice;
    [key: string]: unknown;
}

export interface PostDirectcreditwebhooksV100Awacswrongaccountforcreditsadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export interface ArucsReportBody {
    document: arucs_components_schemas_Document;
    [key: string]: unknown;
}

export interface arucs_components_schemas_Document {
    bank_to_customer_debit_credit_notification: arucs_components_schemas_BankToCustomerDebitCreditNotificationV09;
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankToCustomerDebitCreditNotificationV09 {
    group_header: GroupHeader81;
    notification: arucs_components_schemas_AccountNotification19[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_AccountNotification19 {
    identification: Max35Text;
    account: CashAccount41;
    creation_date_time?: schemas_ISODateTime;
    entry?: arucs_components_schemas_ReportEntry11[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_ReportEntry11 {
    amount: ActiveOrHistoricCurrencyAndAmountModified1;
    bank_transaction_code: arucs_components_schemas_BankTransactionCodeStructure4;
    credit_debit_indicator: schemas_CreditDebitCode;
    status: EntryStatus1Choice;
    entry_details?: arucs_components_schemas_EntryDetails10[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankTransactionCodeStructure4 {
    domain?: arucs_components_schemas_BankTransactionCodeStructure5;
    proprietary?: ProprietaryBankTransactionCodeStructure1;
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1CodeModified1;
    family: arucs_components_schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export interface arucs_components_schemas_BankTransactionCodeStructure6 {
    code: schemas_ExternalBankTransactionFamily1CodeModified1;
    sub_family_code: arucs_components_schemas_ExternalBankTransactionSubFamily1CodeModified1;
    [key: string]: unknown;
}

export type schemas_ExternalBankTransactionFamily1CodeModified1 = "ICDT";

export type arucs_components_schemas_ExternalBankTransactionSubFamily1CodeModified1 = "RRTN";

export interface arucs_components_schemas_EntryDetails10 {
    transaction_details?: arucs_components_schemas_EntryTransaction11[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_EntryTransaction11 {
    amount?: ActiveOrHistoricCurrencyAndAmountModified1;
    related_agents?: arucs_components_schemas_TransactionAgents5;
    related_parties?: components_schemas_TransactionParties9;
    credit_debit_indicator?: schemas_CreditDebitCode;
    bank_transaction_code?: arucs_components_schemas_BankTransactionCodeStructure4;
    references?: components_schemas_TransactionReferences6;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface arucs_components_schemas_TransactionAgents5 {
    creditor_agent?: schemas_BranchAndFinancialInstitutionIdentification6;
    debtor_agent?: schemas_BranchAndFinancialInstitutionIdentification6;
    [key: string]: unknown;
}

export interface schemas_BranchAndFinancialInstitutionIdentification6 {
    financial_institution_identification: schemas_FinancialInstitutionIdentification18;
    branch_identification?: BranchData3Nullable;
    [key: string]: unknown;
}

export type BranchData3Nullable = {
    name?: Max140Text;
    [key: string]: unknown;
} | undefined;

export interface components_schemas_TransactionParties9 {
    creditor_account?: CashAccount40;
    creditor?: Party40ChoiceModified1;
    debtor_account?: CashAccount40;
    debtor?: Party40Choice;
    [key: string]: unknown;
}

export interface Party40ChoiceModified1 {
    party: PartyIdentification135Modified1;
    [key: string]: unknown;
}

export interface components_schemas_TransactionReferences6 {
    instruction_identification?: Max35Text;
    [key: string]: unknown;
}

export interface PostDirectcreditwebhooksV100Arucsunappliedcreditsadvices {
    headers?: {
        "x-client-signature": string;
    };
}

export type UUID1 = string;

export interface CreatePaymentSession {
    Data: {
        Initiation: OBCreatePaymentSession;
        [key: string]: unknown;
    };
}

export interface OBCreatePaymentSession {
    LocalInstrument: LocalInstrument;
    InstructedAmount?: {
        Currency?: Currency;
        Amount?: string;
        [key: string]: unknown;
    };
    Metadata: {
        CustomerAddressCountry?: string;
        CustomerAddressPostCode?: string;
        CustomerAddressCity?: string;
        CustomerAddressCounty?: string;
        CustomerAddressLine2?: string;
        CustomerAddressLine1?: string;
        CustomerEmail?: string;
        [key: string]: any | undefined;
    };
}

export type LocalInstrument = "UK.POL.All" | "UK.POL.Cards";

export type Currency = "GBP";

export interface PostPaymentsV100Sessions {
    headers?: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": UUID1;
    };
}

export interface PaymentApprovedEventBody {
    document: payment_approved_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_approved_components_schemas_Document {
    acceptor_authorisation_response: AcceptorAuthorisationResponseV10;
    [key: string]: unknown;
}

export interface AcceptorAuthorisationResponseV10 {
    header: Header59;
    authorisation_response: AcceptorAuthorisationResponse10;
    [key: string]: unknown;
}

export interface Header59 {
    message_function: MessageFunction42Code;
    protocol_version: Max6Text;
    exchange_identification: Max35Text;
    creation_date_time: schemas_ISODateTime;
    initiating_party: GenericIdentification176;
    [key: string]: unknown;
}

export type MessageFunction42Code = "AUTQ" | "AUTP" | "CCAV" | "CCAK" | "CCAQ" | "CCAP" | "CMPV" | "CMPK" | "DCAV" | "DCRR" | "DCCQ" | "DCCP" | "DGNP" | "DGNQ" | "FAUQ" | "FAUP" | "FCMV" | "FCMK" | "FRVA" | "FRVR" | "RCLQ" | "RCLP" | "RVRA" | "RVRR" | "CDDQ" | "CDDK" | "CDDR" | "CDDP" | "TRNR" | "TRNA" | "NFRQ" | "NFRP" | "TRPQ" | "TRPP";

export type Max6Text = string & string;

export interface GenericIdentification176 {
    identification: InitiatingPartyIdentification;
    [key: string]: unknown;
}

export type InitiatingPartyIdentification = "CHECKOUT";

export interface AcceptorAuthorisationResponse10 {
    environment: CardPaymentEnvironment77;
    transaction: CardPaymentTransaction111;
    transaction_response: CardPaymentTransaction109;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface CardPaymentEnvironment77 {
    card?: PaymentCard31;
    cardholder?: Cardholder17;
    [key: string]: unknown;
}

export interface PaymentCard31 {
    issuer_bin?: Max15NumericText;
    card_country_code?: Max3Text;
    card_brand?: Max35TextNullable;
    card_product_type?: CardProductType1Code;
    [key: string]: unknown;
}

export type Max15NumericText = string | undefined;

export type Max3Text = string | undefined;

export type CardProductType1Code = "COMM" | "CONS" | any;

export type Cardholder17 = {
    identification?: PersonIdentification15;
    [key: string]: unknown;
} | undefined;

export type PersonIdentification15 = {
    email_address?: string | undefined;
    other?: GenericIdentification4[] | undefined;
    [key: string]: unknown;
} | undefined;

export interface GenericIdentification4 {
    identification: Max35Text;
    [key: string]: unknown;
}

export interface CardPaymentTransaction111 {
    transaction_identification: TransactionIdentifier1;
    transaction_details: CardPaymentTransactionDetails49;
    [key: string]: unknown;
}

export interface TransactionIdentifier1 {
    transaction_date_time: schemas_ISODateTime;
    transaction_reference: Max35TextNullable;
    [key: string]: unknown;
}

export interface CardPaymentTransactionDetails49 {
    currency?: ActiveCurrencyCode;
    total_amount: ImpliedCurrencyAndAmount;
    authorised_amount?: DecimalNumberAsString;
    account_type?: CardAccountType3Code;
    [key: string]: unknown;
}

export type ActiveCurrencyCode = string | undefined;

export type ImpliedCurrencyAndAmount = DecimalNumberAsString & number;

export type DecimalNumberAsString = string;

export type CardAccountType3Code = "CTDP" | "CHCK" | "CRDT" | "CURR" | "CDBT" | "DFLT" | "EPRS" | "HEQL" | "ISTL" | "INVS" | "LCDT" | "MBNW" | "MNMK" | "MNMC" | "MTGL" | "RTRM" | "RVLV" | "SVNG" | "STBD" | "UVRL" | "PRPD" | "FLTC" | any;

export interface CardPaymentTransaction109 {
    authorisation_result: AuthorisationResult14;
    [key: string]: unknown;
}

export interface AuthorisationResult14 {
    response_to_authorisation: ResponseType10;
    authorisation_code?: Min5Max6Text;
    [key: string]: unknown;
}

export interface ResponseType10 {
    response: Response9Code;
    [key: string]: unknown;
}

export type Response9Code = "APPR" | "DECL" | "PART" | "SUSP" | "TECH";

export type Min5Max6Text = string & string;

export interface PostWebhookV100Approved {
    headers?: {
        "x-client-signature": string;
    };
}

export interface PaymentVoidedEventBody {
    document: payment_voided_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_voided_components_schemas_Document {
    acceptor_cancellation_response: AcceptorCancellationResponseV09;
    [key: string]: unknown;
}

export interface AcceptorCancellationResponseV09 {
    header: Header59;
    cancellation_response: AcceptorCancellationResponse9;
    [key: string]: unknown;
}

export interface AcceptorCancellationResponse9 {
    environment: schemas_CardPaymentEnvironment77;
    transaction: CardPaymentTransaction97;
    transaction_response: CardPaymentTransaction105;
    [key: string]: unknown;
}

export type schemas_CardPaymentEnvironment77 = any;

export interface CardPaymentTransaction97 {
    transaction_identification: TransactionIdentifier1;
    transaction_details: CardPaymentTransactionDetails34;
    [key: string]: unknown;
}

export interface CardPaymentTransactionDetails34 {
    currency?: ActiveCurrencyCode;
    total_amount: ImpliedCurrencyAndAmount;
    [key: string]: unknown;
}

export interface CardPaymentTransaction105 {
    authorisation_result: AuthorisationResult16;
    [key: string]: unknown;
}

export interface AuthorisationResult16 {
    response_to_authorisation: ResponseType10;
    AuthstnCd?: Min6Max8Text;
    [key: string]: unknown;
}

export type Min6Max8Text = string & string;

export interface PostWebhookV100Voided {
    headers?: {
        "x-client-signature": string;
    };
}

export interface PaymentCapturedEventBody {
    document: payment_captured_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_captured_components_schemas_Document {
    acceptor_completion_advice_response: AcceptorCompletionAdviceResponseV09;
    [key: string]: unknown;
}

export interface AcceptorCompletionAdviceResponseV09 {
    header: Header59;
    completion_advice_response: AcceptorCompletionAdviceResponse9;
    [key: string]: unknown;
}

export interface AcceptorCompletionAdviceResponse9 {
    environment: schemas_CardPaymentEnvironment77;
    transaction: CardPaymentTransactionAdviceResponse8;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface CardPaymentTransactionAdviceResponse8 {
    transaction_identification: TransactionIdentifier1;
    response: Response9Code;
    [key: string]: unknown;
}

export interface PostWebhookV100Captured {
    headers?: {
        "x-client-signature": string;
    };
}

export interface PaymentDeclinedEventBody {
    document: payment_declined_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_declined_components_schemas_Document {
    acceptor_cancellation_response: schemas_AcceptorCancellationResponseV09;
    [key: string]: unknown;
}

export interface schemas_AcceptorCancellationResponseV09 {
    header: Header59;
    cancellation_response: schemas_AcceptorCancellationResponse9;
    [key: string]: unknown;
}

export interface schemas_AcceptorCancellationResponse9 {
    environment: components_schemas_CardPaymentEnvironment77;
    transaction: schemas_CardPaymentTransaction111;
    transaction_response: schemas_CardPaymentTransaction109;
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface components_schemas_CardPaymentEnvironment77 {
    card?: schemas_PaymentCard31;
    cardholder?: schemas_Cardholder17;
    [key: string]: unknown;
}

export type schemas_PaymentCard31 = {
    issuer_bin?: Max15NumericText;
    card_country_code?: Max3Text;
    card_brand?: Max35TextNullable;
    card_product_type?: CardProductType1Code;
    [key: string]: unknown;
} | undefined;

export type schemas_Cardholder17 = {
    identification?: schemas_PersonIdentification15;
    [key: string]: unknown;
} | undefined;

export interface schemas_PersonIdentification15 {
    email_address?: string | undefined;
    other?: GenericIdentification4[] | undefined;
    [key: string]: unknown;
}

export interface schemas_CardPaymentTransaction111 {
    transaction_identification: TransactionIdentifier1;
    initiator_transaction_identification?: Max35Text;
    transaction_details: schemas_CardPaymentTransactionDetails49;
    [key: string]: unknown;
}

export interface schemas_CardPaymentTransactionDetails49 {
    currency?: ActiveCurrencyCode;
    total_amount: ImpliedCurrencyAndAmount;
    [key: string]: unknown;
}

export interface schemas_CardPaymentTransaction109 {
    authorisation_result: schemas_AuthorisationResult14;
    [key: string]: unknown;
}

export interface schemas_AuthorisationResult14 {
    response_to_authorisation: ResponseType10;
    authorisation_code?: Max6TextNullable;
    [key: string]: unknown;
}

export type Max6TextNullable = string | undefined;

export interface PostWebhookV100Declined {
    headers?: {
        "x-client-signature": string;
    };
}

export interface PaymentRefundDeclinedEventBody {
    document: payment_refund_declined_components_schemas_Document;
    [key: string]: unknown;
}

export interface payment_refund_declined_components_schemas_Document {
    bank_to_customer_debit_credit_notification: BankToCustomerDebitCreditNotificationV10;
    [key: string]: unknown;
}

export interface BankToCustomerDebitCreditNotificationV10 {
    group_header: GroupHeader81;
    notification: AccountNotification20[];
    supplementary_data?: SupplementaryData1[];
    [key: string]: unknown;
}

export interface AccountNotification20 {
    identification: Max35Text;
    account: schemas_CashAccount41;
    entry?: ReportEntry12[];
    [key: string]: unknown;
}

export interface schemas_CashAccount41 {
    identification?: schemas_AccountIdentification4Choice;
    [key: string]: unknown;
}

export interface schemas_AccountIdentification4Choice {
    IBAN: IBAN2007Identifier;
    other: schemas_GenericAccountIdentification1;
    [key: string]: unknown;
}

export type IBAN2007Identifier = string & string;

export interface schemas_GenericAccountIdentification1 {
    identification: Max34Text;
    schemeName?: AccountSchemeName1Choice;
    issuer?: Max35Text;
    [key: string]: unknown;
}

export interface AccountSchemeName1Choice {
    code: ExternalAccountIdentification1Code;
    proprietary: Max35Text;
    [key: string]: unknown;
}

export type ExternalAccountIdentification1Code = string & string;

export interface ReportEntry12 {
    amount: ActiveOrHistoricCurrencyAndAmount;
    credit_debit_indicator: components_schemas_CreditDebitCode;
    reversal_indicator?: TrueFalseIndicator;
    status: EntryStatus1Choice;
    bank_transaction_code: payment_refund_declined_components_schemas_BankTransactionCodeStructure4;
    [key: string]: unknown;
}

export interface ActiveOrHistoricCurrencyAndAmount {
    currency: ActiveOrHistoricCurrencyCode;
    value: ActiveOrHistoricCurrencyAndAmount_SimpleType;
    [key: string]: unknown;
}

export type ActiveOrHistoricCurrencyCode = string & string;

export type ActiveOrHistoricCurrencyAndAmount_SimpleType = string;

export type components_schemas_CreditDebitCode = "CRDT" | "DBIT";

export interface payment_refund_declined_components_schemas_BankTransactionCodeStructure4 {
    domain?: payment_refund_declined_components_schemas_BankTransactionCodeStructure5;
    [key: string]: unknown;
}

export interface payment_refund_declined_components_schemas_BankTransactionCodeStructure5 {
    code: ExternalBankTransactionDomain1Code;
    family: payment_refund_declined_components_schemas_BankTransactionCodeStructure6;
    [key: string]: unknown;
}

export type ExternalBankTransactionDomain1Code = string & string;

export interface payment_refund_declined_components_schemas_BankTransactionCodeStructure6 {
    code: ExternalBankTransactionFamily1Code;
    sub_family_code: ExternalBankTransactionSubFamily1Code;
    [key: string]: unknown;
}

export type ExternalBankTransactionFamily1Code = string & string;

export type ExternalBankTransactionSubFamily1Code = string & string;

export interface PostWebhookV100Refunddeclined {
    headers?: {
        "x-client-signature": string;
    };
}

export interface CreatePaymentRefund {
    Data: {
        Amount?: string;
        [key: string]: unknown;
    };
}

export interface SuccessResponseBody {
    Data: {
        RefundIdentifier: string;
        Amount?: string;
        [key: string]: unknown;
    };
}

export interface PostPaymentsV100IdRefunds {
    headers?: {
        /**
         * A GUID representing the operation (if the key has been used previously
         * the original response is returned).
         */
        "x-idempotency-key": string;
    };
}

export interface OBTransaction6 {
    /**
     * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     */
    AccountId: AccountId;
    /**
     * Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
     */
    TransactionId?: TransactionId;
    /**
     * Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.
     */
    TransactionReference?: TransactionReference;
    /**
     * Indicates whether the transaction is a credit or a debit entry.
     */
    CreditDebitIndicator: OBCreditDebitCode1;
    /**
     * Status of a transaction entry on the books of the account servicer.
     */
    Status: OBEntryStatus1Code;
    /**
     * Date and time when a transaction entry is posted to an account on the account servicer's books.
     * Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    BookingDateTime: BookingDateTime;
    /**
     * Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
     * Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
     * For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    ValueDateTime?: ValueDateTime;
    /**
     * Amount of money in the cash transaction entry.
     */
    Amount: OBActiveOrHistoricCurrencyAndAmount9;
    /**
     * Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
     */
    Balance?: OBTransactionCashBalance;
    /**
     * Financial institution servicing an account for the creditor.
     */
    CreditorAgent?: OBBranchAndFinancialInstitutionIdentification61;
    /**
     * Unambiguous identification of the account of the creditor, in the case of a debit transaction.
     */
    CreditorAccount?: OBCashAccount60;
    /**
     * Financial institution servicing an account for the debtor.
     */
    DebtorAgent?: OBBranchAndFinancialInstitutionIdentification62;
    /**
     * Unambiguous identification of the account of the debtor, in the case of a crebit transaction.
     */
    DebtorAccount?: OBCashAccount61;
    /**
     * Construct a type with a set of properties K of type T
     */
    SupplementaryData?: OBSupplementaryData1;
}

export type AccountId = string;

export type TransactionId = string;

export type TransactionReference = string;

export type OBCreditDebitCode1 = "Credit" | "Debit";

export type OBEntryStatus1Code = "Booked" | "Pending" | "Rejected";

export type BookingDateTime = string;

export type ValueDateTime = string;

export interface OBActiveOrHistoricCurrencyAndAmount9 {
    /**
     * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     */
    Amount: OBActiveCurrencyAndAmountSimpleType;
    /**
     * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
     */
    Currency: ActiveOrHistoricCurrencyCode1;
}

export type OBActiveCurrencyAndAmountSimpleType = string;

export type ActiveOrHistoricCurrencyCode1 = string;

export interface OBTransactionCashBalance {
    /**
     * Indicates whether the balance is a credit or a debit balance.
     * Usage: A zero balance is considered to be a credit balance.
     */
    CreditDebitIndicator: OBCreditDebitCode2;
    /**
     * Balance type, in a coded form.
     */
    Type: OBBalanceType1Code;
    /**
     * Amount of money of the cash balance after a transaction entry is applied to the account..
     */
    Amount: {
        /**
         * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
         */
        Currency: ActiveOrHistoricCurrencyCode1;
        /**
         * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
         */
        Amount: OBActiveCurrencyAndAmountSimpleType;
        [key: string]: unknown;
    };
}

export type OBCreditDebitCode2 = "Credit" | "Debit";

export type OBBalanceType1Code = "ClosingAvailable" | "ClosingBooked" | "ClosingCleared" | "Expected" | "ForwardAvailable" | "Information" | "InterimAvailable" | "InterimBooked" | "InterimCleared" | "OpeningAvailable" | "OpeningBooked" | "OpeningCleared" | "PreviouslyClosedBooked";

export interface OBBranchAndFinancialInstitutionIdentification61 {
    /**
     * Unique and unambiguous identification of a financial institution or a branch of a financial institution.
     */
    Identification?: Identification2;
    /**
     * Name by which an agent is known and which is usually used to identify that agent.
     */
    Name?: Name1;
}

export type Identification2 = string;

export type Name1 = string;

export interface OBCashAccount60 {
    /**
     * Name of the identification scheme, in a coded form as published in an external list.
     */
    SchemeName?: OBExternalAccountIdentification4Code;
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     */
    Identification?: Identification0;
    /**
     * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
     * Note, the account name is not the product name or the nickname of the account.
     */
    Name?: Name0;
    /**
     * This is secondary identification of the account, as assigned by the account servicing institution.
     * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
     */
    SecondaryIdentification?: SecondaryIdentification;
}

export type OBExternalAccountIdentification4Code = "UK.OBIE.BBAN" | "UK.OBIE.IBAN" | "UK.OBIE.PAN" | "UK.OBIE.Paym" | "UK.OBIE.SortCodeAccountNumber";

export type Identification0 = string;

export type Name0 = string;

export type SecondaryIdentification = string;

export interface OBBranchAndFinancialInstitutionIdentification62 {
    /**
     * Unique and unambiguous identification of a financial institution or a branch of a financial institution.
     */
    Identification?: Identification2;
    /**
     * Name by which an agent is known and which is usually used to identify that agent.
     */
    Name?: Name1;
}

export interface OBCashAccount61 {
    /**
     * Name of the identification scheme, in a coded form as published in an external list.
     */
    SchemeName?: OBExternalAccountIdentification4Code;
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     */
    Identification?: Identification0;
    /**
     * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
     * Note, the account name is not the product name or the nickname of the account.
     */
    Name?: Name0;
    /**
     * This is secondary identification of the account, as assigned by the account servicing institution.
     * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
     */
    SecondaryIdentification?: SecondaryIdentification;
}

export type OBSupplementaryData1 = Record_string_any_;

export interface Record_string_any_ {
    [key: string]: unknown;
}

export interface PostInboundtransactionsV100TransactionsIdCommit {
    headers?: {
        "x-idempotency-key": string;
    };
}

export type PageParam = number;

export type FromBookingDateTimeParam = string;

export type ToBookingDateTimeParam = string;

export interface OBReadTransaction6 {
    Data: OBReadDataTransaction6;
    /**
     * Links relevant to the payload
     */
    Links: Links;
    /**
     * Meta Data relevant to the payload
     */
    Meta?: Meta2;
}

export interface OBReadDataTransaction6 {
    Transaction?: OBTransaction6[];
}

export interface Links {
    Self: string;
    First?: string;
    Prev?: string;
    Next?: string;
    Last?: string;
}

export interface Meta2 {
    TotalPages?: number;
    /**
     * All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    FirstAvailableDateTime?: ISODateTime;
    /**
     * All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    LastAvailableDateTime?: ISODateTime;
}

export type ISODateTime = string;

export interface GetInboundtransactionsV100AccountsAccountIdTransactions {
    params?: {
        page?: PageParam;
        fromBookingDateTime?: FromBookingDateTimeParam;
        toBookingDateTime?: ToBookingDateTimeParam;
    };
}

export interface GetInboundtransactionsV100Transactions {
    params?: {
        page?: PageParam;
        fromBookingDateTime?: FromBookingDateTimeParam;
        toBookingDateTime?: ToBookingDateTimeParam;
    };
}

export interface UpdateTransactionBody {
    Data: {
        Brand: BillingSystem;
        CustomerAccountNumber: string;
        [key: string]: unknown;
    };
}

export type BillingSystem = "Gentrack" | "Orion";

export interface AddacsReport {
    Data: AddacsData;
    UploadToSFTP: boolean;
}

export interface AddacsData {
    AddacsRecordCount?: number;
    PayerName?: string;
    AccountNumber?: string;
    SortCode?: string;
    ReasonCode?: string;
    NewAccountNumber?: string;
    NewSortCode?: string;
    DdiReference?: string;
    Sun?: string;
    InvalidBody?: boolean;
}

export interface DirectDebitReportResponse {
    Data: DirectDebitReportResponseData;
    UploadToSFTP: boolean;
}

export interface DirectDebitReportResponseData {
    ReportId: string;
    ReportType: DirectDebitReportType;
    ReportContent: string;
    ReportName: string;
}

export type DirectDebitReportType = "AUDDIS" | "ADDACS" | "ARUDD" | "DDIC" | "AWACS" | "ARUCS";

export interface ArucsReport {
    Data: ArucsData;
    UploadToSFTP: boolean;
}

export interface ArucsData {
    ArucsRecordCount?: number;
    Amount?: number;
    Currency?: string;
    AccountNumber?: string;
    DdiReference?: string;
    AccountName?: string;
    SortCode?: string;
    BankName?: string;
    BranchName?: string;
    ReturnCode?: string;
    ReturnDescription?: string;
    Sun?: string;
}

export interface AruddReport {
    Data: AruddData;
    UploadToSFTP: boolean;
}

export interface AruddData {
    AruddRecordCount?: number;
    Amount?: number;
    Currency?: string;
    AccountNumber?: string;
    DdiReference?: string;
    AccountName?: string;
    SortCode?: string;
    AccountType?: string;
    BankName?: string;
    BranchName?: string;
    returnCode?: string;
    returnDescription?: string;
    Sun?: string;
    InvalidBody?: boolean;
}

export interface AuddisReport {
    Data: AuddisData;
    UploadToSFTP: boolean;
}

export interface AuddisData {
    AuddisRecordCount?: number;
    PayerName?: string;
    PayerAccountNumber?: string;
    PayerSortCode?: string;
    ReasonCode?: string;
    NewSortCode?: string;
    NewAccountNumber?: string;
    Sun?: string;
    DdiReference?: string;
    InvalidBody?: boolean;
}

export interface AwacsReport {
    Data: AwacsData;
    UploadToSFTP: boolean;
}

export interface AwacsData {
    AwacsRecordCount?: number;
    Sun?: string;
    ReasonCode?: string;
    PayerName?: string;
    PayerAccountNumber?: string;
    PayerSortCode?: string;
    PayerNewSortCode?: string;
    PayerNewAccountNumber?: string;
    TransactionCode?: string;
    OriginalSortCode?: string;
    OriginalAccountNumber?: string;
    DdiReference?: string;
}

export interface DDICReport {
    Data: DDICData;
    UploadToSFTP: boolean;
}

export interface DDICData {
    DDICRecordCount?: number;
    PayingBankReference?: string;
    SUReference?: string;
    ReasonCode?: string;
    PayerSortCode?: string;
    PayerAccount?: string;
    PayerName?: string;
    Sun?: string;
    InvalidBody?: boolean;
}

export interface AxiosOapiInstance {
    /**
     * Request a Bearer token
     */
    "POST /authentication/v1.0.0/oauth/token": (data: CreateAuthorizationToken, config?: AxiosRequestConfig) => Promise<AxiosResponse<Response200AuthenticationTokenRead>>;
    /**
     * Retrieve information on a UK bank account
     *
     * Required OAuth Audience: <code>BankAccounts</code>
     */
    "POST /bank-account/uk/v1.0.0/information": (data: CreateUKBankAccountInformation, config?: AxiosRequestConfig) => Promise<AxiosResponse<Response200UKBankAccountInformation>>;
    /**
     * Create Direct Debit Collections
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "POST /direct-debit/v1.0.0/instructions/{MandateIdentification}/collections": (MandateIdentification: string, data: CreateDirectDebitCollection, config?: AxiosRequestConfig & PostDirectdebitV100InstructionsMandateIdentificationCollections) => Promise<AxiosResponse<Response200DirectDebitCollectionRead>>;
    /**
     * Create Direct Debit Instruction
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "POST /direct-debit/v1.0.0/instructions": (data: DirectDebitInstruction, config?: AxiosRequestConfig & PostDirectdebitV100Instructions) => Promise<AxiosResponse<Response200DirectDebitInstructionRead>>;
    /**
     * Update Direct Debit Instruction
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "PUT /direct-debit/v1.0.0/instructions/{MandateIdentification}": (MandateIdentification: string, data: OBReadUpdateDirectDebit, config?: AxiosRequestConfig) => Promise<AxiosResponse<Response200UpdateDirectDebitInstructionRead>>;
    /**
     * Update Direct Debit Instruction Status
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "PUT /direct-debit/v1.0.0/instructions/{MandateIdentification}/status": (MandateIdentification: string, data: UpdateDirectDebitInstructionStatus, config?: AxiosRequestConfig) => Promise<AxiosResponse<Response200DirectDebitInstructionUpdateStatus>>;
    /**
     * Upload a Direct Debit collection file
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     *
     * Example file content:
     *
     * <code>{
     * "document": {
     *  "fi_to_fi_customer_direct_debit": {
     *    "group_header": {
     *      "message_identification": "cc60bfc5-7876-4fba-ae24-2d9c3e32e0b0",
     *      "creation_date_time": "2021-07-23T10:46:56.697Z",
     *      "number_of_transactions": 3
     *    },
     *    "direct_debit_transaction_information": [
     *      {
     *        "payment_identification": {
     *          "end_to_end_identification": "5231998b-d704-40e1-aea4-3ac952aa757b"
     *        },
     *        "interbank_settlement_amount": {
     *          "active_currency": "GBP",
     *          "currency_amount": "10.00"
     *        },
     *        "interbank_settlement_date": "2021-07-23",
     *        "direct_debit_transaction": {
     *          "mandate_related_information": {
     *            "mandate_id": "EXE-123456"
     *          }
     *        }
     *      }
     *    ]
     *  }
     * }
     * }</code>
     */
    "POST /bulk-collections/v1.0.0/collection-files": (data: unknown, config?: AxiosRequestConfig & PostBulkcollectionsV100Collectionfiles) => Promise<AxiosResponse<Response200BulkCollectionsFileRead>>;
    /**
     * Get the status of a Direct Debit collection file
     *
     * Required OAuth Audience: <code>DirectDebits</code>
     */
    "GET /bulk-collections/v1.0.0/collection-files/{CollectionFileIdentification}": (CollectionFileIdentification: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<Response200BulkCollectionsFileProgressRead>>;
    /**
     * AUDDIS Bank Returned Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/auddis-bank-returned-advices": (data: AuddisBankReturnedReportBody, config?: AxiosRequestConfig & PostDirectdebitwebhooksV100Auddisbankreturnedadvices) => Promise<AxiosResponse>;
    /**
     * ARUDD Unpaid Direct Debit Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/arudd-unpaid-direct-debit-advices": (data: AruddReportBody, config?: AxiosRequestConfig & PostDirectdebitwebhooksV100Aruddunpaiddirectdebitadvices) => Promise<AxiosResponse>;
    /**
     * ADDACS Amendments Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/addacs-amendments-advices": (data: AddacsAmendmentsReportBody, config?: AxiosRequestConfig & PostDirectdebitwebhooksV100Addacsamendmentsadvices) => Promise<AxiosResponse>;
    /**
     * ADDACS Cancellations Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/addacs-cancellations-advices": (data: AddacsCancellationsReportBody, config?: AxiosRequestConfig & PostDirectdebitwebhooksV100Addacscancellationsadvices) => Promise<AxiosResponse>;
    /**
     * DDIC Indemnity Claim Advice
     */
    "POST /direct-debit-webhooks/v1.0.0/ddic-indemnity-claim-advices": (data: DdicReportBody, config?: AxiosRequestConfig & PostDirectdebitwebhooksV100Ddicindemnityclaimadvices) => Promise<AxiosResponse>;
    /**
     * Collection Advices
     */
    "POST /direct-debit-webhooks/v1.0.0/collection-advices": (data: CollectionAdvicesReportBody, config?: AxiosRequestConfig & PostDirectdebitwebhooksV100Collectionadvices) => Promise<AxiosResponse>;
    /**
     * Create Direct Credit
     *
     * Required OAuth Audience: <code>DirectCredits</code>
     */
    "POST /direct-credit/v1.0.0/instructions": (data: CreateDirectCredit, config?: AxiosRequestConfig & PostDirectcreditV100Instructions) => Promise<AxiosResponse<Response200DirectCreditInstructionRead>>;
    /**
     * AWACS Wrong Account for Credits Advice
     */
    "POST /direct-credit-webhooks/v1.0.0/awacs-wrong-account-for-credits-advices": (data: AwacsWrongAccountForCreditsReportBody, config?: AxiosRequestConfig & PostDirectcreditwebhooksV100Awacswrongaccountforcreditsadvices) => Promise<AxiosResponse>;
    /**
     * ARUCS Unapplied Credits Advice
     */
    "POST /direct-credit-webhooks/v1.0.0/arucs-unapplied-credits-advices": (data: ArucsReportBody, config?: AxiosRequestConfig & PostDirectcreditwebhooksV100Arucsunappliedcreditsadvices) => Promise<AxiosResponse>;
    /**
     * Request Payment Session
     *
     * Required OAuth Audience: <code>PaymentSession</code>
     */
    "POST /payments/v1.0.0/sessions": (data: CreatePaymentSession, config?: AxiosRequestConfig & PostPaymentsV100Sessions) => Promise<AxiosResponse>;
    /**
     * Payment approved
     */
    "POST /webhook/v1.0.0/approved": (data: PaymentApprovedEventBody, config?: AxiosRequestConfig & PostWebhookV100Approved) => Promise<AxiosResponse>;
    /**
     * Payment voided
     */
    "POST /webhook/v1.0.0/voided": (data: PaymentVoidedEventBody, config?: AxiosRequestConfig & PostWebhookV100Voided) => Promise<AxiosResponse>;
    /**
     * Payment captured
     */
    "POST /webhook/v1.0.0/captured": (data: PaymentCapturedEventBody, config?: AxiosRequestConfig & PostWebhookV100Captured) => Promise<AxiosResponse>;
    /**
     * Payment declined
     */
    "POST /webhook/v1.0.0/declined": (data: PaymentDeclinedEventBody, config?: AxiosRequestConfig & PostWebhookV100Declined) => Promise<AxiosResponse>;
    /**
     * Payment refund declined
     */
    "POST /webhook/v1.0.0/refund-declined": (data: PaymentRefundDeclinedEventBody, config?: AxiosRequestConfig & PostWebhookV100Refunddeclined) => Promise<AxiosResponse>;
    /**
     * Payment Refund
     * Request Payment Refund
     *
     * Required OAuth Audience: <code>PaymentSession</code>
     */
    "POST /payments/v1.0.0/{id}/refunds": (id: string, data?: CreatePaymentRefund, config?: AxiosRequestConfig & PostPaymentsV100IdRefunds) => Promise<AxiosResponse<SuccessResponseBody>>;
    "POST /inbound-transactions/v1.0.0/transactions/{id}/commit": (id: string, data?: unknown, config?: AxiosRequestConfig & PostInboundtransactionsV100TransactionsIdCommit) => Promise<AxiosResponse<{
        /**
         * Provides further details on an entry in the report.
         */
        Data: OBTransaction6;
        [key: string]: unknown;
    }>>;
    "GET /inbound-transactions/v1.0.0/accounts/{accountId}/transactions": (accountId: string, config?: AxiosRequestConfig & GetInboundtransactionsV100AccountsAccountIdTransactions) => Promise<AxiosResponse<OBReadTransaction6>>;
    "GET /inbound-transactions/v1.0.0/transactions": (config?: AxiosRequestConfig & GetInboundtransactionsV100Transactions) => Promise<AxiosResponse<OBReadTransaction6>>;
    "PATCH /inbound-transactions/v1.0.0/transactions/{id}": (id: string, data: UpdateTransactionBody, config?: AxiosRequestConfig) => Promise<AxiosResponse<{
        /**
         * Provides further details on an entry in the report.
         */
        Data: OBTransaction6;
        [key: string]: unknown;
    }>>;
    /**
     *
     * NewAccountNumber and New only required if ReasonCode === "3" || ReasonCode === "C"
     */
    "POST /direct-debit-test-harness/v1.0.0/reports/addacs": (data: AddacsReport, config?: AxiosRequestConfig) => Promise<AxiosResponse<DirectDebitReportResponse>>;
    "POST /direct-debit-test-harness/v1.0.0/reports/arucs": (data: ArucsReport, config?: AxiosRequestConfig) => Promise<AxiosResponse<DirectDebitReportResponse>>;
    /**
     *
     * User will either need to provide both returnCode and returnDescription fields or leave both fields as ""
     */
    "POST /direct-debit-test-harness/v1.0.0/reports/arudd": (data: AruddReport, config?: AxiosRequestConfig) => Promise<AxiosResponse<DirectDebitReportResponse>>;
    /**
     * NewAccountNumber and NewSortcode only required if ReasonCode === "C"
     */
    "POST /direct-debit-test-harness/v1.0.0/reports/auddis": (data: AuddisReport, config?: AxiosRequestConfig) => Promise<AxiosResponse<DirectDebitReportResponse>>;
    "POST /direct-debit-test-harness/v1.0.0/reports/awacs": (data: AwacsReport, config?: AxiosRequestConfig) => Promise<AxiosResponse<DirectDebitReportResponse>>;
    "POST /direct-debit-test-harness/v1.0.0/reports/ddic": (data: DDICReport, config?: AxiosRequestConfig) => Promise<AxiosResponse<DirectDebitReportResponse>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test schemes.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Schemes
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Health Check
     * Health check endpoint
     */
    "GET /.well-known/health-check": config => api.get<{
        success: boolean;
    }>(\`/.well-known/health-check\`, config),
    /**
     * OpenApi
     * The open api spec for the service. OpenAPI v3.
     */
    "GET /.well-known/openapi.yaml": config => api.get<string>(\`/.well-known/openapi.yaml\`, config),
    /**
     * OpenApi Components
     * Shared schemas for the open api spec. OpenAPI v3.
     */
    "GET /.well-known/components.yaml": config => api.get<string>(\`/.well-known/components.yaml\`, config),
    /**
     * OpenApi Levelisation
     * Schemas for Levelisation endpoints. OpenAPI v3.
     */
    "GET /.well-known/levelisations.yaml": config => api.get<string>(\`/.well-known/levelisations.yaml\`, config),
    /**
     * OpenApi Read Checks
     * Schemas for Read Checks endpoints. OpenAPI v3.
     */
    "GET /.well-known/read-checks.yaml": config => api.get<string>(\`/.well-known/read-checks.yaml\`, config),
    /**
     * OpenApi HTML
     * The open api spec for the service. OpenAPI v3.
     */
    "GET /.well-known/openapi.html": config => api.get(\`/.well-known/openapi.html\`, config),
    /**
     * Create a session for the current user
     */
    "POST /v1/session": (data, config) => api.post<Session>(\`/v1/session\`, data, config),
    /**
     * Get Comm Batches.
     */
    "GET /v1/comm-batches": config => api.get<List & {
        data: CommBatchList[];
        [key: string]: unknown;
    }>(\`/v1/comm-batches\`, config),
    /**
     * Create New Comm Batch
     * Create new Comm Batch that will be processed and can be monitored responses
     *
     */
    "POST /v1/comm-batches": (data, config) => api.post<CommBatch>(\`/v1/comm-batches\`, data, config),
    /**
     * Get Comm Batch by ID
     */
    "GET /v1/comm-batches/{id}": (id, config) => api.get<CommBatch>(\`/v1/comm-batches/\${id}\`, config),
    /**
     * Do a tolerance checks for all the reads that have not been checked
     */
    "POST /v1/process/meter-reads-tolerance": (data, config) => api.post<{
        success: boolean;
    }>(\`/v1/process/meter-reads-tolerance\`, data, config),
    /**
     * Tolerance checks
     * List of Meter Reads that have failed their tolernace checks and need to be reviewed
     */
    "GET /v1/read-checks": config => api.get<List & {
        data?: MeterReadCheck[];
        [key: string]: unknown;
    }>(\`/v1/read-checks\`, config),
    /**
     * Bulk Save Tolerance Check
     * Update Multiple Tolerance check details at once
     */
    "PUT /v1/read-checks": (data, config) => api.put<ListOfIds>(\`/v1/read-checks\`, data, config),
    /**
     * Save Tolerance Check
     * Update Tolerance check details
     */
    "DELETE /v1/read-checks": config => api.delete<ListOfIds>(\`/v1/read-checks\`, config),
    /**
     * Single Tolerance check
     * Details on the meter read tolerance check
     */
    "GET /v1/read-checks/{id}": (id, config) => api.get<MeterReadCheck>(\`/v1/read-checks/\${id}\`, config),
    /**
     * Save Tolerance Check
     * Update Tolerance check details
     */
    "PUT /v1/read-checks/{id}": (id, data, config) => api.put<MeterReadCheck>(\`/v1/read-checks/\${id}\`, data, config),
    /**
     * Save Tolerance Check
     * Update Tolerance check details
     */
    "DELETE /v1/read-checks/{id}": (id, config) => api.delete<{
        success: boolean;
    }>(\`/v1/read-checks/\${id}\`, config),
    /**
     * Levelisations
     * List of Levelisation processes by quarters
     */
    "GET /v1/levelisations": config => api.get<List & {
        data?: LevelisationList[];
        [key: string]: unknown;
    }>(\`/v1/levelisations\`, config),
    /**
     * Create new Levelisation
     * Create a new Levelisation
     */
    "POST /v1/levelisations": (data, config) => api.post<Levelisation>(\`/v1/levelisations\`, data, config),
    /**
     * Quater levelisation
     * Levelisation calculation for all accounts
     */
    "GET /v1/levelisations/{id}": (id, config) => api.get<Levelisation>(\`/v1/levelisations/\${id}\`, config),
    /**
     * Save Levelisation
     * Update Levelisation
     */
    "PUT /v1/levelisations/{id}": (id, data, config) => api.put<Levelisation>(\`/v1/levelisations/\${id}\`, data, config),
    /**
     * Levelisations
     * List of Levelisation processes by quarters
     */
    "GET /v1/account-levelisations": config => api.get<List & {
        data?: AccountLevelisation[];
        [key: string]: unknown;
    }>(\`/v1/account-levelisations\`, config),
    /**
     * Bulk Save Account Levelisations
     * Update Account Levelisations at once
     */
    "PUT /v1/account-levelisations": (data, config) => api.put<ListOfIds>(\`/v1/account-levelisations\`, data, config),
    /**
     * Account levelisation tariff
     * Levelisation tariff for a single account
     */
    "GET /v1/account-levelisations/{id}": (id, config) => api.get<AccountLevelisation>(\`/v1/account-levelisations/\${id}\`, config),
    /**
     * Save Account Levelisation
     * Update Account Levelisation
     */
    "PUT /v1/account-levelisations/{id}": (id, data, config) => api.put<AccountLevelisation>(\`/v1/account-levelisations/\${id}\`, data, config),
    /**
     * Payment CSV Export
     * Cheque Payments
     */
    "GET /v1/payment-export": config => api.get(\`/v1/payment-export\`, config),
    /**
     * Accounts
     * A list of fit and seg accounts
     */
    "GET /v1/account": config => api.get<List & {
        data: AccountListItem[];
        [key: string]: unknown;
    }>(\`/v1/account\`, config),
    /**
     * Get reads for the account
     * Account reads
     */
    "GET /v1/account/{id}/reads": (id, config) => api.get<MeterRead[]>(\`/v1/account/\${id}/reads\`, config),
    /**
     * Get reads for the account
     * Account reads
     */
    "GET /v1/account/{id}": (id, config) => api.get<Account>(\`/v1/account/\${id}\`, config),
    /**
     * Get reads for the account
     * Account reads
     */
    "GET /v1/account/{id}/contracts": (id, config) => api.get<Contract[]>(\`/v1/account/\${id}/contracts\`, config),
    /**
     * Get contact by id
     * Contacts
     */
    "GET /v1/contact/{id}": (id, config) => api.get<Contact>(\`/v1/contact/\${id}\`, config),
    /**
     * Get contact by id
     * Contacts
     */
    "GET /v1/payment": config => api.get<{
        data: Payment[];
        total: number;
    }>(\`/v1/payment\`, config),
    /**
     * Get installations
     * Installations
     */
    "GET /v1/installation": config => api.get<{
        data: Installation[];
        total: number;
    }>(\`/v1/installation\`, config),
    /**
     * Get meter
     * Meter
     */
    "GET /v1/meter/{id}": (id, config) => api.get<Meter>(\`/v1/meter/\${id}\`, config),
    /**
     * Get meters
     * Meters
     */
    "GET /v1/meter": config => api.get<{
        data: Meter[];
        total: number;
    }>(\`/v1/meter\`, config),
    /**
     * Get meter reads
     * Meter reads
     */
    "GET /v1/read": config => api.get<{
        data: MeterRead[];
        total: number;
    }>(\`/v1/read\`, config),
    api: api
});

export interface Session {
    jwt: string;
    expiresAt?: string;
    user: {
        fullName?: string;
        email: string;
        avatar?: string;
        scopes?: string[];
        [key: string]: unknown;
    };
    [key: string]: unknown;
}

export interface PostV1Session {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface List {
    total: number;
    [key: string]: unknown;
}

export interface CommBatchList {
    id: number;
    type: CommBatchType;
    filename: string;
    itemsPending?: number;
    itemsDelivered?: number;
    itemsScheduled?: number;
    itemsFailed?: number;
    itemsExpired?: number;
    createdAt: string;
    updatedAt?: string;
}

export type CommBatchType = "FITMeterInspectionDue" | "Statement";

export interface GetV1Commbatches {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
    };
}

export type NewCommBatch = NewCommBatchFITMeterInspectionDue | NewCommBatchStatement;

export interface NewCommBatchFITMeterInspectionDue {
    type: "FITMeterInspectionDue";
    filename: string;
    items: {
        templateParams: {
            fitId: string;
        };
        contactAddress?: CommContactAddress;
    }[];
    [key: string]: unknown;
}

export type CommContactAddress = CommsEmailAddress | CommsPostalAddress | CommsPhoneNumber;

export interface CommsEmailAddress {
    emailAddress: string;
}

export interface CommsPostalAddress {
    postalAddress: Address;
}

export interface Address {
    contactName?: string;
    company?: string;
    line1?: string;
    line2?: string;
    line3?: string;
    town?: string;
    county?: string;
    postcode: string;
    country: string;
}

export interface CommsPhoneNumber {
    phoneNumber: string;
}

export interface NewCommBatchStatement {
    type: "Statement";
    filename: string;
    items: {
        templateParams: {
            accountNumber: string;
            payment: {
                startDate: string;
                startDateLong?: string;
                endDate: string;
                endDateLong?: string;
                generation?: {
                    endDate?: string;
                    value?: string;
                };
                deemedExport?: {
                    endDate?: string;
                    value?: string;
                };
                export?: {
                    endDate?: string;
                    value?: string;
                };
                vat?: string;
                total: string;
            };
            reads?: {
                generationOpening?: {
                    date?: string;
                    value?: string;
                };
                generationClosing?: {
                    date?: string;
                    value?: string;
                };
                exportOpening?: {
                    date?: string;
                    value?: string;
                };
                exportClosing?: {
                    date?: string;
                    value?: string;
                };
                percentageSplit?: string;
            };
            rates?: {
                from?: string;
                export?: string;
                generationOld?: string;
                exportOld?: string;
                generation?: string;
                genPeriod?: string;
                expPeriod?: string;
            };
            emailAddress?: string;
        };
        contactAddress?: CommContactAddress;
    }[];
    [key: string]: unknown;
}

export interface CommBatch {
    id: number;
    createdAt: string;
    itemsPending?: number;
    itemsDelivered?: number;
    itemsScheduled?: number;
    itemsFailed?: number;
    itemsExpired?: number;
    type: CommBatchType;
    filename: string;
    items: {
        id: number;
        commId?: string;
        commBatchId: number;
        status: CommBatchItemStatus;
        createdAt: string;
        updatedAt?: string;
        error?: string;
        templateParams: any;
        contactAddress: any;
    }[];
}

export type CommBatchItemStatus = "Scheduled" | "Pending" | "Delivered" | "Expired" | "Failed";

export interface PostV1Commbatches {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1CommbatchesId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface PostV1ProcessMeterreadstolerance {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface MeterReadCheck {
    id: number;
    cfrFitId: string;
    accountId: number;
    dateOn: string;
    value: number;
    type: "Closing" | "Meter Verification" | "Opening" | "Quarterly";
    reason?: string;
    createdAt: string;
    tolerance?: MeterReadTolerance;
    isAccepted: boolean;
    [key: string]: unknown;
}

export interface MeterReadTolerance {
    previousRead?: MeterReadToleranceRead;
    expected?: MeterReadToleranceRead;
    error?: string;
    [key: string]: unknown;
}

export interface MeterReadToleranceRead {
    dateOn: string;
    value: number;
    [key: string]: unknown;
}

export interface GetV1Readchecks {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
    };
}

export interface BulkUpdate {
    ids: ListOfIds;
    [key: string]: unknown;
}

export type ListOfIds = number[];

export interface MeterReadCheckSave {
    isAccepted: boolean;
    [key: string]: unknown;
}

export interface PutV1Readchecks {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface BulkDelete {
    ids: ListOfIds;
    [key: string]: unknown;
}

export interface DeleteV1Readchecks {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1ReadchecksId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface PutV1ReadchecksId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface DeleteV1ReadchecksId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface LevelisationList {
    id: number;
    quarter: LevelisationQuarter;
    startOn?: string;
    endOn?: string;
    isAccepted: boolean;
    [key: string]: unknown;
}

export type LevelisationQuarter = string;

export interface GetV1Levelisations {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
    };
}

export interface LevelisationCreate {
    quarter: LevelisationQuarter;
    [key: string]: unknown;
}

export type Levelisation = LevelisationList & {
    totalCount?: number;
    pendingCount?: number;
    doneCount?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalGenerationPayment?: Pennies;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalExportPayment?: Pennies;
    totalMeteredExportEnergy?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalMeteredExportPayment?: Pennies;
    totalDeemedExportEnergy?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalDeemedExportPayment?: Pennies;
    [key: string]: unknown;
};

export type Pennies = number;

export interface PostV1Levelisations {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1LevelisationsId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface LevelisationSave {
    isAccepted: boolean;
    isRestarted?: boolean;
    [key: string]: unknown;
}

export interface PutV1LevelisationsId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export type AccountLevelisation = AccountLevelisationList & {
    generationPeriods?: PeriodWithCalculatedAmount[];
    exportPeriods?: PeriodWithCalculatedAmount[];
    [key: string]: unknown;
};

export interface AccountLevelisationList {
    id: number;
    levelisationId: number;
    accountId: number;
    installationId: number;
    state: AccountLevelisationState;
    cfrFitId: string;
    isAccepted: boolean;
    generationStartReadOn?: string;
    generationStartReadValue?: number;
    generationEndReadOn?: string;
    generationEndReadValue?: number;
    generationPercentageSplit?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    generationPayment?: Pennies;
    generationEnergy?: number;
    exportStartReadOn?: string;
    exportStartReadValue?: number;
    exportEndReadOn?: string;
    exportEndReadValue?: number;
    exportPercentageSplit?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    exportPayment?: Pennies;
    exportEnergy?: number;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    totalPayment?: Pennies;
    /**
     * Payment amount in pennies. (140 represnets £1.40)
     */
    vatPayment?: Pennies;
    [key: string]: unknown;
}

export type AccountLevelisationState = "Pending" | "Done";

export interface PeriodWithCalculatedAmount {
    start?: LevelisationMeterRead;
    end?: LevelisationMeterRead;
    rate?: LevelisationRate;
    percentageSplit?: number;
    energy?: number;
    amount?: string;
    [key: string]: unknown;
}

export interface LevelisationMeterRead {
    dateOn: string;
    value: number;
    [key: string]: unknown;
}

export interface LevelisationRate {
    startOn: string;
    endOn: string;
    rate: number;
    [key: string]: unknown;
}

export interface GetV1Accountlevelisations {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
    };
}

export interface BulkAccountLevelisationSave {
    isAccepted: boolean;
    [key: string]: unknown;
}

export interface PutV1Accountlevelisations {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1AccountlevelisationsId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface AccountLevelisationSave {
    id: number;
    isAccepted: boolean;
    [key: string]: unknown;
}

export interface PutV1AccountlevelisationsId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1Paymentexport {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * Just single page parameter
         */
        page: number;
    };
}

export interface AccountListItem {
    id: number;
    firstName: string;
    lastName: string;
    email?: string;
    state?: AccountStateType;
    address?: string;
    fitIds?: ListOfStrings;
    [key: string]: unknown;
}

export type AccountStateType = "Active" | "Pending" | "Dispute" | "Closed";

export type ListOfStrings = string[];

export interface GetV1Account {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * Retern individual records from the list, matching the specified ids
         */
        ids?: number[];
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
    };
}

export interface MeterRead {
    id: number;
    meterId: number;
    dateOn: string;
    value: number;
    type: MeterReadType;
    reason?: string;
    createdAt: string;
    updatedAt?: string;
    sourceSystemId?: number;
}

export type MeterReadType = "Closing" | "Meter Verification" | "Opening" | "Quarterly";

export interface GetV1AccountIdReads {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
    };
}

export interface Account {
    id: number;
    state: AccountStateType;
    companyRegNumber?: string;
    companyVatNumber?: string;
    companyName?: string;
    primaryContactId?: number;
    secondaryContactId?: number;
    primaryContact?: Contact;
    secondaryContact?: Contact;
    paymentSuspended: boolean;
    beneficiaryName?: string;
    beneficiarySortCode?: string;
    beneficiaryAccountNumber?: string;
    paymentPlan?: "Cheque" | "BACS";
    startOn?: string;
    endOn?: string;
    tosReceived: boolean;
    contracts?: AccountContract[];
}

export interface Contact {
    id: number;
    title?: string;
    fullName?: string;
    email?: string;
    phone?: string;
    addressLine1?: string;
    addressLine2?: string;
    addressLine3?: string;
    city?: string;
    country?: string;
    county?: string;
    postCode?: string;
}

export interface AccountContract {
    contractId: number;
    schemeAccountReference: string;
    schemeType: SchemeType;
    createdAt?: string;
    confirmationOn?: string;
    exportSplit?: number;
    generationSplit?: number;
    tosAgreed?: boolean;
    installationId: number;
    contactId?: number;
    generationTariffId?: number;
    exportTariffId?: number;
    genTariffCode?: string;
    expTariffCode?: string;
    title?: string;
    fullName?: string;
}

export type SchemeType = "FIT" | "SEG";

export interface GetV1AccountId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export type Contract = any;

export interface GetV1AccountIdContracts {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1ContactId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface Payment {
    id: number;
    accountId: number;
    sentAt?: string;
    amount: number;
    type: PaymentType;
    genMeterId: number;
    genMeterStartReadDate?: string;
    genMeterStartReadId?: number;
    genMeterStartReadValue?: number;
    genMeterEndReadDate?: string;
    genMeterEndReadId?: number;
    genMeterEndReadValue?: number;
    genMeterTotalOutput?: number;
    exportMeterId?: number;
    exportMeterStartReadDate?: string;
    exportMeterStartReadId?: number;
    exportMeterStartReadValue?: number;
    exportMeterEndReadDate?: string;
    exportMeterEndReadId?: number;
    exportMeterEndReadValue?: number;
    exportTotalOutput?: number;
    deemedTotalOutput?: number;
    expTariffCode?: string;
    genTariffCode?: string;
    periods?: PaymentPeriods;
    isCompany?: boolean;
    createdAt?: string;
    fitReference: string;
    comment?: string;
    levelisationReference?: string;
}

export type PaymentType = "Levelisation";

export interface PaymentPeriods {
    deemed?: Period[];
    export?: Period[];
    generation?: Period[];
    [key: string]: unknown;
}

export interface Period {
    start: SimpleMeterRead;
    end: SimpleMeterRead;
    rate: number;
    energy?: number;
    amount: string;
    percentageSplit?: number;
}

export interface SimpleMeterRead {
    dateOn: string;
    value: number;
}

export interface GetV1Payment {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * Single resource identifier
         */
        id: number;
    };
}

export interface Installation {
    id: number;
    accountId?: number;
    name?: string;
    type: InstallationType;
    schemeReference?: string;
    confirmationOn?: string;
    generationPercentageSplit?: number;
    exportPercentageSplit?: number;
    termsAndConditionsAgreed?: boolean;
    scheme?: SchemeType;
    technologyType?: TechnologyType;
    propertyType: PropertyType;
    exportType?: ExportType;
    commissionedOn?: string;
    decommissionedOn?: string;
    installedOn: string;
    verifiedOn?: string;
    reverifiedOn?: string;
    inspectedOn?: string;
    mcsReference?: string;
    maxCapacity?: number;
    dncReference?: number;
    exportTariffId?: number;
    generationTariffId?: number;
    roofitReference?: string;
    hasBatteryStorage?: string;
    batteryInstallationDateOn?: string;
    tariffRates?: TariffRate[];
    exportMpan?: string;
    sourceSystemId?: number;
    nameOfGrant?: string;
    valueOfGrant?: number;
    eligibilityStartOn?: string;
    eligibilityEndOn?: string;
    dateGrantRepaid?: string;
    epcRate?: string;
    epcDate?: string;
    epcNumber?: number;
    legacyFitDbId?: string;
    supplyMpan?: string;
    switchedFrom?: string;
    switchedTo?: string;
    address?: Address;
    meters?: InstallationMeter[];
    createdAt: string;
    updatedAt?: string;
    addressId?: number;
    contracts?: AccountContract[];
}

export type InstallationType = "None" | "Extension of an existing FiT-accredited installation" | "Standalone" | "New build" | "Retrofit";

export type TechnologyType = "CHP" | "AD" | "W" | "H" | "PV";

export type PropertyType = "Other" | "School/Education" | "Not for profit" | "Industrial" | "Farm" | "Commercial" | "Domestic";

export type ExportType = "PPA" | "Off Grid" | "Metered Export" | "Deemed";

export interface TariffRate {
    startOn: string;
    endOn?: string;
    rate: number;
    tariffId: number;
    tariffCode: string;
    tariffType: TariffType;
}

export type TariffType = "Export" | "Generation" | "SEG";

export interface InstallationMeter {
    id: number;
    type: MeterType;
    meterId: number;
    installationId?: number;
    startOn?: string;
    endOn?: string;
    mpan?: string;
    shared: boolean;
    msn: string;
    make?: string;
    model?: string;
    gsp?: string;
    distributionRegion?: string;
    addedToInstallationAt: string;
    updatedAt?: string;
}

export type MeterType = "Export" | "Generation";

export interface GetV1Installation {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * Single resource identifier
         */
        id: number;
    };
}

export interface Meter {
    id: number;
    mpan?: string;
    shared?: boolean;
    msn: string;
    make?: string;
    model?: string;
    isExport: boolean;
    gsp?: string;
    distributionRegion?: string;
    createdAt: string;
    updatedAt?: string;
}

export interface GetV1MeterId {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1Meter {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
}

export interface GetV1Read {
    headers?: {
        /**
         * An optional trace token to be passed to the service and used for logging
         */
        "x-trace-token"?: string;
    };
    params?: {
        /**
         * React admin filter object. It should contain different filters, for example "q" is for a search.
         */
        filter?: any;
        /**
         * React admin pagination object
         */
        pagination?: {
            page?: number;
            perPage?: number;
        };
        /**
         * React admin sort object
         */
        sort?: {
            field?: string;
            order?: "ASC" | "DESC";
        };
        /**
         * Single resource identifier
         */
        id: number;
    };
}

export interface AxiosOapiInstance {
    /**
     * Health Check
     * Health check endpoint
     */
    "GET /.well-known/health-check": (config?: AxiosRequestConfig) => Promise<AxiosResponse<{
        success: boolean;
    }>>;
    /**
     * OpenApi
     * The open api spec for the service. OpenAPI v3.
     */
    "GET /.well-known/openapi.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse<string>>;
    /**
     * OpenApi Components
     * Shared schemas for the open api spec. OpenAPI v3.
     */
    "GET /.well-known/components.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse<string>>;
    /**
     * OpenApi Levelisation
     * Schemas for Levelisation endpoints. OpenAPI v3.
     */
    "GET /.well-known/levelisations.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse<string>>;
    /**
     * OpenApi Read Checks
     * Schemas for Read Checks endpoints. OpenAPI v3.
     */
    "GET /.well-known/read-checks.yaml": (config?: AxiosRequestConfig) => Promise<AxiosResponse<string>>;
    /**
     * OpenApi HTML
     * The open api spec for the service. OpenAPI v3.
     */
    "GET /.well-known/openapi.html": (config?: AxiosRequestConfig) => Promise<AxiosResponse>;
    /**
     * Create a session for the current user
     */
    "POST /v1/session": (data: {
        type: "oauth" | "jwt";
        token: string;
    }, config?: AxiosRequestConfig & PostV1Session) => Promise<AxiosResponse<Session>>;
    /**
     * Get Comm Batches.
     */
    "GET /v1/comm-batches": (config?: AxiosRequestConfig & GetV1Commbatches) => Promise<AxiosResponse<List & {
        data: CommBatchList[];
        [key: string]: unknown;
    }>>;
    /**
     * Create New Comm Batch
     * Create new Comm Batch that will be processed and can be monitored responses
     *
     */
    "POST /v1/comm-batches": (data: NewCommBatch, config?: AxiosRequestConfig & PostV1Commbatches) => Promise<AxiosResponse<CommBatch>>;
    /**
     * Get Comm Batch by ID
     */
    "GET /v1/comm-batches/{id}": (id: number, config?: AxiosRequestConfig & GetV1CommbatchesId) => Promise<AxiosResponse<CommBatch>>;
    /**
     * Do a tolerance checks for all the reads that have not been checked
     */
    "POST /v1/process/meter-reads-tolerance": (data?: unknown, config?: AxiosRequestConfig & PostV1ProcessMeterreadstolerance) => Promise<AxiosResponse<{
        success: boolean;
    }>>;
    /**
     * Tolerance checks
     * List of Meter Reads that have failed their tolernace checks and need to be reviewed
     */
    "GET /v1/read-checks": (config?: AxiosRequestConfig & GetV1Readchecks) => Promise<AxiosResponse<List & {
        data?: MeterReadCheck[];
        [key: string]: unknown;
    }>>;
    /**
     * Bulk Save Tolerance Check
     * Update Multiple Tolerance check details at once
     */
    "PUT /v1/read-checks": (data: BulkUpdate & {
        data: MeterReadCheckSave;
        [key: string]: unknown;
    }, config?: AxiosRequestConfig & PutV1Readchecks) => Promise<AxiosResponse<ListOfIds>>;
    /**
     * Save Tolerance Check
     * Update Tolerance check details
     */
    "DELETE /v1/read-checks": (config?: AxiosRequestConfig & DeleteV1Readchecks) => Promise<AxiosResponse<ListOfIds>>;
    /**
     * Single Tolerance check
     * Details on the meter read tolerance check
     */
    "GET /v1/read-checks/{id}": (id: number, config?: AxiosRequestConfig & GetV1ReadchecksId) => Promise<AxiosResponse<MeterReadCheck>>;
    /**
     * Save Tolerance Check
     * Update Tolerance check details
     */
    "PUT /v1/read-checks/{id}": (id: number, data: MeterReadCheckSave, config?: AxiosRequestConfig & PutV1ReadchecksId) => Promise<AxiosResponse<MeterReadCheck>>;
    /**
     * Save Tolerance Check
     * Update Tolerance check details
     */
    "DELETE /v1/read-checks/{id}": (id: number, config?: AxiosRequestConfig & DeleteV1ReadchecksId) => Promise<AxiosResponse<{
        success: boolean;
    }>>;
    /**
     * Levelisations
     * List of Levelisation processes by quarters
     */
    "GET /v1/levelisations": (config?: AxiosRequestConfig & GetV1Levelisations) => Promise<AxiosResponse<List & {
        data?: LevelisationList[];
        [key: string]: unknown;
    }>>;
    /**
     * Create new Levelisation
     * Create a new Levelisation
     */
    "POST /v1/levelisations": (data: LevelisationCreate, config?: AxiosRequestConfig & PostV1Levelisations) => Promise<AxiosResponse<Levelisation>>;
    /**
     * Quater levelisation
     * Levelisation calculation for all accounts
     */
    "GET /v1/levelisations/{id}": (id: number, config?: AxiosRequestConfig & GetV1LevelisationsId) => Promise<AxiosResponse<Levelisation>>;
    /**
     * Save Levelisation
     * Update Levelisation
     */
    "PUT /v1/levelisations/{id}": (id: number, data: LevelisationSave, config?: AxiosRequestConfig & PutV1LevelisationsId) => Promise<AxiosResponse<Levelisation>>;
    /**
     * Levelisations
     * List of Levelisation processes by quarters
     */
    "GET /v1/account-levelisations": (config?: AxiosRequestConfig & GetV1Accountlevelisations) => Promise<AxiosResponse<List & {
        data?: AccountLevelisation[];
        [key: string]: unknown;
    }>>;
    /**
     * Bulk Save Account Levelisations
     * Update Account Levelisations at once
     */
    "PUT /v1/account-levelisations": (data: BulkUpdate & {
        data: BulkAccountLevelisationSave;
        [key: string]: unknown;
    }, config?: AxiosRequestConfig & PutV1Accountlevelisations) => Promise<AxiosResponse<ListOfIds>>;
    /**
     * Account levelisation tariff
     * Levelisation tariff for a single account
     */
    "GET /v1/account-levelisations/{id}": (id: number, config?: AxiosRequestConfig & GetV1AccountlevelisationsId) => Promise<AxiosResponse<AccountLevelisation>>;
    /**
     * Save Account Levelisation
     * Update Account Levelisation
     */
    "PUT /v1/account-levelisations/{id}": (id: number, data: AccountLevelisationSave, config?: AxiosRequestConfig & PutV1AccountlevelisationsId) => Promise<AxiosResponse<AccountLevelisation>>;
    /**
     * Payment CSV Export
     * Cheque Payments
     */
    "GET /v1/payment-export": (config?: AxiosRequestConfig & GetV1Paymentexport) => Promise<AxiosResponse>;
    /**
     * Accounts
     * A list of fit and seg accounts
     */
    "GET /v1/account": (config?: AxiosRequestConfig & GetV1Account) => Promise<AxiosResponse<List & {
        data: AccountListItem[];
        [key: string]: unknown;
    }>>;
    /**
     * Get reads for the account
     * Account reads
     */
    "GET /v1/account/{id}/reads": (id: number, config?: AxiosRequestConfig & GetV1AccountIdReads) => Promise<AxiosResponse<MeterRead[]>>;
    /**
     * Get reads for the account
     * Account reads
     */
    "GET /v1/account/{id}": (id: number, config?: AxiosRequestConfig & GetV1AccountId) => Promise<AxiosResponse<Account>>;
    /**
     * Get reads for the account
     * Account reads
     */
    "GET /v1/account/{id}/contracts": (id: number, config?: AxiosRequestConfig & GetV1AccountIdContracts) => Promise<AxiosResponse<Contract[]>>;
    /**
     * Get contact by id
     * Contacts
     */
    "GET /v1/contact/{id}": (id: number, config?: AxiosRequestConfig & GetV1ContactId) => Promise<AxiosResponse<Contact>>;
    /**
     * Get contact by id
     * Contacts
     */
    "GET /v1/payment": (config?: AxiosRequestConfig & GetV1Payment) => Promise<AxiosResponse<{
        data: Payment[];
        total: number;
    }>>;
    /**
     * Get installations
     * Installations
     */
    "GET /v1/installation": (config?: AxiosRequestConfig & GetV1Installation) => Promise<AxiosResponse<{
        data: Installation[];
        total: number;
    }>>;
    /**
     * Get meter
     * Meter
     */
    "GET /v1/meter/{id}": (id: number, config?: AxiosRequestConfig & GetV1MeterId) => Promise<AxiosResponse<Meter>>;
    /**
     * Get meters
     * Meters
     */
    "GET /v1/meter": (config?: AxiosRequestConfig & GetV1Meter) => Promise<AxiosResponse<{
        data: Meter[];
        total: number;
    }>>;
    /**
     * Get meter reads
     * Meter reads
     */
    "GET /v1/read": (config?: AxiosRequestConfig & GetV1Read) => Promise<AxiosResponse<{
        data: MeterRead[];
        total: number;
    }>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test statements.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * Boost statements
 *
 * Version: 1.0.0
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * Get Meters, associated with an account, and its service start and end dates (SSD...SED)
     */
    "GET /accounts/{accountId}/meters": (accountId, config) => api.get<AccountMeter[] | HttpError>(\`/accounts/\${accountId}/meters\`, config),
    api: api
});

export type AccountId = string;

export type AccountMeter = AccountMeterElec | AccountMeterGas;

export type AccountMeterElec = AccountMeterBase & {
    meterType: "elec";
    profileClassId: string;
    meterTimeswitchCode: string;
    lineLossFactorClassId: string;
    [key: string]: unknown;
};

export interface AccountMeterBase {
    tariffName: string;
    plan: string;
    address: string;
    postCode: string;
    mpxn: string;
    msn: string;
    startDate: string;
    endDate: string;
    [key: string]: unknown;
}

export type AccountMeterGas = AccountMeterBase & {
    meterType: "gas";
    ldz: string;
    [key: string]: unknown;
};

export interface HttpError {
    message?: string;
}

export interface AxiosOapiInstance {
    /**
     * Get Meters, associated with an account, and its service start and end dates (SSD...SED)
     */
    "GET /accounts/{accountId}/meters": (accountId: AccountId, config?: AxiosRequestConfig) => Promise<AxiosResponse<AccountMeter[] | HttpError>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test uspto.json 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * USPTO Data Set API
 *
 * Version: 1.0.0
 *
 * Description:
 * The Data Set API (DSAPI) allows the public users to discover and search USPTO exported data sets. This is a generic API that allows USPTO users to make any CSV based data files searchable through API. With the help of GET call, it returns the list of data fields that are searchable. With the help of POST call, data can be fetched based on the filters on the field names. Please note that POST call is used to search the actual data. The reason for the POST call is that it allows users to specify any complex search criteria without worry about the GET size limitations as well as encoding of the input parameters.
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * List available data sets
     */
    "GET /": config => api.get<dataSetList>(\`/\`, config),
    /**
     * Provides the general information about the API and the list of fields that can be used to query the dataset.
     * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
     */
    "GET /{dataset}/{version}/fields": (dataset, version, config) => api.get<string>(\`/\${dataset}/\${version}/fields\`, config),
    /**
     * Provides search capability for the data set with the given search criteria.
     * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
     */
    "POST /{dataset}/{version}/records": (dataset, version, data, config) => api.post<any[]>(\`/\${dataset}/\${version}/records\`, data, config),
    api: api
});

export interface dataSetList {
    total?: number;
    apis?: {
        /**
         * To be used as a dataset parameter value
         */
        apiKey?: string;
        /**
         * To be used as a version parameter value
         */
        apiVersionNumber?: string;
        /**
         * The URL describing the dataset's fields
         */
        apiUrl?: string;
        /**
         * A URL to the API console for each API
         */
        apiDocumentationUrl?: string;
        [key: string]: unknown;
    }[];
    [key: string]: unknown;
}

export interface AxiosOapiInstance {
    /**
     * List available data sets
     */
    "GET /": (config?: AxiosRequestConfig) => Promise<AxiosResponse<dataSetList>>;
    /**
     * Provides the general information about the API and the list of fields that can be used to query the dataset.
     * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
     */
    "GET /{dataset}/{version}/fields": (dataset: string, version: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<string>>;
    /**
     * Provides search capability for the data set with the given search criteria.
     * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
     */
    "POST /{dataset}/{version}/records": (dataset: string, version: string, data?: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse<any[]>>;
    api: AxiosInstance;
}
"
`;

exports[`Axios Content Test uspto.yaml 1`] = `
"import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

/**
 * USPTO Data Set API
 *
 * Version: 1.0.0
 *
 * Description:
 * The Data Set API (DSAPI) allows the public users to discover and search USPTO exported data sets. This is a generic API that allows USPTO users to make any CSV based data files searchable through API. With the help of GET call, it returns the list of data fields that are searchable. With the help of POST call, data can be fetched based on the filters on the field names. Please note that POST call is used to search the actual data. The reason for the POST call is that it allows users to specify any complex search criteria without worry about the GET size limitations as well as encoding of the input parameters.
 */
export const axiosOapi = (api: AxiosInstance): AxiosOapiInstance => ({
    /**
     * List available data sets
     */
    "GET /": config => api.get<dataSetList>(\`/\`, config),
    /**
     * Provides the general information about the API and the list of fields that can be used to query the dataset.
     * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
     */
    "GET /{dataset}/{version}/fields": (dataset, version, config) => api.get<string>(\`/\${dataset}/\${version}/fields\`, config),
    /**
     * Provides search capability for the data set with the given search criteria.
     * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
     */
    "POST /{dataset}/{version}/records": (dataset, version, data, config) => api.post<any[]>(\`/\${dataset}/\${version}/records\`, data, config),
    api: api
});

export interface dataSetList {
    total?: number;
    apis?: {
        /**
         * To be used as a dataset parameter value
         */
        apiKey?: string;
        /**
         * To be used as a version parameter value
         */
        apiVersionNumber?: string;
        /**
         * The URL describing the dataset's fields
         */
        apiUrl?: string;
        /**
         * A URL to the API console for each API
         */
        apiDocumentationUrl?: string;
        [key: string]: unknown;
    }[];
    [key: string]: unknown;
}

export interface AxiosOapiInstance {
    /**
     * List available data sets
     */
    "GET /": (config?: AxiosRequestConfig) => Promise<AxiosResponse<dataSetList>>;
    /**
     * Provides the general information about the API and the list of fields that can be used to query the dataset.
     * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
     */
    "GET /{dataset}/{version}/fields": (dataset: string, version: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<string>>;
    /**
     * Provides search capability for the data set with the given search criteria.
     * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
     */
    "POST /{dataset}/{version}/records": (dataset: string, version: string, data?: unknown, config?: AxiosRequestConfig) => Promise<AxiosResponse<any[]>>;
    api: AxiosInstance;
}
"
`;
