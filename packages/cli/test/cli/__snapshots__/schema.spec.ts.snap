// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`draft4 additionalItems.json Test additionalItems are allowed by default 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft4 additionalItems.json Test additionalItems as false without items 1`] = `
{
  "schema": {
    "additionalItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft4 additionalItems.json Test additionalItems as schema 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "integer",
    },
    "items": [
      {},
    ],
  },
  "ts": "(any | number)[]
",
}
`;

exports[`draft4 additionalItems.json Test additionalItems should not look in applicators, invalid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
          {
            "type": "string",
          },
        ],
      },
    ],
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft4 additionalItems.json Test additionalItems should not look in applicators, valid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
        ],
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft4 additionalItems.json Test array of items with no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {},
      {},
      {},
    ],
  },
  "ts": "[
    any,
    any,
    any
]
",
}
`;

exports[`draft4 additionalItems.json Test items is schema, no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": {},
  },
  "ts": "any[]
",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties allows a schema which should validate 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: boolean | undefined;
}
",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties are allowed by default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties being false does not allow other properties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^v": {},
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
}
",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties can exist by itself 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties should not look in applicators 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "allOf": [
      {
        "properties": {
          "foo": {},
        },
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 additionalProperties.json Test non-ASCII pattern with additionalProperties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^รก": {},
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 allOf.json Test allOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} & {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 allOf.json Test allOf combined with anyOf, oneOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "multipleOf": 2,
      },
    ],
    "anyOf": [
      {
        "multipleOf": 3,
      },
    ],
    "oneOf": [
      {
        "multipleOf": 5,
      },
    ],
  },
  "ts": "any
",
}
`;

exports[`draft4 allOf.json Test allOf simple types 1`] = `
{
  "schema": {
    "allOf": [
      {
        "maximum": 30,
      },
      {
        "minimum": 20,
      },
    ],
  },
  "ts": "number & number
",
}
`;

exports[`draft4 allOf.json Test allOf with base schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
      {
        "properties": {
          "baz": {
            "type": "null",
          },
        },
        "required": [
          "baz",
        ],
      },
    ],
    "properties": {
      "bar": {
        "type": "integer",
      },
    },
    "required": [
      "bar",
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 allOf.json Test allOf with one empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
    ],
  },
  "ts": "any
",
}
`;

exports[`draft4 allOf.json Test allOf with the first empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {
        "type": "number",
      },
    ],
  },
  "ts": "any & number
",
}
`;

exports[`draft4 allOf.json Test allOf with the last empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number & any
",
}
`;

exports[`draft4 allOf.json Test allOf with two empty schemas 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {},
    ],
  },
  "ts": "any & any
",
}
`;

exports[`draft4 allOf.json Test nested allOf, to check validation semantics 1`] = `
{
  "schema": {
    "allOf": [
      {
        "allOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft4 anyOf.json Test anyOf 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft4 anyOf.json Test anyOf complex types 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 anyOf.json Test anyOf with base schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "maxLength": 2,
      },
      {
        "minLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft4 anyOf.json Test anyOf with one empty schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft4 anyOf.json Test nested anyOf, to check validation semantics 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "anyOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft4 anyOf.json Test nested anyOf, to check validation semantics 2`] = `
{
  "schema": {
    "anyOf": [
      {
        "anyOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft4 default.json Test invalid string value for default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "default": "bad",
        "minLength": 4,
        "type": "string",
      },
    },
  },
  "ts": "{
    bar: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 default.json Test invalid type for default 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "default": [],
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 definitions.json Test invalid definition 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-04/schema#",
  },
  "ts": "schema_

export interface schema_ {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum: boolean;
    minimum?: number;
    exclusiveMinimum: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems: boolean | _;
    items: _ | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties: boolean | _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    /**
     * Core schema meta-schema
     */
    not: _;
    [key: string]: unknown;
}

export type positiveInteger = number;

export type positiveIntegerDefault0 = positiveInteger & any;

export interface _ {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum: boolean;
    minimum?: number;
    exclusiveMinimum: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems: boolean | _;
    items: _ | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties: boolean | _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    /**
     * Core schema meta-schema
     */
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft4 definitions.json Test valid definition 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-04/schema#",
  },
  "ts": "schema_

export interface schema_ {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum: boolean;
    minimum?: number;
    exclusiveMinimum: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems: boolean | _;
    items: _ | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties: boolean | _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    /**
     * Core schema meta-schema
     */
    not: _;
    [key: string]: unknown;
}

export type positiveInteger = number;

export type positiveIntegerDefault0 = positiveInteger & any;

export interface _ {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum: boolean;
    minimum?: number;
    exclusiveMinimum: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems: boolean | _;
    items: _ | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties: boolean | _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    /**
     * Core schema meta-schema
     */
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft4 dependencies.json Test dependencies 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": [
        "foo",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 dependencies.json Test dependencies with escaped characters 1`] = `
{
  "schema": {
    "dependencies": {
      "foo	bar": {
        "minProperties": 4,
      },
      "foo
bar": [
        "foo
bar",
      ],
      "foo"bar": [
        "foo'bar",
      ],
      "foo'bar": {
        "required": [
          "foo"bar",
        ],
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 dependencies.json Test multiple dependencies 1`] = `
{
  "schema": {
    "dependencies": {
      "quux": [
        "foo",
        "bar",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 dependencies.json Test multiple dependencies subschema 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": {
        "properties": {
          "bar": {
            "type": "integer",
          },
          "foo": {
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 enum.json Test enum with 0 does not match false 1`] = `
{
  "schema": {
    "enum": [
      0,
    ],
  },
  "ts": "0
",
}
`;

exports[`draft4 enum.json Test enum with 1 does not match true 1`] = `
{
  "schema": {
    "enum": [
      1,
    ],
  },
  "ts": "1
",
}
`;

exports[`draft4 enum.json Test enum with escaped characters 1`] = `
{
  "schema": {
    "enum": [
      "foo
bar",
      "foo
bar",
    ],
  },
  "ts": ""foo\\nbar" | "foo\\rbar"
",
}
`;

exports[`draft4 enum.json Test enum with false does not match 0 1`] = `
{
  "schema": {
    "enum": [
      false,
    ],
  },
  "ts": "false
",
}
`;

exports[`draft4 enum.json Test enum with true does not match 1 1`] = `
{
  "schema": {
    "enum": [
      true,
    ],
  },
  "ts": "true
",
}
`;

exports[`draft4 enum.json Test enums in properties 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "enum": [
          "bar",
        ],
      },
      "foo": {
        "enum": [
          "foo",
        ],
      },
    },
    "required": [
      "bar",
    ],
    "type": "object",
  },
  "ts": "{
    foo?: "foo";
    bar: "bar";
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 enum.json Test heterogeneous enum validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      "foo",
      [],
      true,
      {
        "foo": 12,
      },
    ],
  },
  "ts": "6 | "foo" | any | true | any
",
}
`;

exports[`draft4 enum.json Test heterogeneous enum-with-null validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      null,
    ],
  },
  "ts": "6 | any
",
}
`;

exports[`draft4 enum.json Test nul characters in strings 1`] = `
{
  "schema": {
    "enum": [
      "hello there",
    ],
  },
  "ts": ""hello\\0there"
",
}
`;

exports[`draft4 enum.json Test simple enum validation 1`] = `
{
  "schema": {
    "enum": [
      1,
      2,
      3,
    ],
  },
  "ts": "1 | 2 | 3
",
}
`;

exports[`draft4 format.json Test validation of IP addresses 1`] = `
{
  "schema": {
    "format": "ipv4",
  },
  "ts": "any
",
}
`;

exports[`draft4 format.json Test validation of IPv6 addresses 1`] = `
{
  "schema": {
    "format": "ipv6",
  },
  "ts": "any
",
}
`;

exports[`draft4 format.json Test validation of URIs 1`] = `
{
  "schema": {
    "format": "uri",
  },
  "ts": "any
",
}
`;

exports[`draft4 format.json Test validation of date-time strings 1`] = `
{
  "schema": {
    "format": "date-time",
  },
  "ts": "any
",
}
`;

exports[`draft4 format.json Test validation of e-mail addresses 1`] = `
{
  "schema": {
    "format": "email",
  },
  "ts": "any
",
}
`;

exports[`draft4 format.json Test validation of hostnames 1`] = `
{
  "schema": {
    "format": "hostname",
  },
  "ts": "any
",
}
`;

exports[`draft4 items.json Test a schema given for items 1`] = `
{
  "schema": {
    "items": {
      "type": "integer",
    },
  },
  "ts": "number[]
",
}
`;

exports[`draft4 items.json Test an array of schemas for items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "type": "string",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft4 items.json Test items and subitems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "definitions": {
      "item": {
        "additionalItems": false,
        "items": [
          {
            "$ref": "#/definitions/sub-item",
          },
          {
            "$ref": "#/definitions/sub-item",
          },
        ],
        "type": "array",
      },
      "sub-item": {
        "required": [
          "foo",
        ],
        "type": "object",
      },
    },
    "items": [
      {
        "$ref": "#/definitions/item",
      },
      {
        "$ref": "#/definitions/item",
      },
      {
        "$ref": "#/definitions/item",
      },
    ],
    "type": "array",
  },
  "ts": "[
    item,
    item,
    item
]

export type item = [
    sub_item,
    sub_item
];

export type sub_item = any;
",
}
`;

exports[`draft4 items.json Test nested items 1`] = `
{
  "schema": {
    "items": {
      "items": {
        "items": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "array",
  },
  "ts": "number[][][][]
",
}
`;

exports[`draft4 maxItems.json Test maxItems validation 1`] = `
{
  "schema": {
    "maxItems": 2,
  },
  "ts": "any[]
",
}
`;

exports[`draft4 maxLength.json Test maxLength validation 1`] = `
{
  "schema": {
    "maxLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft4 maxProperties.json Test maxProperties = 0 means the object is empty 1`] = `
{
  "schema": {
    "maxProperties": 0,
  },
  "ts": "any
",
}
`;

exports[`draft4 maxProperties.json Test maxProperties validation 1`] = `
{
  "schema": {
    "maxProperties": 2,
  },
  "ts": "any
",
}
`;

exports[`draft4 maximum.json Test exclusiveMaximum validation 1`] = `
{
  "schema": {
    "exclusiveMaximum": true,
    "maximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft4 maximum.json Test maximum validation (explicit false exclusivity) 1`] = `
{
  "schema": {
    "exclusiveMaximum": false,
    "maximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft4 maximum.json Test maximum validation 1`] = `
{
  "schema": {
    "maximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft4 maximum.json Test maximum validation with unsigned integer 1`] = `
{
  "schema": {
    "maximum": 300,
  },
  "ts": "number
",
}
`;

exports[`draft4 minItems.json Test minItems validation 1`] = `
{
  "schema": {
    "minItems": 1,
  },
  "ts": "any[]
",
}
`;

exports[`draft4 minLength.json Test minLength validation 1`] = `
{
  "schema": {
    "minLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft4 minProperties.json Test minProperties validation 1`] = `
{
  "schema": {
    "minProperties": 1,
  },
  "ts": "any
",
}
`;

exports[`draft4 minimum.json Test exclusiveMinimum validation 1`] = `
{
  "schema": {
    "exclusiveMinimum": true,
    "minimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft4 minimum.json Test minimum validation (explicit false exclusivity) 1`] = `
{
  "schema": {
    "exclusiveMinimum": false,
    "minimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft4 minimum.json Test minimum validation 1`] = `
{
  "schema": {
    "minimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft4 minimum.json Test minimum validation with signed integer 1`] = `
{
  "schema": {
    "minimum": -2,
  },
  "ts": "number
",
}
`;

exports[`draft4 multipleOf.json Test by int 1`] = `
{
  "schema": {
    "multipleOf": 2,
  },
  "ts": "any
",
}
`;

exports[`draft4 multipleOf.json Test by number 1`] = `
{
  "schema": {
    "multipleOf": 1.5,
  },
  "ts": "any
",
}
`;

exports[`draft4 multipleOf.json Test by small number 1`] = `
{
  "schema": {
    "multipleOf": 0.0001,
  },
  "ts": "any
",
}
`;

exports[`draft4 not.json Test forbidden property 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "not": {},
      },
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 not.json Test not 1`] = `
{
  "schema": {
    "not": {
      "type": "integer",
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 not.json Test not more complex schema 1`] = `
{
  "schema": {
    "not": {
      "properties": {
        "foo": {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 not.json Test not multiple types 1`] = `
{
  "schema": {
    "not": {
      "type": [
        "integer",
        "boolean",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 oneOf.json Test nested oneOf, to check validation semantics 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "oneOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft4 oneOf.json Test oneOf 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft4 oneOf.json Test oneOf complex types 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 oneOf.json Test oneOf with base schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "minLength": 2,
      },
      {
        "maxLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft4 oneOf.json Test oneOf with empty schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft4 oneOf.json Test oneOf with missing optional property 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": {},
          "baz": {},
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {},
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: any;
    baz?: any;
    [key: string]: unknown;
} | {
    foo: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 oneOf.json Test oneOf with required 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "required": [
          "foo",
          "bar",
        ],
      },
      {
        "required": [
          "foo",
          "baz",
        ],
      },
    ],
    "type": "object",
  },
  "ts": "any | any
",
}
`;

exports[`draft4 pattern.json Test pattern is not anchored 1`] = `
{
  "schema": {
    "pattern": "a+",
  },
  "ts": "string
",
}
`;

exports[`draft4 pattern.json Test pattern validation 1`] = `
{
  "schema": {
    "pattern": "^a*$",
  },
  "ts": "string
",
}
`;

exports[`draft4 patternProperties.json Test multiple simultaneous patternProperties are validated 1`] = `
{
  "schema": {
    "patternProperties": {
      "a*": {
        "type": "integer",
      },
      "aaa*": {
        "maximum": 20,
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 patternProperties.json Test patternProperties validates properties matching a regex 1`] = `
{
  "schema": {
    "patternProperties": {
      "f.*o": {
        "type": "integer",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 patternProperties.json Test regexes are not anchored by default and are case sensitive 1`] = `
{
  "schema": {
    "patternProperties": {
      "X_": {
        "type": "string",
      },
      "[0-9]{2,}": {
        "type": "boolean",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft4 properties.json Test object properties validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "type": "string",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 properties.json Test properties with escaped characters 1`] = `
{
  "schema": {
    "properties": {
      "foo	bar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foobar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foo"bar": {
        "type": "number",
      },
      "foo\\bar": {
        "type": "number",
      },
    },
  },
  "ts": "{
    "foo\\nbar"?: number;
    "foo\\"bar"?: number;
    "foo\\\\bar"?: number;
    "foo\\rbar"?: number;
    "foo\\tbar"?: number;
    "foo\\fbar"?: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 properties.json Test properties, patternProperties, additionalProperties interaction 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "integer",
    },
    "patternProperties": {
      "f.o": {
        "minItems": 2,
      },
    },
    "properties": {
      "bar": {
        "type": "array",
      },
      "foo": {
        "maxItems": 3,
        "type": "array",
      },
    },
  },
  "ts": "{
    foo?: any[];
    bar?: any;
    [key: string]: number | undefined;
}
",
}
`;

exports[`draft4 ref.json Test Location-independent identifier 1`] = `
{
  "schema": {
    "allOf": [
      {
        "$ref": "#foo",
      },
    ],
    "definitions": {
      "A": {
        "id": "#foo",
        "type": "integer",
      },
    },
  },
  "ts": "_foo

export type _foo = number;
",
}
`;

exports[`draft4 ref.json Test Location-independent identifier with absolute URI 1`] = `
{
  "schema": {
    "allOf": [
      {
        "$ref": "http://localhost:1234/bar#foo",
      },
    ],
    "definitions": {
      "A": {
        "id": "http://localhost:1234/bar#foo",
        "type": "integer",
      },
    },
  },
  "ts": "bar_foo

export type bar_foo = number;
",
}
`;

exports[`draft4 ref.json Test Location-independent identifier with base URI change in subschema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "$ref": "http://localhost:1234/nested.json#foo",
      },
    ],
    "definitions": {
      "A": {
        "definitions": {
          "B": {
            "id": "#foo",
            "type": "integer",
          },
        },
        "id": "nested.json",
      },
    },
    "id": "http://localhost:1234/root",
  },
  "ts": "nested_json_foo

export type nested_json_foo = number;
",
}
`;

exports[`draft4 ref.json Test Recursive references between schemas 1`] = `
{
  "schema": {
    "definitions": {
      "node": {
        "description": "node",
        "id": "http://localhost:1234/node",
        "properties": {
          "subtree": {
            "$ref": "tree",
          },
          "value": {
            "type": "number",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
    },
    "description": "tree of nodes",
    "id": "http://localhost:1234/tree",
    "properties": {
      "meta": {
        "type": "string",
      },
      "nodes": {
        "items": {
          "$ref": "node",
        },
        "type": "array",
      },
    },
    "required": [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "ts": "{
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}

export interface node_ {
    value: number;
    /**
     * tree of nodes
     */
    subtree?: tree_;
    [key: string]: unknown;
}

export interface tree_ {
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 ref.json Test escaped pointer ref 1`] = `
{
  "schema": {
    "percent%field": {
      "type": "integer",
    },
    "properties": {
      "percent": {
        "$ref": "#/percent%25field",
      },
      "slash": {
        "$ref": "#/slash~1field",
      },
      "tilde": {
        "$ref": "#/tilde~0field",
      },
    },
    "slash/field": {
      "type": "integer",
    },
    "tilde~field": {
      "type": "integer",
    },
  },
  "ts": "{
    tilde?: tilde~0field;
    slash?: slash~1field;
    percent?: percent%25field;
    [key: string]: unknown;
}

export type tilde~0field = number;

export type slash~1field = number;

export type percent%25field = number;
",
}
`;

exports[`draft4 ref.json Test nested refs 1`] = `
{
  "schema": {
    "$ref": "#/definitions/c",
    "definitions": {
      "a": {
        "type": "integer",
      },
      "b": {
        "$ref": "#/definitions/a",
      },
      "c": {
        "$ref": "#/definitions/b",
      },
    },
  },
  "ts": "c

export type c = b;

export type b = a;

export type a = number;
",
}
`;

exports[`draft4 ref.json Test property named $ref that is not a reference 1`] = `
{
  "schema": {
    "properties": {
      "$ref": {
        "type": "string",
      },
    },
  },
  "ts": "{
    $ref?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 ref.json Test property named $ref, containing an actual $ref 1`] = `
{
  "schema": {
    "definitions": {
      "is-string": {
        "type": "string",
      },
    },
    "properties": {
      "$ref": {
        "$ref": "#/definitions/is-string",
      },
    },
  },
  "ts": "{
    $ref?: is_string;
    [key: string]: unknown;
}

export type is_string = string;
",
}
`;

exports[`draft4 ref.json Test ref overrides any sibling keywords 1`] = `
{
  "schema": {
    "definitions": {
      "reffed": {
        "type": "array",
      },
    },
    "properties": {
      "foo": {
        "$ref": "#/definitions/reffed",
        "maxItems": 2,
      },
    },
  },
  "ts": "{
    foo?: reffed;
    [key: string]: unknown;
}

export type reffed = any;
",
}
`;

exports[`draft4 ref.json Test refs with quote 1`] = `
{
  "schema": {
    "definitions": {
      "foo"bar": {
        "type": "number",
      },
    },
    "properties": {
      "foo"bar": {
        "$ref": "#/definitions/foo%22bar",
      },
    },
  },
  "ts": "{
    "foo\\"bar"?: foo%22bar;
    [key: string]: unknown;
}

export type foo%22bar = number;
",
}
`;

exports[`draft4 ref.json Test relative pointer ref to array 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "$ref": "#/items/0",
      },
    ],
  },
  "ts": "(number | 0)[]

export type 0 = number;
",
}
`;

exports[`draft4 ref.json Test relative pointer ref to object 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "$ref": "#/properties/foo",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: foo;
    [key: string]: unknown;
}

export type foo = number;
",
}
`;

exports[`draft4 ref.json Test remote ref, containing refs itself 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-04/schema#",
  },
  "ts": "schema_

export interface schema_ {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum: boolean;
    minimum?: number;
    exclusiveMinimum: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems: boolean | _;
    items: _ | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties: boolean | _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    /**
     * Core schema meta-schema
     */
    not: _;
    [key: string]: unknown;
}

export type positiveInteger = number;

export type positiveIntegerDefault0 = positiveInteger & any;

export interface _ {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum: boolean;
    minimum?: number;
    exclusiveMinimum: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems: boolean | _;
    items: _ | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties: boolean | _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    /**
     * Core schema meta-schema
     */
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft4 ref.json Test root pointer ref 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "properties": {
      "foo": {
        "$ref": "#",
      },
    },
  },
  "ts": "{
    foo?: _;
}

export interface _ {
    foo?: _;
}
",
}
`;

exports[`draft4 refRemote.json Test base URI change - change folder 1`] = `
{
  "schema": {
    "definitions": {
      "baz": {
        "id": "folder/",
        "items": {
          "$ref": "folderInteger.json",
        },
        "type": "array",
      },
    },
    "id": "http://localhost:1234/scope_change_defs1.json",
    "properties": {
      "list": {
        "$ref": "#/definitions/baz",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: baz;
    [key: string]: unknown;
}

export type baz = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft4 refRemote.json Test base URI change - change folder in subschema 1`] = `
{
  "schema": {
    "definitions": {
      "baz": {
        "definitions": {
          "bar": {
            "items": {
              "$ref": "folderInteger.json",
            },
            "type": "array",
          },
        },
        "id": "folder/",
      },
    },
    "id": "http://localhost:1234/scope_change_defs2.json",
    "properties": {
      "list": {
        "$ref": "#/definitions/baz/definitions/bar",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: bar;
    [key: string]: unknown;
}

export type bar = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft4 refRemote.json Test base URI change 1`] = `
{
  "schema": {
    "id": "http://localhost:1234/",
    "items": {
      "id": "folder/",
      "items": {
        "$ref": "folderInteger.json",
      },
    },
  },
  "ts": "folderInteger_json_[][]

export type folderInteger_json_ = number;
",
}
`;

exports[`draft4 refRemote.json Test fragment within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas.json#/integer",
  },
  "ts": "integer

export type integer = number;
",
}
`;

exports[`draft4 refRemote.json Test ref within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas.json#/refToInteger",
  },
  "ts": "refToInteger

export type refToInteger = integer;

export type integer = number;
",
}
`;

exports[`draft4 refRemote.json Test remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/integer.json",
  },
  "ts": "integer_json_

export type integer_json_ = number;
",
}
`;

exports[`draft4 refRemote.json Test root ref in remote ref 1`] = `
{
  "schema": {
    "id": "http://localhost:1234/object",
    "properties": {
      "name": {
        "$ref": "name.json#/definitions/orNull",
      },
    },
    "type": "object",
  },
  "ts": "{
    name?: orNull;
    [key: string]: unknown;
}

export type orNull = any | _;

export type _ = string;
",
}
`;

exports[`draft4 required.json Test required default validation 1`] = `
{
  "schema": {
    "properties": {
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 required.json Test required validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
    "required": [
      "foo",
    ],
  },
  "ts": "{
    foo: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft4 required.json Test required with escaped characters 1`] = `
{
  "schema": {
    "required": [
      "foo
bar",
      "foo"bar",
      "foo\\bar",
      "foo
bar",
      "foo	bar",
      "foobar",
    ],
  },
  "ts": "any
",
}
`;

exports[`draft4 type.json Test array type matches arrays 1`] = `
{
  "schema": {
    "type": "array",
  },
  "ts": "any
",
}
`;

exports[`draft4 type.json Test boolean type matches booleans 1`] = `
{
  "schema": {
    "type": "boolean",
  },
  "ts": "boolean
",
}
`;

exports[`draft4 type.json Test integer type matches integers 1`] = `
{
  "schema": {
    "type": "integer",
  },
  "ts": "number
",
}
`;

exports[`draft4 type.json Test multiple types can be specified in an array 1`] = `
{
  "schema": {
    "type": [
      "integer",
      "string",
    ],
  },
  "ts": "number | string
",
}
`;

exports[`draft4 type.json Test null type matches only the null object 1`] = `
{
  "schema": {
    "type": "null",
  },
  "ts": "any
",
}
`;

exports[`draft4 type.json Test number type matches numbers 1`] = `
{
  "schema": {
    "type": "number",
  },
  "ts": "number
",
}
`;

exports[`draft4 type.json Test object type matches objects 1`] = `
{
  "schema": {
    "type": "object",
  },
  "ts": "any
",
}
`;

exports[`draft4 type.json Test string type matches strings 1`] = `
{
  "schema": {
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft4 type.json Test type as array with one item 1`] = `
{
  "schema": {
    "type": [
      "string",
    ],
  },
  "ts": "string
",
}
`;

exports[`draft4 type.json Test type: array or object 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
    ],
  },
  "ts": "any[] | object
",
}
`;

exports[`draft4 type.json Test type: array, object or null 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
      "null",
    ],
  },
  "ts": "any[] | object | null
",
}
`;

exports[`draft4 uniqueItems.json Test uniqueItems validation 1`] = `
{
  "schema": {
    "uniqueItems": true,
  },
  "ts": "any
",
}
`;

exports[`draft4 uniqueItems.json Test uniqueItems with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft4 uniqueItems.json Test uniqueItems with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;

exports[`draft4 uniqueItems.json Test uniqueItems=false validation 1`] = `
{
  "schema": {
    "uniqueItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft4 uniqueItems.json Test uniqueItems=false with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft4 uniqueItems.json Test uniqueItems=false with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;

exports[`draft6 additionalItems.json Test additionalItems are allowed by default 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft6 additionalItems.json Test additionalItems as false without items 1`] = `
{
  "schema": {
    "additionalItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft6 additionalItems.json Test additionalItems as schema 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "integer",
    },
    "items": [
      {},
    ],
  },
  "ts": "(any | number)[]
",
}
`;

exports[`draft6 additionalItems.json Test additionalItems should not look in applicators, invalid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
          {
            "type": "string",
          },
        ],
      },
    ],
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft6 additionalItems.json Test additionalItems should not look in applicators, valid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
        ],
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft6 additionalItems.json Test array of items with no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {},
      {},
      {},
    ],
  },
  "ts": "[
    any,
    any,
    any
]
",
}
`;

exports[`draft6 additionalItems.json Test items is schema, no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": {},
  },
  "ts": "any[]
",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties allows a schema which should validate 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: boolean | undefined;
}
",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties are allowed by default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties being false does not allow other properties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^v": {},
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
}
",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties can exist by itself 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties should not look in applicators 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "allOf": [
      {
        "properties": {
          "foo": {},
        },
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 additionalProperties.json Test non-ASCII pattern with additionalProperties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^รก": {},
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 allOf.json Test allOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} & {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 allOf.json Test allOf combined with anyOf, oneOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "multipleOf": 2,
      },
    ],
    "anyOf": [
      {
        "multipleOf": 3,
      },
    ],
    "oneOf": [
      {
        "multipleOf": 5,
      },
    ],
  },
  "ts": "any
",
}
`;

exports[`draft6 allOf.json Test allOf simple types 1`] = `
{
  "schema": {
    "allOf": [
      {
        "maximum": 30,
      },
      {
        "minimum": 20,
      },
    ],
  },
  "ts": "number & number
",
}
`;

exports[`draft6 allOf.json Test allOf with base schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
      {
        "properties": {
          "baz": {
            "type": "null",
          },
        },
        "required": [
          "baz",
        ],
      },
    ],
    "properties": {
      "bar": {
        "type": "integer",
      },
    },
    "required": [
      "bar",
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 allOf.json Test allOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "allOf": [
      false,
      false,
    ],
  },
  "ts": "void & void
",
}
`;

exports[`draft6 allOf.json Test allOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "allOf": [
      true,
      true,
    ],
  },
  "ts": "any & any
",
}
`;

exports[`draft6 allOf.json Test allOf with boolean schemas, some false 1`] = `
{
  "schema": {
    "allOf": [
      true,
      false,
    ],
  },
  "ts": "any & void
",
}
`;

exports[`draft6 allOf.json Test allOf with one empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
    ],
  },
  "ts": "any
",
}
`;

exports[`draft6 allOf.json Test allOf with the first empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {
        "type": "number",
      },
    ],
  },
  "ts": "any & number
",
}
`;

exports[`draft6 allOf.json Test allOf with the last empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number & any
",
}
`;

exports[`draft6 allOf.json Test allOf with two empty schemas 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {},
    ],
  },
  "ts": "any & any
",
}
`;

exports[`draft6 allOf.json Test nested allOf, to check validation semantics 1`] = `
{
  "schema": {
    "allOf": [
      {
        "allOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft6 anyOf.json Test anyOf 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft6 anyOf.json Test anyOf complex types 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 anyOf.json Test anyOf with base schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "maxLength": 2,
      },
      {
        "minLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft6 anyOf.json Test anyOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "anyOf": [
      false,
      false,
    ],
  },
  "ts": "void | void
",
}
`;

exports[`draft6 anyOf.json Test anyOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "anyOf": [
      true,
      true,
    ],
  },
  "ts": "any | any
",
}
`;

exports[`draft6 anyOf.json Test anyOf with boolean schemas, some true 1`] = `
{
  "schema": {
    "anyOf": [
      true,
      false,
    ],
  },
  "ts": "any | void
",
}
`;

exports[`draft6 anyOf.json Test anyOf with one empty schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft6 anyOf.json Test nested anyOf, to check validation semantics 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "anyOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft6 anyOf.json Test nested anyOf, to check validation semantics 2`] = `
{
  "schema": {
    "anyOf": [
      {
        "anyOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft6 boolean_schema.json Test boolean schema 'false' 1`] = `
{
  "schema": false,
  "ts": "void
",
}
`;

exports[`draft6 boolean_schema.json Test boolean schema 'true' 1`] = `
{
  "schema": true,
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const validation 1`] = `
{
  "schema": {
    "const": 2,
  },
  "ts": "2
",
}
`;

exports[`draft6 const.json Test const with [false] does not match [0] 1`] = `
{
  "schema": {
    "const": [
      false,
    ],
  },
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const with [true] does not match [1] 1`] = `
{
  "schema": {
    "const": [
      true,
    ],
  },
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const with {"a": false} does not match {"a": 0}] 1`] = `
{
  "schema": {
    "const": {
      "a": false,
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const with {"a": true} does not match {"a": 1}] 1`] = `
{
  "schema": {
    "const": {
      "a": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const with -2.0 matches integer and float types 1`] = `
{
  "schema": {
    "const": -2,
  },
  "ts": "-2
",
}
`;

exports[`draft6 const.json Test const with 0 does not match other zero-like types 1`] = `
{
  "schema": {
    "const": 0,
  },
  "ts": "0
",
}
`;

exports[`draft6 const.json Test const with 1 does not match true 1`] = `
{
  "schema": {
    "const": 1,
  },
  "ts": "1
",
}
`;

exports[`draft6 const.json Test const with array 1`] = `
{
  "schema": {
    "const": [
      {
        "foo": "bar",
      },
    ],
  },
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const with false does not match 0 1`] = `
{
  "schema": {
    "const": false,
  },
  "ts": "false
",
}
`;

exports[`draft6 const.json Test const with null 1`] = `
{
  "schema": {
    "const": null,
  },
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const with object 1`] = `
{
  "schema": {
    "const": {
      "baz": "bax",
      "foo": "bar",
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 const.json Test const with true does not match 1 1`] = `
{
  "schema": {
    "const": true,
  },
  "ts": "true
",
}
`;

exports[`draft6 const.json Test float and integers are equal up to 64-bit representation limits 1`] = `
{
  "schema": {
    "const": 9007199254740992,
  },
  "ts": "9007199254740992
",
}
`;

exports[`draft6 const.json Test nul characters in strings 1`] = `
{
  "schema": {
    "const": "hello there",
  },
  "ts": ""hello\\0there"
",
}
`;

exports[`draft6 contains.json Test contains keyword validation 1`] = `
{
  "schema": {
    "contains": {
      "minimum": 5,
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 contains.json Test contains keyword with boolean schema false 1`] = `
{
  "schema": {
    "contains": false,
  },
  "ts": "any
",
}
`;

exports[`draft6 contains.json Test contains keyword with boolean schema true 1`] = `
{
  "schema": {
    "contains": true,
  },
  "ts": "any
",
}
`;

exports[`draft6 contains.json Test contains keyword with const keyword 1`] = `
{
  "schema": {
    "contains": {
      "const": 5,
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 contains.json Test items + contains 1`] = `
{
  "schema": {
    "contains": {
      "multipleOf": 3,
    },
    "items": {
      "multipleOf": 2,
    },
  },
  "ts": "any[]
",
}
`;

exports[`draft6 default.json Test invalid string value for default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "default": "bad",
        "minLength": 4,
        "type": "string",
      },
    },
  },
  "ts": "{
    bar: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 default.json Test invalid type for default 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "default": [],
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 definitions.json Test invalid definition 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-06/schema#",
  },
  "ts": "schema_

export interface schema_ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface _ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft6 definitions.json Test valid definition 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-06/schema#",
  },
  "ts": "schema_

export interface schema_ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface _ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft6 dependencies.json Test dependencies 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": [
        "foo",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 dependencies.json Test dependencies with boolean subschemas 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 dependencies.json Test dependencies with empty array 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": [],
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 dependencies.json Test dependencies with escaped characters 1`] = `
{
  "schema": {
    "dependencies": {
      "foo	bar": {
        "minProperties": 4,
      },
      "foo
bar": [
        "foo
bar",
      ],
      "foo"bar": [
        "foo'bar",
      ],
      "foo'bar": {
        "required": [
          "foo"bar",
        ],
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 dependencies.json Test multiple dependencies 1`] = `
{
  "schema": {
    "dependencies": {
      "quux": [
        "foo",
        "bar",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 dependencies.json Test multiple dependencies subschema 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": {
        "properties": {
          "bar": {
            "type": "integer",
          },
          "foo": {
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 enum.json Test enum with 0 does not match false 1`] = `
{
  "schema": {
    "enum": [
      0,
    ],
  },
  "ts": "0
",
}
`;

exports[`draft6 enum.json Test enum with 1 does not match true 1`] = `
{
  "schema": {
    "enum": [
      1,
    ],
  },
  "ts": "1
",
}
`;

exports[`draft6 enum.json Test enum with escaped characters 1`] = `
{
  "schema": {
    "enum": [
      "foo
bar",
      "foo
bar",
    ],
  },
  "ts": ""foo\\nbar" | "foo\\rbar"
",
}
`;

exports[`draft6 enum.json Test enum with false does not match 0 1`] = `
{
  "schema": {
    "enum": [
      false,
    ],
  },
  "ts": "false
",
}
`;

exports[`draft6 enum.json Test enum with true does not match 1 1`] = `
{
  "schema": {
    "enum": [
      true,
    ],
  },
  "ts": "true
",
}
`;

exports[`draft6 enum.json Test enums in properties 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "enum": [
          "bar",
        ],
      },
      "foo": {
        "enum": [
          "foo",
        ],
      },
    },
    "required": [
      "bar",
    ],
    "type": "object",
  },
  "ts": "{
    foo?: "foo";
    bar: "bar";
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 enum.json Test heterogeneous enum validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      "foo",
      [],
      true,
      {
        "foo": 12,
      },
    ],
  },
  "ts": "6 | "foo" | any | true | any
",
}
`;

exports[`draft6 enum.json Test heterogeneous enum-with-null validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      null,
    ],
  },
  "ts": "6 | any
",
}
`;

exports[`draft6 enum.json Test nul characters in strings 1`] = `
{
  "schema": {
    "enum": [
      "hello there",
    ],
  },
  "ts": ""hello\\0there"
",
}
`;

exports[`draft6 enum.json Test simple enum validation 1`] = `
{
  "schema": {
    "enum": [
      1,
      2,
      3,
    ],
  },
  "ts": "1 | 2 | 3
",
}
`;

exports[`draft6 exclusiveMaximum.json Test exclusiveMaximum validation 1`] = `
{
  "schema": {
    "exclusiveMaximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft6 exclusiveMinimum.json Test exclusiveMinimum validation 1`] = `
{
  "schema": {
    "exclusiveMinimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft6 format.json Test validation of IP addresses 1`] = `
{
  "schema": {
    "format": "ipv4",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of IPv6 addresses 1`] = `
{
  "schema": {
    "format": "ipv6",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of JSON pointers 1`] = `
{
  "schema": {
    "format": "json-pointer",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of URI references 1`] = `
{
  "schema": {
    "format": "uri-reference",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of URI templates 1`] = `
{
  "schema": {
    "format": "uri-template",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of URIs 1`] = `
{
  "schema": {
    "format": "uri",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of date-time strings 1`] = `
{
  "schema": {
    "format": "date-time",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of e-mail addresses 1`] = `
{
  "schema": {
    "format": "email",
  },
  "ts": "any
",
}
`;

exports[`draft6 format.json Test validation of hostnames 1`] = `
{
  "schema": {
    "format": "hostname",
  },
  "ts": "any
",
}
`;

exports[`draft6 items.json Test a schema given for items 1`] = `
{
  "schema": {
    "items": {
      "type": "integer",
    },
  },
  "ts": "number[]
",
}
`;

exports[`draft6 items.json Test an array of schemas for items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "type": "string",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft6 items.json Test items and subitems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "definitions": {
      "item": {
        "additionalItems": false,
        "items": [
          {
            "$ref": "#/definitions/sub-item",
          },
          {
            "$ref": "#/definitions/sub-item",
          },
        ],
        "type": "array",
      },
      "sub-item": {
        "required": [
          "foo",
        ],
        "type": "object",
      },
    },
    "items": [
      {
        "$ref": "#/definitions/item",
      },
      {
        "$ref": "#/definitions/item",
      },
      {
        "$ref": "#/definitions/item",
      },
    ],
    "type": "array",
  },
  "ts": "[
    item,
    item,
    item
]

export type item = [
    sub_item,
    sub_item
];

export type sub_item = any;
",
}
`;

exports[`draft6 items.json Test items with boolean schema (false) 1`] = `
{
  "schema": {
    "items": false,
  },
  "ts": "any
",
}
`;

exports[`draft6 items.json Test items with boolean schema (true) 1`] = `
{
  "schema": {
    "items": true,
  },
  "ts": "any[]
",
}
`;

exports[`draft6 items.json Test items with boolean schemas 1`] = `
{
  "schema": {
    "items": [
      true,
      false,
    ],
  },
  "ts": "(any | void)[]
",
}
`;

exports[`draft6 items.json Test nested items 1`] = `
{
  "schema": {
    "items": {
      "items": {
        "items": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "array",
  },
  "ts": "number[][][][]
",
}
`;

exports[`draft6 maxItems.json Test maxItems validation 1`] = `
{
  "schema": {
    "maxItems": 2,
  },
  "ts": "any[]
",
}
`;

exports[`draft6 maxLength.json Test maxLength validation 1`] = `
{
  "schema": {
    "maxLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft6 maxProperties.json Test maxProperties = 0 means the object is empty 1`] = `
{
  "schema": {
    "maxProperties": 0,
  },
  "ts": "any
",
}
`;

exports[`draft6 maxProperties.json Test maxProperties validation 1`] = `
{
  "schema": {
    "maxProperties": 2,
  },
  "ts": "any
",
}
`;

exports[`draft6 maximum.json Test maximum validation 1`] = `
{
  "schema": {
    "maximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft6 maximum.json Test maximum validation with unsigned integer 1`] = `
{
  "schema": {
    "maximum": 300,
  },
  "ts": "number
",
}
`;

exports[`draft6 minItems.json Test minItems validation 1`] = `
{
  "schema": {
    "minItems": 1,
  },
  "ts": "any[]
",
}
`;

exports[`draft6 minLength.json Test minLength validation 1`] = `
{
  "schema": {
    "minLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft6 minProperties.json Test minProperties validation 1`] = `
{
  "schema": {
    "minProperties": 1,
  },
  "ts": "any
",
}
`;

exports[`draft6 minimum.json Test minimum validation 1`] = `
{
  "schema": {
    "minimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft6 minimum.json Test minimum validation with signed integer 1`] = `
{
  "schema": {
    "minimum": -2,
  },
  "ts": "number
",
}
`;

exports[`draft6 multipleOf.json Test by int 1`] = `
{
  "schema": {
    "multipleOf": 2,
  },
  "ts": "any
",
}
`;

exports[`draft6 multipleOf.json Test by number 1`] = `
{
  "schema": {
    "multipleOf": 1.5,
  },
  "ts": "any
",
}
`;

exports[`draft6 multipleOf.json Test by small number 1`] = `
{
  "schema": {
    "multipleOf": 0.0001,
  },
  "ts": "any
",
}
`;

exports[`draft6 not.json Test forbidden property 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "not": {},
      },
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 not.json Test not 1`] = `
{
  "schema": {
    "not": {
      "type": "integer",
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 not.json Test not more complex schema 1`] = `
{
  "schema": {
    "not": {
      "properties": {
        "foo": {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 not.json Test not multiple types 1`] = `
{
  "schema": {
    "not": {
      "type": [
        "integer",
        "boolean",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 not.json Test not with boolean schema false 1`] = `
{
  "schema": {
    "not": false,
  },
  "ts": "any
",
}
`;

exports[`draft6 not.json Test not with boolean schema true 1`] = `
{
  "schema": {
    "not": true,
  },
  "ts": "any
",
}
`;

exports[`draft6 oneOf.json Test nested oneOf, to check validation semantics 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "oneOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft6 oneOf.json Test oneOf 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft6 oneOf.json Test oneOf complex types 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 oneOf.json Test oneOf with base schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "minLength": 2,
      },
      {
        "maxLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "oneOf": [
      false,
      false,
      false,
    ],
  },
  "ts": "void | void | void
",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      true,
      true,
    ],
  },
  "ts": "any | any | any
",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, more than one true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      true,
      false,
    ],
  },
  "ts": "any | any | void
",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, one true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      false,
      false,
    ],
  },
  "ts": "any | void | void
",
}
`;

exports[`draft6 oneOf.json Test oneOf with empty schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft6 oneOf.json Test oneOf with missing optional property 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": true,
          "baz": true,
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": true,
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: any;
    baz?: any;
    [key: string]: unknown;
} | {
    foo: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 oneOf.json Test oneOf with required 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "required": [
          "foo",
          "bar",
        ],
      },
      {
        "required": [
          "foo",
          "baz",
        ],
      },
    ],
    "type": "object",
  },
  "ts": "any | any
",
}
`;

exports[`draft6 pattern.json Test pattern is not anchored 1`] = `
{
  "schema": {
    "pattern": "a+",
  },
  "ts": "string
",
}
`;

exports[`draft6 pattern.json Test pattern validation 1`] = `
{
  "schema": {
    "pattern": "^a*$",
  },
  "ts": "string
",
}
`;

exports[`draft6 patternProperties.json Test multiple simultaneous patternProperties are validated 1`] = `
{
  "schema": {
    "patternProperties": {
      "a*": {
        "type": "integer",
      },
      "aaa*": {
        "maximum": 20,
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 patternProperties.json Test patternProperties validates properties matching a regex 1`] = `
{
  "schema": {
    "patternProperties": {
      "f.*o": {
        "type": "integer",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 patternProperties.json Test patternProperties with boolean schemas 1`] = `
{
  "schema": {
    "patternProperties": {
      "b.*": false,
      "f.*": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 patternProperties.json Test regexes are not anchored by default and are case sensitive 1`] = `
{
  "schema": {
    "patternProperties": {
      "X_": {
        "type": "string",
      },
      "[0-9]{2,}": {
        "type": "boolean",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 properties.json Test object properties validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "type": "string",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 properties.json Test properties with boolean schema 1`] = `
{
  "schema": {
    "properties": {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "{
    foo?: any;
    bar?: void;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 properties.json Test properties with escaped characters 1`] = `
{
  "schema": {
    "properties": {
      "foo	bar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foobar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foo"bar": {
        "type": "number",
      },
      "foo\\bar": {
        "type": "number",
      },
    },
  },
  "ts": "{
    "foo\\nbar"?: number;
    "foo\\"bar"?: number;
    "foo\\\\bar"?: number;
    "foo\\rbar"?: number;
    "foo\\tbar"?: number;
    "foo\\fbar"?: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 properties.json Test properties, patternProperties, additionalProperties interaction 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "integer",
    },
    "patternProperties": {
      "f.o": {
        "minItems": 2,
      },
    },
    "properties": {
      "bar": {
        "type": "array",
      },
      "foo": {
        "maxItems": 3,
        "type": "array",
      },
    },
  },
  "ts": "{
    foo?: any[];
    bar?: any;
    [key: string]: number | undefined;
}
",
}
`;

exports[`draft6 propertyNames.json Test propertyNames validation 1`] = `
{
  "schema": {
    "propertyNames": {
      "maxLength": 3,
    },
  },
  "ts": "any
",
}
`;

exports[`draft6 propertyNames.json Test propertyNames with boolean schema false 1`] = `
{
  "schema": {
    "propertyNames": false,
  },
  "ts": "any
",
}
`;

exports[`draft6 propertyNames.json Test propertyNames with boolean schema true 1`] = `
{
  "schema": {
    "propertyNames": true,
  },
  "ts": "any
",
}
`;

exports[`draft6 ref.json Test $ref to boolean schema false 1`] = `
{
  "schema": {
    "$ref": "#/definitions/bool",
    "definitions": {
      "bool": false,
    },
  },
  "ts": "bool

export type bool = bool;
",
}
`;

exports[`draft6 ref.json Test $ref to boolean schema true 1`] = `
{
  "schema": {
    "$ref": "#/definitions/bool",
    "definitions": {
      "bool": true,
    },
  },
  "ts": "bool

export type bool = any;
",
}
`;

exports[`draft6 ref.json Test Location-independent identifier 1`] = `
{
  "schema": {
    "allOf": [
      {
        "$ref": "#foo",
      },
    ],
    "definitions": {
      "A": {
        "$id": "#foo",
        "type": "integer",
      },
    },
  },
  "ts": "_foo

export type _foo = number;
",
}
`;

exports[`draft6 ref.json Test Location-independent identifier with absolute URI 1`] = `
{
  "schema": {
    "allOf": [
      {
        "$ref": "http://localhost:1234/bar#foo",
      },
    ],
    "definitions": {
      "A": {
        "$id": "http://localhost:1234/bar#foo",
        "type": "integer",
      },
    },
  },
  "ts": "bar_foo

export type bar_foo = number;
",
}
`;

exports[`draft6 ref.json Test Location-independent identifier with base URI change in subschema 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/root",
    "allOf": [
      {
        "$ref": "http://localhost:1234/nested.json#foo",
      },
    ],
    "definitions": {
      "A": {
        "$id": "nested.json",
        "definitions": {
          "B": {
            "$id": "#foo",
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "nested_json_foo

export type nested_json_foo = number;
",
}
`;

exports[`draft6 ref.json Test Recursive references between schemas 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/tree",
    "definitions": {
      "node": {
        "$id": "http://localhost:1234/node",
        "description": "node",
        "properties": {
          "subtree": {
            "$ref": "tree",
          },
          "value": {
            "type": "number",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
    },
    "description": "tree of nodes",
    "properties": {
      "meta": {
        "type": "string",
      },
      "nodes": {
        "items": {
          "$ref": "node",
        },
        "type": "array",
      },
    },
    "required": [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "ts": "{
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}

export interface node_ {
    value: number;
    /**
     * tree of nodes
     */
    subtree?: tree_;
    [key: string]: unknown;
}

export interface tree_ {
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 ref.json Test escaped pointer ref 1`] = `
{
  "schema": {
    "percent%field": {
      "type": "integer",
    },
    "properties": {
      "percent": {
        "$ref": "#/percent%25field",
      },
      "slash": {
        "$ref": "#/slash~1field",
      },
      "tilde": {
        "$ref": "#/tilde~0field",
      },
    },
    "slash/field": {
      "type": "integer",
    },
    "tilde~field": {
      "type": "integer",
    },
  },
  "ts": "{
    tilde?: tilde~0field;
    slash?: slash~1field;
    percent?: percent%25field;
    [key: string]: unknown;
}

export type tilde~0field = number;

export type slash~1field = number;

export type percent%25field = number;
",
}
`;

exports[`draft6 ref.json Test nested refs 1`] = `
{
  "schema": {
    "$ref": "#/definitions/c",
    "definitions": {
      "a": {
        "type": "integer",
      },
      "b": {
        "$ref": "#/definitions/a",
      },
      "c": {
        "$ref": "#/definitions/b",
      },
    },
  },
  "ts": "c

export type c = b;

export type b = a;

export type a = number;
",
}
`;

exports[`draft6 ref.json Test property named $ref that is not a reference 1`] = `
{
  "schema": {
    "properties": {
      "$ref": {
        "type": "string",
      },
    },
  },
  "ts": "{
    $ref?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 ref.json Test property named $ref, containing an actual $ref 1`] = `
{
  "schema": {
    "definitions": {
      "is-string": {
        "type": "string",
      },
    },
    "properties": {
      "$ref": {
        "$ref": "#/definitions/is-string",
      },
    },
  },
  "ts": "{
    $ref?: is_string;
    [key: string]: unknown;
}

export type is_string = string;
",
}
`;

exports[`draft6 ref.json Test ref overrides any sibling keywords 1`] = `
{
  "schema": {
    "definitions": {
      "reffed": {
        "type": "array",
      },
    },
    "properties": {
      "foo": {
        "$ref": "#/definitions/reffed",
        "maxItems": 2,
      },
    },
  },
  "ts": "{
    foo?: reffed;
    [key: string]: unknown;
}

export type reffed = any;
",
}
`;

exports[`draft6 ref.json Test refs with quote 1`] = `
{
  "schema": {
    "definitions": {
      "foo"bar": {
        "type": "number",
      },
    },
    "properties": {
      "foo"bar": {
        "$ref": "#/definitions/foo%22bar",
      },
    },
  },
  "ts": "{
    "foo\\"bar"?: foo%22bar;
    [key: string]: unknown;
}

export type foo%22bar = number;
",
}
`;

exports[`draft6 ref.json Test relative pointer ref to array 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "$ref": "#/items/0",
      },
    ],
  },
  "ts": "(number | 0)[]

export type 0 = number;
",
}
`;

exports[`draft6 ref.json Test relative pointer ref to object 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "$ref": "#/properties/foo",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: foo;
    [key: string]: unknown;
}

export type foo = number;
",
}
`;

exports[`draft6 ref.json Test remote ref, containing refs itself 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-06/schema#",
  },
  "ts": "schema_

export interface schema_ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface _ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft6 ref.json Test root pointer ref 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "properties": {
      "foo": {
        "$ref": "#",
      },
    },
  },
  "ts": "{
    foo?: _;
}

export interface _ {
    foo?: _;
}
",
}
`;

exports[`draft6 refRemote.json Test base URI change - change folder 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/scope_change_defs1.json",
    "definitions": {
      "baz": {
        "$id": "folder/",
        "items": {
          "$ref": "folderInteger.json",
        },
        "type": "array",
      },
    },
    "properties": {
      "list": {
        "$ref": "#/definitions/baz",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: baz;
    [key: string]: unknown;
}

export type baz = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft6 refRemote.json Test base URI change - change folder in subschema 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/scope_change_defs2.json",
    "definitions": {
      "baz": {
        "$id": "folder/",
        "definitions": {
          "bar": {
            "items": {
              "$ref": "folderInteger.json",
            },
            "type": "array",
          },
        },
      },
    },
    "properties": {
      "list": {
        "$ref": "#/definitions/baz/definitions/bar",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: bar;
    [key: string]: unknown;
}

export type bar = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft6 refRemote.json Test base URI change 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/",
    "items": {
      "$id": "folder/",
      "items": {
        "$ref": "folderInteger.json",
      },
    },
  },
  "ts": "folderInteger_json_[][]

export type folderInteger_json_ = number;
",
}
`;

exports[`draft6 refRemote.json Test fragment within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas.json#/integer",
  },
  "ts": "integer

export type integer = number;
",
}
`;

exports[`draft6 refRemote.json Test ref within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas.json#/refToInteger",
  },
  "ts": "refToInteger

export type refToInteger = integer;

export type integer = number;
",
}
`;

exports[`draft6 refRemote.json Test remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/integer.json",
  },
  "ts": "integer_json_

export type integer_json_ = number;
",
}
`;

exports[`draft6 refRemote.json Test root ref in remote ref 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/object",
    "properties": {
      "name": {
        "$ref": "name.json#/definitions/orNull",
      },
    },
    "type": "object",
  },
  "ts": "{
    name?: orNull;
    [key: string]: unknown;
}

export type orNull = any | _;

export type _ = string;
",
}
`;

exports[`draft6 required.json Test required default validation 1`] = `
{
  "schema": {
    "properties": {
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 required.json Test required validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
    "required": [
      "foo",
    ],
  },
  "ts": "{
    foo: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 required.json Test required with empty array 1`] = `
{
  "schema": {
    "properties": {
      "foo": {},
    },
    "required": [],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft6 required.json Test required with escaped characters 1`] = `
{
  "schema": {
    "required": [
      "foo
bar",
      "foo"bar",
      "foo\\bar",
      "foo
bar",
      "foo	bar",
      "foobar",
    ],
  },
  "ts": "any
",
}
`;

exports[`draft6 type.json Test array type matches arrays 1`] = `
{
  "schema": {
    "type": "array",
  },
  "ts": "any
",
}
`;

exports[`draft6 type.json Test boolean type matches booleans 1`] = `
{
  "schema": {
    "type": "boolean",
  },
  "ts": "boolean
",
}
`;

exports[`draft6 type.json Test integer type matches integers 1`] = `
{
  "schema": {
    "type": "integer",
  },
  "ts": "number
",
}
`;

exports[`draft6 type.json Test multiple types can be specified in an array 1`] = `
{
  "schema": {
    "type": [
      "integer",
      "string",
    ],
  },
  "ts": "number | string
",
}
`;

exports[`draft6 type.json Test null type matches only the null object 1`] = `
{
  "schema": {
    "type": "null",
  },
  "ts": "any
",
}
`;

exports[`draft6 type.json Test number type matches numbers 1`] = `
{
  "schema": {
    "type": "number",
  },
  "ts": "number
",
}
`;

exports[`draft6 type.json Test object type matches objects 1`] = `
{
  "schema": {
    "type": "object",
  },
  "ts": "any
",
}
`;

exports[`draft6 type.json Test string type matches strings 1`] = `
{
  "schema": {
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft6 type.json Test type as array with one item 1`] = `
{
  "schema": {
    "type": [
      "string",
    ],
  },
  "ts": "string
",
}
`;

exports[`draft6 type.json Test type: array or object 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
    ],
  },
  "ts": "any[] | object
",
}
`;

exports[`draft6 type.json Test type: array, object or null 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
      "null",
    ],
  },
  "ts": "any[] | object | null
",
}
`;

exports[`draft6 uniqueItems.json Test uniqueItems validation 1`] = `
{
  "schema": {
    "uniqueItems": true,
  },
  "ts": "any
",
}
`;

exports[`draft6 uniqueItems.json Test uniqueItems with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft6 uniqueItems.json Test uniqueItems with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;

exports[`draft6 uniqueItems.json Test uniqueItems=false validation 1`] = `
{
  "schema": {
    "uniqueItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft6 uniqueItems.json Test uniqueItems=false with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft6 uniqueItems.json Test uniqueItems=false with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;

exports[`draft7 additionalItems.json Test additionalItems are allowed by default 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft7 additionalItems.json Test additionalItems as false without items 1`] = `
{
  "schema": {
    "additionalItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft7 additionalItems.json Test additionalItems as schema 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "integer",
    },
    "items": [
      {},
    ],
  },
  "ts": "(any | number)[]
",
}
`;

exports[`draft7 additionalItems.json Test additionalItems should not look in applicators, invalid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
          {
            "type": "string",
          },
        ],
      },
    ],
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft7 additionalItems.json Test additionalItems should not look in applicators, valid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
        ],
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft7 additionalItems.json Test array of items with no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {},
      {},
      {},
    ],
  },
  "ts": "[
    any,
    any,
    any
]
",
}
`;

exports[`draft7 additionalItems.json Test items is schema, no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": {},
  },
  "ts": "any[]
",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties allows a schema which should validate 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: boolean | undefined;
}
",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties are allowed by default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties being false does not allow other properties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^v": {},
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
}
",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties can exist by itself 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties should not look in applicators 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "allOf": [
      {
        "properties": {
          "foo": {},
        },
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 additionalProperties.json Test non-ASCII pattern with additionalProperties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^รก": {},
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 allOf.json Test allOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} & {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 allOf.json Test allOf combined with anyOf, oneOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "multipleOf": 2,
      },
    ],
    "anyOf": [
      {
        "multipleOf": 3,
      },
    ],
    "oneOf": [
      {
        "multipleOf": 5,
      },
    ],
  },
  "ts": "any
",
}
`;

exports[`draft7 allOf.json Test allOf simple types 1`] = `
{
  "schema": {
    "allOf": [
      {
        "maximum": 30,
      },
      {
        "minimum": 20,
      },
    ],
  },
  "ts": "number & number
",
}
`;

exports[`draft7 allOf.json Test allOf with base schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
      {
        "properties": {
          "baz": {
            "type": "null",
          },
        },
        "required": [
          "baz",
        ],
      },
    ],
    "properties": {
      "bar": {
        "type": "integer",
      },
    },
    "required": [
      "bar",
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 allOf.json Test allOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "allOf": [
      false,
      false,
    ],
  },
  "ts": "void & void
",
}
`;

exports[`draft7 allOf.json Test allOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "allOf": [
      true,
      true,
    ],
  },
  "ts": "any & any
",
}
`;

exports[`draft7 allOf.json Test allOf with boolean schemas, some false 1`] = `
{
  "schema": {
    "allOf": [
      true,
      false,
    ],
  },
  "ts": "any & void
",
}
`;

exports[`draft7 allOf.json Test allOf with one empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
    ],
  },
  "ts": "any
",
}
`;

exports[`draft7 allOf.json Test allOf with the first empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {
        "type": "number",
      },
    ],
  },
  "ts": "any & number
",
}
`;

exports[`draft7 allOf.json Test allOf with the last empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number & any
",
}
`;

exports[`draft7 allOf.json Test allOf with two empty schemas 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {},
    ],
  },
  "ts": "any & any
",
}
`;

exports[`draft7 allOf.json Test nested allOf, to check validation semantics 1`] = `
{
  "schema": {
    "allOf": [
      {
        "allOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft7 anyOf.json Test anyOf 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft7 anyOf.json Test anyOf complex types 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 anyOf.json Test anyOf with base schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "maxLength": 2,
      },
      {
        "minLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft7 anyOf.json Test anyOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "anyOf": [
      false,
      false,
    ],
  },
  "ts": "void | void
",
}
`;

exports[`draft7 anyOf.json Test anyOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "anyOf": [
      true,
      true,
    ],
  },
  "ts": "any | any
",
}
`;

exports[`draft7 anyOf.json Test anyOf with boolean schemas, some true 1`] = `
{
  "schema": {
    "anyOf": [
      true,
      false,
    ],
  },
  "ts": "any | void
",
}
`;

exports[`draft7 anyOf.json Test anyOf with one empty schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft7 anyOf.json Test nested anyOf, to check validation semantics 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "anyOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft7 anyOf.json Test nested anyOf, to check validation semantics 2`] = `
{
  "schema": {
    "anyOf": [
      {
        "anyOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft7 boolean_schema.json Test boolean schema 'false' 1`] = `
{
  "schema": false,
  "ts": "void
",
}
`;

exports[`draft7 boolean_schema.json Test boolean schema 'true' 1`] = `
{
  "schema": true,
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const validation 1`] = `
{
  "schema": {
    "const": 2,
  },
  "ts": "2
",
}
`;

exports[`draft7 const.json Test const with [false] does not match [0] 1`] = `
{
  "schema": {
    "const": [
      false,
    ],
  },
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const with [true] does not match [1] 1`] = `
{
  "schema": {
    "const": [
      true,
    ],
  },
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const with {"a": false} does not match {"a": 0}] 1`] = `
{
  "schema": {
    "const": {
      "a": false,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const with {"a": true} does not match {"a": 1}] 1`] = `
{
  "schema": {
    "const": {
      "a": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const with -2.0 matches integer and float types 1`] = `
{
  "schema": {
    "const": -2,
  },
  "ts": "-2
",
}
`;

exports[`draft7 const.json Test const with 0 does not match other zero-like types 1`] = `
{
  "schema": {
    "const": 0,
  },
  "ts": "0
",
}
`;

exports[`draft7 const.json Test const with 1 does not match true 1`] = `
{
  "schema": {
    "const": 1,
  },
  "ts": "1
",
}
`;

exports[`draft7 const.json Test const with array 1`] = `
{
  "schema": {
    "const": [
      {
        "foo": "bar",
      },
    ],
  },
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const with false does not match 0 1`] = `
{
  "schema": {
    "const": false,
  },
  "ts": "false
",
}
`;

exports[`draft7 const.json Test const with null 1`] = `
{
  "schema": {
    "const": null,
  },
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const with object 1`] = `
{
  "schema": {
    "const": {
      "baz": "bax",
      "foo": "bar",
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 const.json Test const with true does not match 1 1`] = `
{
  "schema": {
    "const": true,
  },
  "ts": "true
",
}
`;

exports[`draft7 const.json Test float and integers are equal up to 64-bit representation limits 1`] = `
{
  "schema": {
    "const": 9007199254740992,
  },
  "ts": "9007199254740992
",
}
`;

exports[`draft7 const.json Test nul characters in strings 1`] = `
{
  "schema": {
    "const": "hello there",
  },
  "ts": ""hello\\0there"
",
}
`;

exports[`draft7 contains.json Test contains keyword validation 1`] = `
{
  "schema": {
    "contains": {
      "minimum": 5,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 contains.json Test contains keyword with boolean schema false 1`] = `
{
  "schema": {
    "contains": false,
  },
  "ts": "any
",
}
`;

exports[`draft7 contains.json Test contains keyword with boolean schema true 1`] = `
{
  "schema": {
    "contains": true,
  },
  "ts": "any
",
}
`;

exports[`draft7 contains.json Test contains keyword with const keyword 1`] = `
{
  "schema": {
    "contains": {
      "const": 5,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 contains.json Test items + contains 1`] = `
{
  "schema": {
    "contains": {
      "multipleOf": 3,
    },
    "items": {
      "multipleOf": 2,
    },
  },
  "ts": "any[]
",
}
`;

exports[`draft7 default.json Test invalid string value for default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "default": "bad",
        "minLength": 4,
        "type": "string",
      },
    },
  },
  "ts": "{
    bar: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 default.json Test invalid type for default 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "default": [],
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 definitions.json Test invalid definition 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-07/schema#",
  },
  "ts": "schema_

export interface schema_ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if: _;
    then: _;
    else: _;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface _ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if: _;
    then: _;
    else: _;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft7 definitions.json Test valid definition 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-07/schema#",
  },
  "ts": "schema_

export interface schema_ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if: _;
    then: _;
    else: _;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface _ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if: _;
    then: _;
    else: _;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft7 dependencies.json Test dependencies 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": [
        "foo",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 dependencies.json Test dependencies with boolean subschemas 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 dependencies.json Test dependencies with empty array 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": [],
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 dependencies.json Test dependencies with escaped characters 1`] = `
{
  "schema": {
    "dependencies": {
      "foo	bar": {
        "minProperties": 4,
      },
      "foo
bar": [
        "foo
bar",
      ],
      "foo"bar": [
        "foo'bar",
      ],
      "foo'bar": {
        "required": [
          "foo"bar",
        ],
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 dependencies.json Test multiple dependencies 1`] = `
{
  "schema": {
    "dependencies": {
      "quux": [
        "foo",
        "bar",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 dependencies.json Test multiple dependencies subschema 1`] = `
{
  "schema": {
    "dependencies": {
      "bar": {
        "properties": {
          "bar": {
            "type": "integer",
          },
          "foo": {
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 enum.json Test enum with 0 does not match false 1`] = `
{
  "schema": {
    "enum": [
      0,
    ],
  },
  "ts": "0
",
}
`;

exports[`draft7 enum.json Test enum with 1 does not match true 1`] = `
{
  "schema": {
    "enum": [
      1,
    ],
  },
  "ts": "1
",
}
`;

exports[`draft7 enum.json Test enum with escaped characters 1`] = `
{
  "schema": {
    "enum": [
      "foo
bar",
      "foo
bar",
    ],
  },
  "ts": ""foo\\nbar" | "foo\\rbar"
",
}
`;

exports[`draft7 enum.json Test enum with false does not match 0 1`] = `
{
  "schema": {
    "enum": [
      false,
    ],
  },
  "ts": "false
",
}
`;

exports[`draft7 enum.json Test enum with true does not match 1 1`] = `
{
  "schema": {
    "enum": [
      true,
    ],
  },
  "ts": "true
",
}
`;

exports[`draft7 enum.json Test enums in properties 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "enum": [
          "bar",
        ],
      },
      "foo": {
        "enum": [
          "foo",
        ],
      },
    },
    "required": [
      "bar",
    ],
    "type": "object",
  },
  "ts": "{
    foo?: "foo";
    bar: "bar";
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 enum.json Test heterogeneous enum validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      "foo",
      [],
      true,
      {
        "foo": 12,
      },
    ],
  },
  "ts": "6 | "foo" | any | true | any
",
}
`;

exports[`draft7 enum.json Test heterogeneous enum-with-null validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      null,
    ],
  },
  "ts": "6 | any
",
}
`;

exports[`draft7 enum.json Test nul characters in strings 1`] = `
{
  "schema": {
    "enum": [
      "hello there",
    ],
  },
  "ts": ""hello\\0there"
",
}
`;

exports[`draft7 enum.json Test simple enum validation 1`] = `
{
  "schema": {
    "enum": [
      1,
      2,
      3,
    ],
  },
  "ts": "1 | 2 | 3
",
}
`;

exports[`draft7 exclusiveMaximum.json Test exclusiveMaximum validation 1`] = `
{
  "schema": {
    "exclusiveMaximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft7 exclusiveMinimum.json Test exclusiveMinimum validation 1`] = `
{
  "schema": {
    "exclusiveMinimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft7 format.json Test validation of IDN e-mail addresses 1`] = `
{
  "schema": {
    "format": "idn-email",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of IDN hostnames 1`] = `
{
  "schema": {
    "format": "idn-hostname",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of IP addresses 1`] = `
{
  "schema": {
    "format": "ipv4",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of IPv6 addresses 1`] = `
{
  "schema": {
    "format": "ipv6",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of IRI references 1`] = `
{
  "schema": {
    "format": "iri-reference",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of IRIs 1`] = `
{
  "schema": {
    "format": "iri",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of JSON pointers 1`] = `
{
  "schema": {
    "format": "json-pointer",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of URI references 1`] = `
{
  "schema": {
    "format": "uri-reference",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of URI templates 1`] = `
{
  "schema": {
    "format": "uri-template",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of URIs 1`] = `
{
  "schema": {
    "format": "uri",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of date strings 1`] = `
{
  "schema": {
    "format": "date",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of date-time strings 1`] = `
{
  "schema": {
    "format": "date-time",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of e-mail addresses 1`] = `
{
  "schema": {
    "format": "email",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of hostnames 1`] = `
{
  "schema": {
    "format": "hostname",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of regexes 1`] = `
{
  "schema": {
    "format": "regex",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of relative JSON pointers 1`] = `
{
  "schema": {
    "format": "relative-json-pointer",
  },
  "ts": "any
",
}
`;

exports[`draft7 format.json Test validation of time strings 1`] = `
{
  "schema": {
    "format": "time",
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test if and else without then 1`] = `
{
  "schema": {
    "else": {
      "multipleOf": 2,
    },
    "if": {
      "exclusiveMaximum": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test if and then without else 1`] = `
{
  "schema": {
    "if": {
      "exclusiveMaximum": 0,
    },
    "then": {
      "minimum": -10,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test if with boolean schema false 1`] = `
{
  "schema": {
    "else": {
      "const": "else",
    },
    "if": false,
    "then": {
      "const": "then",
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test if with boolean schema true 1`] = `
{
  "schema": {
    "else": {
      "const": "else",
    },
    "if": true,
    "then": {
      "const": "then",
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test ignore else without if 1`] = `
{
  "schema": {
    "else": {
      "const": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test ignore if without then or else 1`] = `
{
  "schema": {
    "if": {
      "const": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test ignore then without if 1`] = `
{
  "schema": {
    "then": {
      "const": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 if-then-else.json Test non-interference across combined schemas 1`] = `
{
  "schema": {
    "allOf": [
      {
        "if": {
          "exclusiveMaximum": 0,
        },
      },
      {
        "then": {
          "minimum": -10,
        },
      },
      {
        "else": {
          "multipleOf": 2,
        },
      },
    ],
  },
  "ts": "any & any & any
",
}
`;

exports[`draft7 if-then-else.json Test validate against correct branch, then vs else 1`] = `
{
  "schema": {
    "else": {
      "multipleOf": 2,
    },
    "if": {
      "exclusiveMaximum": 0,
    },
    "then": {
      "minimum": -10,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 items.json Test a schema given for items 1`] = `
{
  "schema": {
    "items": {
      "type": "integer",
    },
  },
  "ts": "number[]
",
}
`;

exports[`draft7 items.json Test an array of schemas for items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "type": "string",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft7 items.json Test items and subitems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "definitions": {
      "item": {
        "additionalItems": false,
        "items": [
          {
            "$ref": "#/definitions/sub-item",
          },
          {
            "$ref": "#/definitions/sub-item",
          },
        ],
        "type": "array",
      },
      "sub-item": {
        "required": [
          "foo",
        ],
        "type": "object",
      },
    },
    "items": [
      {
        "$ref": "#/definitions/item",
      },
      {
        "$ref": "#/definitions/item",
      },
      {
        "$ref": "#/definitions/item",
      },
    ],
    "type": "array",
  },
  "ts": "[
    item,
    item,
    item
]

export type item = [
    sub_item,
    sub_item
];

export type sub_item = any;
",
}
`;

exports[`draft7 items.json Test items with boolean schema (false) 1`] = `
{
  "schema": {
    "items": false,
  },
  "ts": "any
",
}
`;

exports[`draft7 items.json Test items with boolean schema (true) 1`] = `
{
  "schema": {
    "items": true,
  },
  "ts": "any[]
",
}
`;

exports[`draft7 items.json Test items with boolean schemas 1`] = `
{
  "schema": {
    "items": [
      true,
      false,
    ],
  },
  "ts": "(any | void)[]
",
}
`;

exports[`draft7 items.json Test nested items 1`] = `
{
  "schema": {
    "items": {
      "items": {
        "items": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "array",
  },
  "ts": "number[][][][]
",
}
`;

exports[`draft7 maxItems.json Test maxItems validation 1`] = `
{
  "schema": {
    "maxItems": 2,
  },
  "ts": "any[]
",
}
`;

exports[`draft7 maxLength.json Test maxLength validation 1`] = `
{
  "schema": {
    "maxLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft7 maxProperties.json Test maxProperties = 0 means the object is empty 1`] = `
{
  "schema": {
    "maxProperties": 0,
  },
  "ts": "any
",
}
`;

exports[`draft7 maxProperties.json Test maxProperties validation 1`] = `
{
  "schema": {
    "maxProperties": 2,
  },
  "ts": "any
",
}
`;

exports[`draft7 maximum.json Test maximum validation 1`] = `
{
  "schema": {
    "maximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft7 maximum.json Test maximum validation with unsigned integer 1`] = `
{
  "schema": {
    "maximum": 300,
  },
  "ts": "number
",
}
`;

exports[`draft7 minItems.json Test minItems validation 1`] = `
{
  "schema": {
    "minItems": 1,
  },
  "ts": "any[]
",
}
`;

exports[`draft7 minLength.json Test minLength validation 1`] = `
{
  "schema": {
    "minLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft7 minProperties.json Test minProperties validation 1`] = `
{
  "schema": {
    "minProperties": 1,
  },
  "ts": "any
",
}
`;

exports[`draft7 minimum.json Test minimum validation 1`] = `
{
  "schema": {
    "minimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft7 minimum.json Test minimum validation with signed integer 1`] = `
{
  "schema": {
    "minimum": -2,
  },
  "ts": "number
",
}
`;

exports[`draft7 multipleOf.json Test by int 1`] = `
{
  "schema": {
    "multipleOf": 2,
  },
  "ts": "any
",
}
`;

exports[`draft7 multipleOf.json Test by number 1`] = `
{
  "schema": {
    "multipleOf": 1.5,
  },
  "ts": "any
",
}
`;

exports[`draft7 multipleOf.json Test by small number 1`] = `
{
  "schema": {
    "multipleOf": 0.0001,
  },
  "ts": "any
",
}
`;

exports[`draft7 not.json Test forbidden property 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "not": {},
      },
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 not.json Test not 1`] = `
{
  "schema": {
    "not": {
      "type": "integer",
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 not.json Test not more complex schema 1`] = `
{
  "schema": {
    "not": {
      "properties": {
        "foo": {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 not.json Test not multiple types 1`] = `
{
  "schema": {
    "not": {
      "type": [
        "integer",
        "boolean",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 not.json Test not with boolean schema false 1`] = `
{
  "schema": {
    "not": false,
  },
  "ts": "any
",
}
`;

exports[`draft7 not.json Test not with boolean schema true 1`] = `
{
  "schema": {
    "not": true,
  },
  "ts": "any
",
}
`;

exports[`draft7 oneOf.json Test nested oneOf, to check validation semantics 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "oneOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft7 oneOf.json Test oneOf 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft7 oneOf.json Test oneOf complex types 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 oneOf.json Test oneOf with base schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "minLength": 2,
      },
      {
        "maxLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "oneOf": [
      false,
      false,
      false,
    ],
  },
  "ts": "void | void | void
",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      true,
      true,
    ],
  },
  "ts": "any | any | any
",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, more than one true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      true,
      false,
    ],
  },
  "ts": "any | any | void
",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, one true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      false,
      false,
    ],
  },
  "ts": "any | void | void
",
}
`;

exports[`draft7 oneOf.json Test oneOf with empty schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft7 oneOf.json Test oneOf with missing optional property 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": true,
          "baz": true,
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": true,
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: any;
    baz?: any;
    [key: string]: unknown;
} | {
    foo: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 oneOf.json Test oneOf with required 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "required": [
          "foo",
          "bar",
        ],
      },
      {
        "required": [
          "foo",
          "baz",
        ],
      },
    ],
    "type": "object",
  },
  "ts": "any | any
",
}
`;

exports[`draft7 pattern.json Test pattern is not anchored 1`] = `
{
  "schema": {
    "pattern": "a+",
  },
  "ts": "string
",
}
`;

exports[`draft7 pattern.json Test pattern validation 1`] = `
{
  "schema": {
    "pattern": "^a*$",
  },
  "ts": "string
",
}
`;

exports[`draft7 patternProperties.json Test multiple simultaneous patternProperties are validated 1`] = `
{
  "schema": {
    "patternProperties": {
      "a*": {
        "type": "integer",
      },
      "aaa*": {
        "maximum": 20,
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 patternProperties.json Test patternProperties validates properties matching a regex 1`] = `
{
  "schema": {
    "patternProperties": {
      "f.*o": {
        "type": "integer",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 patternProperties.json Test patternProperties with boolean schemas 1`] = `
{
  "schema": {
    "patternProperties": {
      "b.*": false,
      "f.*": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 patternProperties.json Test regexes are not anchored by default and are case sensitive 1`] = `
{
  "schema": {
    "patternProperties": {
      "X_": {
        "type": "string",
      },
      "[0-9]{2,}": {
        "type": "boolean",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 properties.json Test object properties validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "type": "string",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 properties.json Test properties with boolean schema 1`] = `
{
  "schema": {
    "properties": {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "{
    foo?: any;
    bar?: void;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 properties.json Test properties with escaped characters 1`] = `
{
  "schema": {
    "properties": {
      "foo	bar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foobar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foo"bar": {
        "type": "number",
      },
      "foo\\bar": {
        "type": "number",
      },
    },
  },
  "ts": "{
    "foo\\nbar"?: number;
    "foo\\"bar"?: number;
    "foo\\\\bar"?: number;
    "foo\\rbar"?: number;
    "foo\\tbar"?: number;
    "foo\\fbar"?: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 properties.json Test properties, patternProperties, additionalProperties interaction 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "integer",
    },
    "patternProperties": {
      "f.o": {
        "minItems": 2,
      },
    },
    "properties": {
      "bar": {
        "type": "array",
      },
      "foo": {
        "maxItems": 3,
        "type": "array",
      },
    },
  },
  "ts": "{
    foo?: any[];
    bar?: any;
    [key: string]: number | undefined;
}
",
}
`;

exports[`draft7 propertyNames.json Test propertyNames validation 1`] = `
{
  "schema": {
    "propertyNames": {
      "maxLength": 3,
    },
  },
  "ts": "any
",
}
`;

exports[`draft7 propertyNames.json Test propertyNames with boolean schema false 1`] = `
{
  "schema": {
    "propertyNames": false,
  },
  "ts": "any
",
}
`;

exports[`draft7 propertyNames.json Test propertyNames with boolean schema true 1`] = `
{
  "schema": {
    "propertyNames": true,
  },
  "ts": "any
",
}
`;

exports[`draft7 ref.json Test $ref to boolean schema false 1`] = `
{
  "schema": {
    "$ref": "#/definitions/bool",
    "definitions": {
      "bool": false,
    },
  },
  "ts": "bool

export type bool = bool;
",
}
`;

exports[`draft7 ref.json Test $ref to boolean schema true 1`] = `
{
  "schema": {
    "$ref": "#/definitions/bool",
    "definitions": {
      "bool": true,
    },
  },
  "ts": "bool

export type bool = any;
",
}
`;

exports[`draft7 ref.json Test Location-independent identifier 1`] = `
{
  "schema": {
    "allOf": [
      {
        "$ref": "#foo",
      },
    ],
    "definitions": {
      "A": {
        "$id": "#foo",
        "type": "integer",
      },
    },
  },
  "ts": "_foo

export type _foo = number;
",
}
`;

exports[`draft7 ref.json Test Location-independent identifier with absolute URI 1`] = `
{
  "schema": {
    "allOf": [
      {
        "$ref": "http://localhost:1234/bar#foo",
      },
    ],
    "definitions": {
      "A": {
        "$id": "http://localhost:1234/bar#foo",
        "type": "integer",
      },
    },
  },
  "ts": "bar_foo

export type bar_foo = number;
",
}
`;

exports[`draft7 ref.json Test Location-independent identifier with base URI change in subschema 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/root",
    "allOf": [
      {
        "$ref": "http://localhost:1234/nested.json#foo",
      },
    ],
    "definitions": {
      "A": {
        "$id": "nested.json",
        "definitions": {
          "B": {
            "$id": "#foo",
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "nested_json_foo

export type nested_json_foo = number;
",
}
`;

exports[`draft7 ref.json Test Recursive references between schemas 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/tree",
    "definitions": {
      "node": {
        "$id": "http://localhost:1234/node",
        "description": "node",
        "properties": {
          "subtree": {
            "$ref": "tree",
          },
          "value": {
            "type": "number",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
    },
    "description": "tree of nodes",
    "properties": {
      "meta": {
        "type": "string",
      },
      "nodes": {
        "items": {
          "$ref": "node",
        },
        "type": "array",
      },
    },
    "required": [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "ts": "{
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}

export interface node_ {
    value: number;
    /**
     * tree of nodes
     */
    subtree?: tree_;
    [key: string]: unknown;
}

export interface tree_ {
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 ref.json Test escaped pointer ref 1`] = `
{
  "schema": {
    "percent%field": {
      "type": "integer",
    },
    "properties": {
      "percent": {
        "$ref": "#/percent%25field",
      },
      "slash": {
        "$ref": "#/slash~1field",
      },
      "tilde": {
        "$ref": "#/tilde~0field",
      },
    },
    "slash/field": {
      "type": "integer",
    },
    "tilde~field": {
      "type": "integer",
    },
  },
  "ts": "{
    tilde?: tilde~0field;
    slash?: slash~1field;
    percent?: percent%25field;
    [key: string]: unknown;
}

export type tilde~0field = number;

export type slash~1field = number;

export type percent%25field = number;
",
}
`;

exports[`draft7 ref.json Test nested refs 1`] = `
{
  "schema": {
    "$ref": "#/definitions/c",
    "definitions": {
      "a": {
        "type": "integer",
      },
      "b": {
        "$ref": "#/definitions/a",
      },
      "c": {
        "$ref": "#/definitions/b",
      },
    },
  },
  "ts": "c

export type c = b;

export type b = a;

export type a = number;
",
}
`;

exports[`draft7 ref.json Test property named $ref that is not a reference 1`] = `
{
  "schema": {
    "properties": {
      "$ref": {
        "type": "string",
      },
    },
  },
  "ts": "{
    $ref?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 ref.json Test property named $ref, containing an actual $ref 1`] = `
{
  "schema": {
    "definitions": {
      "is-string": {
        "type": "string",
      },
    },
    "properties": {
      "$ref": {
        "$ref": "#/definitions/is-string",
      },
    },
  },
  "ts": "{
    $ref?: is_string;
    [key: string]: unknown;
}

export type is_string = string;
",
}
`;

exports[`draft7 ref.json Test ref overrides any sibling keywords 1`] = `
{
  "schema": {
    "definitions": {
      "reffed": {
        "type": "array",
      },
    },
    "properties": {
      "foo": {
        "$ref": "#/definitions/reffed",
        "maxItems": 2,
      },
    },
  },
  "ts": "{
    foo?: reffed;
    [key: string]: unknown;
}

export type reffed = any;
",
}
`;

exports[`draft7 ref.json Test refs with quote 1`] = `
{
  "schema": {
    "definitions": {
      "foo"bar": {
        "type": "number",
      },
    },
    "properties": {
      "foo"bar": {
        "$ref": "#/definitions/foo%22bar",
      },
    },
  },
  "ts": "{
    "foo\\"bar"?: foo%22bar;
    [key: string]: unknown;
}

export type foo%22bar = number;
",
}
`;

exports[`draft7 ref.json Test relative pointer ref to array 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "$ref": "#/items/0",
      },
    ],
  },
  "ts": "(number | 0)[]

export type 0 = number;
",
}
`;

exports[`draft7 ref.json Test relative pointer ref to object 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "$ref": "#/properties/foo",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: foo;
    [key: string]: unknown;
}

export type foo = number;
",
}
`;

exports[`draft7 ref.json Test remote ref, containing refs itself 1`] = `
{
  "schema": {
    "$ref": "http://json-schema.org/draft-07/schema#",
  },
  "ts": "schema_

export interface schema_ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if: _;
    then: _;
    else: _;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface _ {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems: _;
    items: _ | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems: boolean;
    contains: _;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required: stringArray;
    additionalProperties: _;
    definitions: any;
    properties: any;
    patternProperties: any;
    dependencies?: any;
    propertyNames: _;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if: _;
    then: _;
    else: _;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not: _;
    [key: string]: unknown;
}

export type schemaArray = _[];

export type stringArray = string[];

export type simpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
",
}
`;

exports[`draft7 ref.json Test root pointer ref 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "properties": {
      "foo": {
        "$ref": "#",
      },
    },
  },
  "ts": "{
    foo?: _;
}

export interface _ {
    foo?: _;
}
",
}
`;

exports[`draft7 refRemote.json Test base URI change - change folder 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/scope_change_defs1.json",
    "definitions": {
      "baz": {
        "$id": "folder/",
        "items": {
          "$ref": "folderInteger.json",
        },
        "type": "array",
      },
    },
    "properties": {
      "list": {
        "$ref": "#/definitions/baz",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: baz;
    [key: string]: unknown;
}

export type baz = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft7 refRemote.json Test base URI change - change folder in subschema 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/scope_change_defs2.json",
    "definitions": {
      "baz": {
        "$id": "folder/",
        "definitions": {
          "bar": {
            "items": {
              "$ref": "folderInteger.json",
            },
            "type": "array",
          },
        },
      },
    },
    "properties": {
      "list": {
        "$ref": "#/definitions/baz/definitions/bar",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: bar;
    [key: string]: unknown;
}

export type bar = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft7 refRemote.json Test base URI change 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/",
    "items": {
      "$id": "folder/",
      "items": {
        "$ref": "folderInteger.json",
      },
    },
  },
  "ts": "folderInteger_json_[][]

export type folderInteger_json_ = number;
",
}
`;

exports[`draft7 refRemote.json Test fragment within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas.json#/integer",
  },
  "ts": "integer

export type integer = number;
",
}
`;

exports[`draft7 refRemote.json Test ref within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas.json#/refToInteger",
  },
  "ts": "refToInteger

export type refToInteger = integer;

export type integer = number;
",
}
`;

exports[`draft7 refRemote.json Test remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/integer.json",
  },
  "ts": "integer_json_

export type integer_json_ = number;
",
}
`;

exports[`draft7 refRemote.json Test root ref in remote ref 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/object",
    "properties": {
      "name": {
        "$ref": "name.json#/definitions/orNull",
      },
    },
    "type": "object",
  },
  "ts": "{
    name?: orNull;
    [key: string]: unknown;
}

export type orNull = any | _;

export type _ = string;
",
}
`;

exports[`draft7 required.json Test required default validation 1`] = `
{
  "schema": {
    "properties": {
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 required.json Test required validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
    "required": [
      "foo",
    ],
  },
  "ts": "{
    foo: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 required.json Test required with empty array 1`] = `
{
  "schema": {
    "properties": {
      "foo": {},
    },
    "required": [],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft7 required.json Test required with escaped characters 1`] = `
{
  "schema": {
    "required": [
      "foo
bar",
      "foo"bar",
      "foo\\bar",
      "foo
bar",
      "foo	bar",
      "foobar",
    ],
  },
  "ts": "any
",
}
`;

exports[`draft7 type.json Test array type matches arrays 1`] = `
{
  "schema": {
    "type": "array",
  },
  "ts": "any
",
}
`;

exports[`draft7 type.json Test boolean type matches booleans 1`] = `
{
  "schema": {
    "type": "boolean",
  },
  "ts": "boolean
",
}
`;

exports[`draft7 type.json Test integer type matches integers 1`] = `
{
  "schema": {
    "type": "integer",
  },
  "ts": "number
",
}
`;

exports[`draft7 type.json Test multiple types can be specified in an array 1`] = `
{
  "schema": {
    "type": [
      "integer",
      "string",
    ],
  },
  "ts": "number | string
",
}
`;

exports[`draft7 type.json Test null type matches only the null object 1`] = `
{
  "schema": {
    "type": "null",
  },
  "ts": "any
",
}
`;

exports[`draft7 type.json Test number type matches numbers 1`] = `
{
  "schema": {
    "type": "number",
  },
  "ts": "number
",
}
`;

exports[`draft7 type.json Test object type matches objects 1`] = `
{
  "schema": {
    "type": "object",
  },
  "ts": "any
",
}
`;

exports[`draft7 type.json Test string type matches strings 1`] = `
{
  "schema": {
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft7 type.json Test type as array with one item 1`] = `
{
  "schema": {
    "type": [
      "string",
    ],
  },
  "ts": "string
",
}
`;

exports[`draft7 type.json Test type: array or object 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
    ],
  },
  "ts": "any[] | object
",
}
`;

exports[`draft7 type.json Test type: array, object or null 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
      "null",
    ],
  },
  "ts": "any[] | object | null
",
}
`;

exports[`draft7 uniqueItems.json Test uniqueItems validation 1`] = `
{
  "schema": {
    "uniqueItems": true,
  },
  "ts": "any
",
}
`;

exports[`draft7 uniqueItems.json Test uniqueItems with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft7 uniqueItems.json Test uniqueItems with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;

exports[`draft7 uniqueItems.json Test uniqueItems=false validation 1`] = `
{
  "schema": {
    "uniqueItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft7 uniqueItems.json Test uniqueItems=false with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft7 uniqueItems.json Test uniqueItems=false with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;

exports[`draft2019-09 additionalItems.json Test additionalItems are allowed by default 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft2019-09 additionalItems.json Test additionalItems as false without items 1`] = `
{
  "schema": {
    "additionalItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 additionalItems.json Test additionalItems as schema 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "integer",
    },
    "items": [
      {},
    ],
  },
  "ts": "(any | number)[]
",
}
`;

exports[`draft2019-09 additionalItems.json Test additionalItems should not look in applicators, invalid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
          {
            "type": "string",
          },
        ],
      },
    ],
    "items": [
      {
        "type": "integer",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft2019-09 additionalItems.json Test additionalItems should not look in applicators, valid case 1`] = `
{
  "schema": {
    "additionalItems": {
      "type": "boolean",
    },
    "allOf": [
      {
        "items": [
          {
            "type": "integer",
          },
        ],
      },
    ],
  },
  "ts": "(number)[]
",
}
`;

exports[`draft2019-09 additionalItems.json Test array of items with no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {},
      {},
      {},
    ],
  },
  "ts": "[
    any,
    any,
    any
]
",
}
`;

exports[`draft2019-09 additionalItems.json Test items is schema, no additionalItems 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": {},
  },
  "ts": "any[]
",
}
`;

exports[`draft2019-09 additionalProperties.json Test additionalProperties allows a schema which should validate 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: boolean | undefined;
}
",
}
`;

exports[`draft2019-09 additionalProperties.json Test additionalProperties are allowed by default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 additionalProperties.json Test additionalProperties being false does not allow other properties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^v": {},
    },
    "properties": {
      "bar": {},
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
}
",
}
`;

exports[`draft2019-09 additionalProperties.json Test additionalProperties can exist by itself 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 additionalProperties.json Test additionalProperties should not look in applicators 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "boolean",
    },
    "allOf": [
      {
        "properties": {
          "foo": {},
        },
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 additionalProperties.json Test non-ASCII pattern with additionalProperties 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "patternProperties": {
      "^รก": {},
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 allOf.json Test allOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} & {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 allOf.json Test allOf combined with anyOf, oneOf 1`] = `
{
  "schema": {
    "allOf": [
      {
        "multipleOf": 2,
      },
    ],
    "anyOf": [
      {
        "multipleOf": 3,
      },
    ],
    "oneOf": [
      {
        "multipleOf": 5,
      },
    ],
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 allOf.json Test allOf simple types 1`] = `
{
  "schema": {
    "allOf": [
      {
        "maximum": 30,
      },
      {
        "minimum": 20,
      },
    ],
  },
  "ts": "number & number
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with base schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
      {
        "properties": {
          "baz": {
            "type": "null",
          },
        },
        "required": [
          "baz",
        ],
      },
    ],
    "properties": {
      "bar": {
        "type": "integer",
      },
    },
    "required": [
      "bar",
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "allOf": [
      false,
      false,
    ],
  },
  "ts": "void & void
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "allOf": [
      true,
      true,
    ],
  },
  "ts": "any & any
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with boolean schemas, some false 1`] = `
{
  "schema": {
    "allOf": [
      true,
      false,
    ],
  },
  "ts": "any & void
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with one empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
    ],
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with the first empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {
        "type": "number",
      },
    ],
  },
  "ts": "any & number
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with the last empty schema 1`] = `
{
  "schema": {
    "allOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number & any
",
}
`;

exports[`draft2019-09 allOf.json Test allOf with two empty schemas 1`] = `
{
  "schema": {
    "allOf": [
      {},
      {},
    ],
  },
  "ts": "any & any
",
}
`;

exports[`draft2019-09 allOf.json Test nested allOf, to check validation semantics 1`] = `
{
  "schema": {
    "allOf": [
      {
        "allOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft2019-09 anchor.json Test Location-independent identifier 1`] = `
{
  "schema": {
    "$defs": {
      "A": {
        "$anchor": "foo",
        "type": "integer",
      },
    },
    "$ref": "#foo",
  },
  "ts": "_foo

export type _foo = number;
",
}
`;

exports[`draft2019-09 anchor.json Test Location-independent identifier with absolute URI 1`] = `
{
  "schema": {
    "$defs": {
      "A": {
        "$anchor": "foo",
        "$id": "http://localhost:1234/bar",
        "type": "integer",
      },
    },
    "$ref": "http://localhost:1234/bar#foo",
  },
  "ts": "bar_foo

export type bar_foo = number;
",
}
`;

exports[`draft2019-09 anchor.json Test Location-independent identifier with base URI change in subschema 1`] = `
{
  "schema": {
    "$defs": {
      "A": {
        "$defs": {
          "B": {
            "$anchor": "foo",
            "type": "integer",
          },
        },
        "$id": "nested.json",
      },
    },
    "$id": "http://localhost:1234/root",
    "$ref": "http://localhost:1234/nested.json#foo",
  },
  "ts": "nested_json_foo

export type nested_json_foo = number;
",
}
`;

exports[`draft2019-09 anyOf.json Test anyOf 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft2019-09 anyOf.json Test anyOf complex types 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 anyOf.json Test anyOf with base schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "maxLength": 2,
      },
      {
        "minLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 anyOf.json Test anyOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "anyOf": [
      false,
      false,
    ],
  },
  "ts": "void | void
",
}
`;

exports[`draft2019-09 anyOf.json Test anyOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "anyOf": [
      true,
      true,
    ],
  },
  "ts": "any | any
",
}
`;

exports[`draft2019-09 anyOf.json Test anyOf with boolean schemas, some true 1`] = `
{
  "schema": {
    "anyOf": [
      true,
      false,
    ],
  },
  "ts": "any | void
",
}
`;

exports[`draft2019-09 anyOf.json Test anyOf with one empty schema 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft2019-09 anyOf.json Test nested anyOf, to check validation semantics 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "anyOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft2019-09 boolean_schema.json Test boolean schema 'false' 1`] = `
{
  "schema": false,
  "ts": "void
",
}
`;

exports[`draft2019-09 boolean_schema.json Test boolean schema 'true' 1`] = `
{
  "schema": true,
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const validation 1`] = `
{
  "schema": {
    "const": 2,
  },
  "ts": "2
",
}
`;

exports[`draft2019-09 const.json Test const with [false] does not match [0] 1`] = `
{
  "schema": {
    "const": [
      false,
    ],
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const with [true] does not match [1] 1`] = `
{
  "schema": {
    "const": [
      true,
    ],
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const with {"a": false} does not match {"a": 0}] 1`] = `
{
  "schema": {
    "const": {
      "a": false,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const with {"a": true} does not match {"a": 1}] 1`] = `
{
  "schema": {
    "const": {
      "a": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const with -2.0 matches integer and float types 1`] = `
{
  "schema": {
    "const": -2,
  },
  "ts": "-2
",
}
`;

exports[`draft2019-09 const.json Test const with 0 does not match other zero-like types 1`] = `
{
  "schema": {
    "const": 0,
  },
  "ts": "0
",
}
`;

exports[`draft2019-09 const.json Test const with 1 does not match true 1`] = `
{
  "schema": {
    "const": 1,
  },
  "ts": "1
",
}
`;

exports[`draft2019-09 const.json Test const with array 1`] = `
{
  "schema": {
    "const": [
      {
        "foo": "bar",
      },
    ],
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const with false does not match 0 1`] = `
{
  "schema": {
    "const": false,
  },
  "ts": "false
",
}
`;

exports[`draft2019-09 const.json Test const with null 1`] = `
{
  "schema": {
    "const": null,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const with object 1`] = `
{
  "schema": {
    "const": {
      "baz": "bax",
      "foo": "bar",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 const.json Test const with true does not match 1 1`] = `
{
  "schema": {
    "const": true,
  },
  "ts": "true
",
}
`;

exports[`draft2019-09 const.json Test float and integers are equal up to 64-bit representation limits 1`] = `
{
  "schema": {
    "const": 9007199254740992,
  },
  "ts": "9007199254740992
",
}
`;

exports[`draft2019-09 const.json Test nul characters in strings 1`] = `
{
  "schema": {
    "const": "hello there",
  },
  "ts": ""hello\\0there"
",
}
`;

exports[`draft2019-09 contains.json Test contains keyword validation 1`] = `
{
  "schema": {
    "contains": {
      "minimum": 5,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 contains.json Test contains keyword with boolean schema false 1`] = `
{
  "schema": {
    "contains": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 contains.json Test contains keyword with boolean schema true 1`] = `
{
  "schema": {
    "contains": true,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 contains.json Test contains keyword with const keyword 1`] = `
{
  "schema": {
    "contains": {
      "const": 5,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 contains.json Test items + contains 1`] = `
{
  "schema": {
    "contains": {
      "multipleOf": 3,
    },
    "items": {
      "multipleOf": 2,
    },
  },
  "ts": "any[]
",
}
`;

exports[`draft2019-09 default.json Test invalid string value for default 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "default": "bad",
        "minLength": 4,
        "type": "string",
      },
    },
  },
  "ts": "{
    bar: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 default.json Test invalid type for default 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "default": [],
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 defs.json Test invalid definition 1`] = `
{
  "schema": {
    "$ref": "https://json-schema.org/draft/2019-09/schema",
  },
  "ts": "schema_

export interface schema_ {
    $defs: any;
    definitions: any;
    dependencies?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 defs.json Test valid definition 1`] = `
{
  "schema": {
    "$ref": "https://json-schema.org/draft/2019-09/schema",
  },
  "ts": "schema_

export interface schema_ {
    $defs: any;
    definitions: any;
    dependencies?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 dependentRequired.json Test dependencies with escaped characters 1`] = `
{
  "schema": {
    "dependentRequired": {
      "foo
bar": [
        "foo
bar",
      ],
      "foo"bar": [
        "foo'bar",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 dependentRequired.json Test empty dependents 1`] = `
{
  "schema": {
    "dependentRequired": {
      "bar": [],
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 dependentRequired.json Test multiple dependents required 1`] = `
{
  "schema": {
    "dependentRequired": {
      "quux": [
        "foo",
        "bar",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 dependentRequired.json Test single dependency 1`] = `
{
  "schema": {
    "dependentRequired": {
      "bar": [
        "foo",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 dependentSchemas.json Test boolean subschemas 1`] = `
{
  "schema": {
    "dependentSchemas": {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 dependentSchemas.json Test dependencies with escaped characters 1`] = `
{
  "schema": {
    "dependentSchemas": {
      "foo	bar": {
        "minProperties": 4,
      },
      "foo'bar": {
        "required": [
          "foo"bar",
        ],
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 dependentSchemas.json Test single dependency 1`] = `
{
  "schema": {
    "dependentSchemas": {
      "bar": {
        "properties": {
          "bar": {
            "type": "integer",
          },
          "foo": {
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 enum.json Test enum with 0 does not match false 1`] = `
{
  "schema": {
    "enum": [
      0,
    ],
  },
  "ts": "0
",
}
`;

exports[`draft2019-09 enum.json Test enum with 1 does not match true 1`] = `
{
  "schema": {
    "enum": [
      1,
    ],
  },
  "ts": "1
",
}
`;

exports[`draft2019-09 enum.json Test enum with escaped characters 1`] = `
{
  "schema": {
    "enum": [
      "foo
bar",
      "foo
bar",
    ],
  },
  "ts": ""foo\\nbar" | "foo\\rbar"
",
}
`;

exports[`draft2019-09 enum.json Test enum with false does not match 0 1`] = `
{
  "schema": {
    "enum": [
      false,
    ],
  },
  "ts": "false
",
}
`;

exports[`draft2019-09 enum.json Test enum with true does not match 1 1`] = `
{
  "schema": {
    "enum": [
      true,
    ],
  },
  "ts": "true
",
}
`;

exports[`draft2019-09 enum.json Test enums in properties 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "enum": [
          "bar",
        ],
      },
      "foo": {
        "enum": [
          "foo",
        ],
      },
    },
    "required": [
      "bar",
    ],
    "type": "object",
  },
  "ts": "{
    foo?: "foo";
    bar: "bar";
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 enum.json Test heterogeneous enum validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      "foo",
      [],
      true,
      {
        "foo": 12,
      },
    ],
  },
  "ts": "6 | "foo" | any | true | any
",
}
`;

exports[`draft2019-09 enum.json Test heterogeneous enum-with-null validation 1`] = `
{
  "schema": {
    "enum": [
      6,
      null,
    ],
  },
  "ts": "6 | any
",
}
`;

exports[`draft2019-09 enum.json Test nul characters in strings 1`] = `
{
  "schema": {
    "enum": [
      "hello there",
    ],
  },
  "ts": ""hello\\0there"
",
}
`;

exports[`draft2019-09 enum.json Test simple enum validation 1`] = `
{
  "schema": {
    "enum": [
      1,
      2,
      3,
    ],
  },
  "ts": "1 | 2 | 3
",
}
`;

exports[`draft2019-09 exclusiveMaximum.json Test exclusiveMaximum validation 1`] = `
{
  "schema": {
    "exclusiveMaximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 exclusiveMinimum.json Test exclusiveMinimum validation 1`] = `
{
  "schema": {
    "exclusiveMinimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 format.json Test validation of IDN e-mail addresses 1`] = `
{
  "schema": {
    "format": "idn-email",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of IDN hostnames 1`] = `
{
  "schema": {
    "format": "idn-hostname",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of IP addresses 1`] = `
{
  "schema": {
    "format": "ipv4",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of IPv6 addresses 1`] = `
{
  "schema": {
    "format": "ipv6",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of IRI references 1`] = `
{
  "schema": {
    "format": "iri-reference",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of IRIs 1`] = `
{
  "schema": {
    "format": "iri",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of JSON pointers 1`] = `
{
  "schema": {
    "format": "json-pointer",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of URI references 1`] = `
{
  "schema": {
    "format": "uri-reference",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of URI templates 1`] = `
{
  "schema": {
    "format": "uri-template",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of URIs 1`] = `
{
  "schema": {
    "format": "uri",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of UUIDs 1`] = `
{
  "schema": {
    "format": "uuid",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of date strings 1`] = `
{
  "schema": {
    "format": "date",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of date-time strings 1`] = `
{
  "schema": {
    "format": "date-time",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of durations 1`] = `
{
  "schema": {
    "format": "duration",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of e-mail addresses 1`] = `
{
  "schema": {
    "format": "email",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of hostnames 1`] = `
{
  "schema": {
    "format": "hostname",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of regexes 1`] = `
{
  "schema": {
    "format": "regex",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of relative JSON pointers 1`] = `
{
  "schema": {
    "format": "relative-json-pointer",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 format.json Test validation of time strings 1`] = `
{
  "schema": {
    "format": "time",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 id.json Test Invalid use of fragments in location-independent $id 1`] = `
{
  "schema": {
    "$ref": "https://json-schema.org/draft/2019-09/schema",
  },
  "ts": "schema_

export interface schema_ {
    $defs: any;
    definitions: any;
    dependencies?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 id.json Test Unnormalized $ids are allowed but discouraged 1`] = `
{
  "schema": {
    "$ref": "https://json-schema.org/draft/2019-09/schema",
  },
  "ts": "schema_

export interface schema_ {
    $defs: any;
    definitions: any;
    dependencies?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 id.json Test Valid use of empty fragments in location-independent $id 1`] = `
{
  "schema": {
    "$ref": "https://json-schema.org/draft/2019-09/schema",
  },
  "ts": "schema_

export interface schema_ {
    $defs: any;
    definitions: any;
    dependencies?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 if-then-else.json Test if and else without then 1`] = `
{
  "schema": {
    "else": {
      "multipleOf": 2,
    },
    "if": {
      "exclusiveMaximum": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 if-then-else.json Test if and then without else 1`] = `
{
  "schema": {
    "if": {
      "exclusiveMaximum": 0,
    },
    "then": {
      "minimum": -10,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 if-then-else.json Test if with boolean schema false 1`] = `
{
  "schema": {
    "else": {
      "const": "else",
    },
    "if": false,
    "then": {
      "const": "then",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 if-then-else.json Test if with boolean schema true 1`] = `
{
  "schema": {
    "else": {
      "const": "else",
    },
    "if": true,
    "then": {
      "const": "then",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 if-then-else.json Test ignore else without if 1`] = `
{
  "schema": {
    "else": {
      "const": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 if-then-else.json Test ignore if without then or else 1`] = `
{
  "schema": {
    "if": {
      "const": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 if-then-else.json Test ignore then without if 1`] = `
{
  "schema": {
    "then": {
      "const": 0,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 if-then-else.json Test non-interference across combined schemas 1`] = `
{
  "schema": {
    "allOf": [
      {
        "if": {
          "exclusiveMaximum": 0,
        },
      },
      {
        "then": {
          "minimum": -10,
        },
      },
      {
        "else": {
          "multipleOf": 2,
        },
      },
    ],
  },
  "ts": "any & any & any
",
}
`;

exports[`draft2019-09 if-then-else.json Test validate against correct branch, then vs else 1`] = `
{
  "schema": {
    "else": {
      "multipleOf": 2,
    },
    "if": {
      "exclusiveMaximum": 0,
    },
    "then": {
      "minimum": -10,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 items.json Test a schema given for items 1`] = `
{
  "schema": {
    "items": {
      "type": "integer",
    },
  },
  "ts": "number[]
",
}
`;

exports[`draft2019-09 items.json Test an array of schemas for items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "type": "string",
      },
    ],
  },
  "ts": "(number | string)[]
",
}
`;

exports[`draft2019-09 items.json Test items and subitems 1`] = `
{
  "schema": {
    "$defs": {
      "item": {
        "additionalItems": false,
        "items": [
          {
            "$ref": "#/$defs/sub-item",
          },
          {
            "$ref": "#/$defs/sub-item",
          },
        ],
        "type": "array",
      },
      "sub-item": {
        "required": [
          "foo",
        ],
        "type": "object",
      },
    },
    "additionalItems": false,
    "items": [
      {
        "$ref": "#/$defs/item",
      },
      {
        "$ref": "#/$defs/item",
      },
      {
        "$ref": "#/$defs/item",
      },
    ],
    "type": "array",
  },
  "ts": "[
    item,
    item,
    item
]

export type item = [
    sub_item,
    sub_item
];

export type sub_item = any;
",
}
`;

exports[`draft2019-09 items.json Test items with boolean schema (false) 1`] = `
{
  "schema": {
    "items": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 items.json Test items with boolean schema (true) 1`] = `
{
  "schema": {
    "items": true,
  },
  "ts": "any[]
",
}
`;

exports[`draft2019-09 items.json Test items with boolean schemas 1`] = `
{
  "schema": {
    "items": [
      true,
      false,
    ],
  },
  "ts": "(any | void)[]
",
}
`;

exports[`draft2019-09 items.json Test nested items 1`] = `
{
  "schema": {
    "items": {
      "items": {
        "items": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "array",
  },
  "ts": "number[][][][]
",
}
`;

exports[`draft2019-09 maxContains.json Test maxContains with contains 1`] = `
{
  "schema": {
    "contains": {
      "const": 1,
    },
    "maxContains": 1,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 maxContains.json Test maxContains without contains is ignored 1`] = `
{
  "schema": {
    "maxContains": 1,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 maxContains.json Test minContains < maxContains 1`] = `
{
  "schema": {
    "contains": {
      "const": 1,
    },
    "maxContains": 3,
    "minContains": 1,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 maxItems.json Test maxItems validation 1`] = `
{
  "schema": {
    "maxItems": 2,
  },
  "ts": "any[]
",
}
`;

exports[`draft2019-09 maxLength.json Test maxLength validation 1`] = `
{
  "schema": {
    "maxLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 maxProperties.json Test maxProperties = 0 means the object is empty 1`] = `
{
  "schema": {
    "maxProperties": 0,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 maxProperties.json Test maxProperties validation 1`] = `
{
  "schema": {
    "maxProperties": 2,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 maximum.json Test maximum validation 1`] = `
{
  "schema": {
    "maximum": 3,
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 maximum.json Test maximum validation with unsigned integer 1`] = `
{
  "schema": {
    "maximum": 300,
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 minContains.json Test maxContains < minContains 1`] = `
{
  "schema": {
    "contains": {
      "const": 1,
    },
    "maxContains": 1,
    "minContains": 3,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 minContains.json Test maxContains = minContains 1`] = `
{
  "schema": {
    "contains": {
      "const": 1,
    },
    "maxContains": 2,
    "minContains": 2,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 minContains.json Test minContains = 0 1`] = `
{
  "schema": {
    "contains": {
      "const": 1,
    },
    "minContains": 0,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 minContains.json Test minContains without contains is ignored 1`] = `
{
  "schema": {
    "minContains": 1,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 minContains.json Test minContains=1 with contains 1`] = `
{
  "schema": {
    "contains": {
      "const": 1,
    },
    "minContains": 1,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 minContains.json Test minContains=2 with contains 1`] = `
{
  "schema": {
    "contains": {
      "const": 1,
    },
    "minContains": 2,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 minItems.json Test minItems validation 1`] = `
{
  "schema": {
    "minItems": 1,
  },
  "ts": "any[]
",
}
`;

exports[`draft2019-09 minLength.json Test minLength validation 1`] = `
{
  "schema": {
    "minLength": 2,
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 minProperties.json Test minProperties validation 1`] = `
{
  "schema": {
    "minProperties": 1,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 minimum.json Test minimum validation 1`] = `
{
  "schema": {
    "minimum": 1.1,
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 minimum.json Test minimum validation with signed integer 1`] = `
{
  "schema": {
    "minimum": -2,
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 multipleOf.json Test by int 1`] = `
{
  "schema": {
    "multipleOf": 2,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 multipleOf.json Test by number 1`] = `
{
  "schema": {
    "multipleOf": 1.5,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 multipleOf.json Test by small number 1`] = `
{
  "schema": {
    "multipleOf": 0.0001,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 not.json Test forbidden property 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "not": {},
      },
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 not.json Test not 1`] = `
{
  "schema": {
    "not": {
      "type": "integer",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 not.json Test not more complex schema 1`] = `
{
  "schema": {
    "not": {
      "properties": {
        "foo": {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 not.json Test not multiple types 1`] = `
{
  "schema": {
    "not": {
      "type": [
        "integer",
        "boolean",
      ],
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 not.json Test not with boolean schema false 1`] = `
{
  "schema": {
    "not": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 not.json Test not with boolean schema true 1`] = `
{
  "schema": {
    "not": true,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 oneOf.json Test nested oneOf, to check validation semantics 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "oneOf": [
          {
            "type": "null",
          },
        ],
      },
    ],
  },
  "ts": "(any)
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "integer",
      },
      {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf complex types 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": {
            "type": "integer",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: unknown;
} | {
    foo: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with base schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "minLength": 2,
      },
      {
        "maxLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with boolean schemas, all false 1`] = `
{
  "schema": {
    "oneOf": [
      false,
      false,
      false,
    ],
  },
  "ts": "void | void | void
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with boolean schemas, all true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      true,
      true,
    ],
  },
  "ts": "any | any | any
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with boolean schemas, more than one true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      true,
      false,
    ],
  },
  "ts": "any | any | void
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with boolean schemas, one true 1`] = `
{
  "schema": {
    "oneOf": [
      true,
      false,
      false,
    ],
  },
  "ts": "any | void | void
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with empty schema 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "type": "number",
      },
      {},
    ],
  },
  "ts": "number | any
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with missing optional property 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": true,
          "baz": true,
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "foo": true,
        },
        "required": [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: any;
    baz?: any;
    [key: string]: unknown;
} | {
    foo: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 oneOf.json Test oneOf with required 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "required": [
          "foo",
          "bar",
        ],
      },
      {
        "required": [
          "foo",
          "baz",
        ],
      },
    ],
    "type": "object",
  },
  "ts": "any | any
",
}
`;

exports[`draft2019-09 pattern.json Test pattern is not anchored 1`] = `
{
  "schema": {
    "pattern": "a+",
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 pattern.json Test pattern validation 1`] = `
{
  "schema": {
    "pattern": "^a*$",
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 patternProperties.json Test multiple simultaneous patternProperties are validated 1`] = `
{
  "schema": {
    "patternProperties": {
      "a*": {
        "type": "integer",
      },
      "aaa*": {
        "maximum": 20,
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 patternProperties.json Test patternProperties validates properties matching a regex 1`] = `
{
  "schema": {
    "patternProperties": {
      "f.*o": {
        "type": "integer",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 patternProperties.json Test patternProperties with boolean schemas 1`] = `
{
  "schema": {
    "patternProperties": {
      "b.*": false,
      "f.*": true,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 patternProperties.json Test regexes are not anchored by default and are case sensitive 1`] = `
{
  "schema": {
    "patternProperties": {
      "X_": {
        "type": "string",
      },
      "[0-9]{2,}": {
        "type": "boolean",
      },
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 properties.json Test object properties validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "type": "string",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 properties.json Test properties with boolean schema 1`] = `
{
  "schema": {
    "properties": {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "{
    foo?: any;
    bar?: void;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 properties.json Test properties with escaped characters 1`] = `
{
  "schema": {
    "properties": {
      "foo	bar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foobar": {
        "type": "number",
      },
      "foo
bar": {
        "type": "number",
      },
      "foo"bar": {
        "type": "number",
      },
      "foo\\bar": {
        "type": "number",
      },
    },
  },
  "ts": "{
    "foo\\nbar"?: number;
    "foo\\"bar"?: number;
    "foo\\\\bar"?: number;
    "foo\\rbar"?: number;
    "foo\\tbar"?: number;
    "foo\\fbar"?: number;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 properties.json Test properties, patternProperties, additionalProperties interaction 1`] = `
{
  "schema": {
    "additionalProperties": {
      "type": "integer",
    },
    "patternProperties": {
      "f.o": {
        "minItems": 2,
      },
    },
    "properties": {
      "bar": {
        "type": "array",
      },
      "foo": {
        "maxItems": 3,
        "type": "array",
      },
    },
  },
  "ts": "{
    foo?: any[];
    bar?: any;
    [key: string]: number | undefined;
}
",
}
`;

exports[`draft2019-09 propertyNames.json Test propertyNames validation 1`] = `
{
  "schema": {
    "propertyNames": {
      "maxLength": 3,
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 propertyNames.json Test propertyNames with boolean schema false 1`] = `
{
  "schema": {
    "propertyNames": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 propertyNames.json Test propertyNames with boolean schema true 1`] = `
{
  "schema": {
    "propertyNames": true,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 ref.json Test $ref to boolean schema false 1`] = `
{
  "schema": {
    "$defs": {
      "bool": false,
    },
    "$ref": "#/$defs/bool",
  },
  "ts": "bool

export type bool = bool;
",
}
`;

exports[`draft2019-09 ref.json Test $ref to boolean schema true 1`] = `
{
  "schema": {
    "$defs": {
      "bool": true,
    },
    "$ref": "#/$defs/bool",
  },
  "ts": "bool

export type bool = any;
",
}
`;

exports[`draft2019-09 ref.json Test Recursive references between schemas 1`] = `
{
  "schema": {
    "$defs": {
      "node": {
        "$id": "http://localhost:1234/node",
        "description": "node",
        "properties": {
          "subtree": {
            "$ref": "tree",
          },
          "value": {
            "type": "number",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
    },
    "$id": "http://localhost:1234/tree",
    "description": "tree of nodes",
    "properties": {
      "meta": {
        "type": "string",
      },
      "nodes": {
        "items": {
          "$ref": "node",
        },
        "type": "array",
      },
    },
    "required": [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "ts": "{
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}

export interface node_ {
    value: number;
    /**
     * tree of nodes
     */
    subtree?: tree_;
    [key: string]: unknown;
}

export interface tree_ {
    meta: string;
    nodes: node_[];
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 ref.json Test escaped pointer ref 1`] = `
{
  "schema": {
    "$defs": {
      "percent%field": {
        "type": "integer",
      },
      "slash/field": {
        "type": "integer",
      },
      "tilde~field": {
        "type": "integer",
      },
    },
    "properties": {
      "percent": {
        "$ref": "#/$defs/percent%25field",
      },
      "slash": {
        "$ref": "#/$defs/slash~1field",
      },
      "tilde": {
        "$ref": "#/$defs/tilde~0field",
      },
    },
  },
  "ts": "{
    tilde?: tilde~0field;
    slash?: slash~1field;
    percent?: percent%25field;
    [key: string]: unknown;
}

export type tilde~0field = number;

export type slash~1field = number;

export type percent%25field = number;
",
}
`;

exports[`draft2019-09 ref.json Test nested refs 1`] = `
{
  "schema": {
    "$defs": {
      "a": {
        "type": "integer",
      },
      "b": {
        "$ref": "#/$defs/a",
      },
      "c": {
        "$ref": "#/$defs/b",
      },
    },
    "$ref": "#/$defs/c",
  },
  "ts": "c

export type c = b;

export type b = a;

export type a = number;
",
}
`;

exports[`draft2019-09 ref.json Test property named $ref that is not a reference 1`] = `
{
  "schema": {
    "properties": {
      "$ref": {
        "type": "string",
      },
    },
  },
  "ts": "{
    $ref?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 ref.json Test property named $ref, containing an actual $ref 1`] = `
{
  "schema": {
    "$defs": {
      "is-string": {
        "type": "string",
      },
    },
    "properties": {
      "$ref": {
        "$ref": "#/$defs/is-string",
      },
    },
  },
  "ts": "{
    $ref?: is_string;
    [key: string]: unknown;
}

export type is_string = string;
",
}
`;

exports[`draft2019-09 ref.json Test ref applies alongside sibling keywords 1`] = `
{
  "schema": {
    "$defs": {
      "reffed": {
        "type": "array",
      },
    },
    "properties": {
      "foo": {
        "$ref": "#/$defs/reffed",
        "maxItems": 2,
      },
    },
  },
  "ts": "{
    foo?: reffed;
    [key: string]: unknown;
}

export type reffed = any;
",
}
`;

exports[`draft2019-09 ref.json Test ref creates new scope when adjacent to keywords 1`] = `
{
  "schema": {
    "$defs": {
      "A": {
        "unevaluatedProperties": false,
      },
    },
    "$ref": "#/$defs/A",
    "properties": {
      "prop1": {
        "type": "string",
      },
    },
  },
  "ts": "A

export type A = any;
",
}
`;

exports[`draft2019-09 ref.json Test refs with quote 1`] = `
{
  "schema": {
    "$defs": {
      "foo"bar": {
        "type": "number",
      },
    },
    "properties": {
      "foo"bar": {
        "$ref": "#/$defs/foo%22bar",
      },
    },
  },
  "ts": "{
    "foo\\"bar"?: foo%22bar;
    [key: string]: unknown;
}

export type foo%22bar = number;
",
}
`;

exports[`draft2019-09 ref.json Test relative pointer ref to array 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "integer",
      },
      {
        "$ref": "#/items/0",
      },
    ],
  },
  "ts": "(number | 0)[]

export type 0 = number;
",
}
`;

exports[`draft2019-09 ref.json Test relative pointer ref to object 1`] = `
{
  "schema": {
    "properties": {
      "bar": {
        "$ref": "#/properties/foo",
      },
      "foo": {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: foo;
    [key: string]: unknown;
}

export type foo = number;
",
}
`;

exports[`draft2019-09 ref.json Test remote ref, containing refs itself 1`] = `
{
  "schema": {
    "$ref": "https://json-schema.org/draft/2019-09/schema",
  },
  "ts": "schema_

export interface schema_ {
    $defs: any;
    definitions: any;
    dependencies?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 ref.json Test root pointer ref 1`] = `
{
  "schema": {
    "additionalProperties": false,
    "properties": {
      "foo": {
        "$ref": "#",
      },
    },
  },
  "ts": "{
    foo?: _;
}

export interface _ {
    foo?: _;
}
",
}
`;

exports[`draft2019-09 refRemote.json Test base URI change - change folder 1`] = `
{
  "schema": {
    "$defs": {
      "baz": {
        "$id": "folder/",
        "items": {
          "$ref": "folderInteger.json",
        },
        "type": "array",
      },
    },
    "$id": "http://localhost:1234/scope_change_defs1.json",
    "properties": {
      "list": {
        "$ref": "folder/",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: _;
    [key: string]: unknown;
}

export type _ = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft2019-09 refRemote.json Test base URI change - change folder in subschema 1`] = `
{
  "schema": {
    "$defs": {
      "baz": {
        "$defs": {
          "bar": {
            "items": {
              "$ref": "folderInteger.json",
            },
            "type": "array",
          },
        },
        "$id": "folder/",
      },
    },
    "$id": "http://localhost:1234/scope_change_defs2.json",
    "properties": {
      "list": {
        "$ref": "folder/#/$defs/bar",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: bar;
    [key: string]: unknown;
}

export type bar = folderInteger_json_[];

export type folderInteger_json_ = number;
",
}
`;

exports[`draft2019-09 refRemote.json Test base URI change 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/",
    "items": {
      "$id": "folder/",
      "items": {
        "$ref": "folderInteger.json",
      },
    },
  },
  "ts": "folderInteger_json_[][]

export type folderInteger_json_ = number;
",
}
`;

exports[`draft2019-09 refRemote.json Test fragment within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas-defs.json#/$defs/integer",
  },
  "ts": "integer

export type integer = number;
",
}
`;

exports[`draft2019-09 refRemote.json Test ref within remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/subSchemas-defs.json#/$defs/refToInteger",
  },
  "ts": "refToInteger

export type refToInteger = integer;

export type integer = number;
",
}
`;

exports[`draft2019-09 refRemote.json Test remote ref 1`] = `
{
  "schema": {
    "$ref": "http://localhost:1234/integer.json",
  },
  "ts": "integer_json_

export type integer_json_ = number;
",
}
`;

exports[`draft2019-09 refRemote.json Test root ref in remote ref 1`] = `
{
  "schema": {
    "$id": "http://localhost:1234/object",
    "properties": {
      "name": {
        "$ref": "name-defs.json#/$defs/orNull",
      },
    },
    "type": "object",
  },
  "ts": "{
    name?: orNull;
    [key: string]: unknown;
}

export type orNull = any | _;

export type _ = string;
",
}
`;

exports[`draft2019-09 required.json Test required default validation 1`] = `
{
  "schema": {
    "properties": {
      "foo": {},
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 required.json Test required validation 1`] = `
{
  "schema": {
    "properties": {
      "bar": {},
      "foo": {},
    },
    "required": [
      "foo",
    ],
  },
  "ts": "{
    foo: any;
    bar?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 required.json Test required with empty array 1`] = `
{
  "schema": {
    "properties": {
      "foo": {},
    },
    "required": [],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 required.json Test required with escaped characters 1`] = `
{
  "schema": {
    "required": [
      "foo
bar",
      "foo"bar",
      "foo\\bar",
      "foo
bar",
      "foo	bar",
      "foobar",
    ],
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 type.json Test array type matches arrays 1`] = `
{
  "schema": {
    "type": "array",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 type.json Test boolean type matches booleans 1`] = `
{
  "schema": {
    "type": "boolean",
  },
  "ts": "boolean
",
}
`;

exports[`draft2019-09 type.json Test integer type matches integers 1`] = `
{
  "schema": {
    "type": "integer",
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 type.json Test multiple types can be specified in an array 1`] = `
{
  "schema": {
    "type": [
      "integer",
      "string",
    ],
  },
  "ts": "number | string
",
}
`;

exports[`draft2019-09 type.json Test null type matches only the null object 1`] = `
{
  "schema": {
    "type": "null",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 type.json Test number type matches numbers 1`] = `
{
  "schema": {
    "type": "number",
  },
  "ts": "number
",
}
`;

exports[`draft2019-09 type.json Test object type matches objects 1`] = `
{
  "schema": {
    "type": "object",
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 type.json Test string type matches strings 1`] = `
{
  "schema": {
    "type": "string",
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 type.json Test type as array with one item 1`] = `
{
  "schema": {
    "type": [
      "string",
    ],
  },
  "ts": "string
",
}
`;

exports[`draft2019-09 type.json Test type: array or object 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
    ],
  },
  "ts": "any[] | object
",
}
`;

exports[`draft2019-09 type.json Test type: array, object or null 1`] = `
{
  "schema": {
    "type": [
      "array",
      "object",
      "null",
    ],
  },
  "ts": "any[] | object | null
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems as schema 1`] = `
{
  "schema": {
    "type": "array",
    "unevaluatedItems": {
      "type": "string",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems can't see inside cousins 1`] = `
{
  "schema": {
    "allOf": [
      {
        "items": [
          true,
        ],
      },
      {
        "unevaluatedItems": false,
      },
    ],
  },
  "ts": "(any)[] & any
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems false 1`] = `
{
  "schema": {
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems true 1`] = `
{
  "schema": {
    "type": "array",
    "unevaluatedItems": true,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with $ref 1`] = `
{
  "schema": {
    "$defs": {
      "bar": {
        "items": [
          true,
          {
            "type": "string",
          },
        ],
      },
    },
    "$ref": "#/$defs/bar",
    "items": [
      {
        "type": "string",
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "bar

export type bar = (any | string)[];
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with additionalItems 1`] = `
{
  "schema": {
    "additionalItems": true,
    "items": [
      {
        "type": "string",
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "(string)[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with anyOf 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "items": [
          true,
          {
            "const": "bar",
          },
        ],
      },
      {
        "items": [
          true,
          true,
          {
            "const": "baz",
          },
        ],
      },
    ],
    "items": [
      {
        "const": "foo",
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "(any | "bar")[] | (any | any | "baz")[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with boolean schemas 1`] = `
{
  "schema": {
    "allOf": [
      true,
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with if/then/else 1`] = `
{
  "schema": {
    "else": {
      "items": [
        true,
        true,
        true,
        {
          "const": "else",
        },
      ],
    },
    "if": {
      "items": [
        true,
        {
          "const": "bar",
        },
      ],
    },
    "items": [
      {
        "const": "foo",
      },
    ],
    "then": {
      "items": [
        true,
        true,
        {
          "const": "then",
        },
      ],
    },
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "("foo")[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with nested additionalItems 1`] = `
{
  "schema": {
    "allOf": [
      {
        "additionalItems": true,
        "items": [
          {
            "type": "string",
          },
        ],
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "(string)[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with nested tuple 1`] = `
{
  "schema": {
    "allOf": [
      {
        "items": [
          true,
          {
            "type": "number",
          },
        ],
      },
    ],
    "items": [
      {
        "type": "string",
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "(any | number)[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with nested unevaluatedItems 1`] = `
{
  "schema": {
    "allOf": [
      {
        "items": [
          {
            "type": "string",
          },
        ],
      },
      {
        "unevaluatedItems": true,
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "(string)[] & any
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with not 1`] = `
{
  "schema": {
    "items": [
      {
        "const": "foo",
      },
    ],
    "not": {
      "not": {
        "items": [
          true,
          {
            "const": "bar",
          },
        ],
      },
    },
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "("foo")[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with oneOf 1`] = `
{
  "schema": {
    "items": [
      {
        "const": "foo",
      },
    ],
    "oneOf": [
      {
        "items": [
          true,
          {
            "const": "bar",
          },
        ],
      },
      {
        "items": [
          true,
          {
            "const": "baz",
          },
        ],
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "(any | "bar")[] | (any | "baz")[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with tuple 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "string",
      },
    ],
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "(string)[]
",
}
`;

exports[`draft2019-09 unevaluatedItems.json Test unevaluatedItems with uniform items 1`] = `
{
  "schema": {
    "items": {
      "type": "string",
    },
    "type": "array",
    "unevaluatedItems": false,
  },
  "ts": "string[]
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test cousin unevaluatedProperties, true and false, false with properties 1`] = `
{
  "schema": {
    "allOf": [
      {
        "unevaluatedProperties": true,
      },
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "unevaluatedProperties": false,
      },
    ],
    "type": "object",
  },
  "ts": "any & {
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test cousin unevaluatedProperties, true and false, true with properties 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "unevaluatedProperties": true,
      },
      {
        "unevaluatedProperties": false,
      },
    ],
    "type": "object",
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
} & any
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test nested unevaluatedProperties, outer false, inner true, properties inside 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "unevaluatedProperties": true,
      },
    ],
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test nested unevaluatedProperties, outer false, inner true, properties outside 1`] = `
{
  "schema": {
    "allOf": [
      {
        "unevaluatedProperties": true,
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test nested unevaluatedProperties, outer true, inner false, properties inside 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": {
            "type": "string",
          },
        },
        "unevaluatedProperties": false,
      },
    ],
    "type": "object",
    "unevaluatedProperties": true,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test nested unevaluatedProperties, outer true, inner false, properties outside 1`] = `
{
  "schema": {
    "allOf": [
      {
        "unevaluatedProperties": false,
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": true,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties can't see inside cousins 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "foo": true,
        },
      },
      {
        "unevaluatedProperties": false,
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: unknown;
} & any
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties false 1`] = `
{
  "schema": {
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties schema 1`] = `
{
  "schema": {
    "type": "object",
    "unevaluatedProperties": {
      "minLength": 3,
      "type": "string",
    },
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties true 1`] = `
{
  "schema": {
    "type": "object",
    "unevaluatedProperties": true,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with $ref 1`] = `
{
  "schema": {
    "$defs": {
      "bar": {
        "properties": {
          "bar": {
            "type": "string",
          },
        },
      },
    },
    "$ref": "#/$defs/bar",
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "bar

export interface bar {
    bar?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with adjacent additionalProperties 1`] = `
{
  "schema": {
    "additionalProperties": true,
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with adjacent patternProperties 1`] = `
{
  "schema": {
    "patternProperties": {
      "^foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with adjacent properties 1`] = `
{
  "schema": {
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with anyOf 1`] = `
{
  "schema": {
    "anyOf": [
      {
        "properties": {
          "bar": {
            "const": "bar",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "baz": {
            "const": "baz",
          },
        },
        "required": [
          "baz",
        ],
      },
      {
        "properties": {
          "quux": {
            "const": "quux",
          },
        },
        "required": [
          "quux",
        ],
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with boolean schemas 1`] = `
{
  "schema": {
    "allOf": [
      true,
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with dependentSchemas 1`] = `
{
  "schema": {
    "dependentSchemas": {
      "foo": {
        "properties": {
          "bar": {
            "const": "bar",
          },
        },
        "required": [
          "bar",
        ],
      },
    },
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with if/then/else 1`] = `
{
  "schema": {
    "else": {
      "properties": {
        "baz": {
          "type": "string",
        },
      },
      "required": [
        "baz",
      ],
    },
    "if": {
      "properties": {
        "foo": {
          "const": "then",
        },
      },
      "required": [
        "foo",
      ],
    },
    "then": {
      "properties": {
        "bar": {
          "type": "string",
        },
      },
      "required": [
        "bar",
      ],
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with nested additionalProperties 1`] = `
{
  "schema": {
    "allOf": [
      {
        "additionalProperties": true,
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with nested patternProperties 1`] = `
{
  "schema": {
    "allOf": [
      {
        "patternProperties": {
          "^bar": {
            "type": "string",
          },
        },
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with nested properties 1`] = `
{
  "schema": {
    "allOf": [
      {
        "properties": {
          "bar": {
            "type": "string",
          },
        },
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with nested unevaluatedProperties 1`] = `
{
  "schema": {
    "allOf": [
      {
        "unevaluatedProperties": true,
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": {
      "maxLength": 2,
      "type": "string",
    },
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with not 1`] = `
{
  "schema": {
    "not": {
      "not": {
        "properties": {
          "bar": {
            "const": "bar",
          },
        },
        "required": [
          "bar",
        ],
      },
    },
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 unevaluatedProperties.json Test unevaluatedProperties with oneOf 1`] = `
{
  "schema": {
    "oneOf": [
      {
        "properties": {
          "bar": {
            "const": "bar",
          },
        },
        "required": [
          "bar",
        ],
      },
      {
        "properties": {
          "baz": {
            "const": "baz",
          },
        },
        "required": [
          "baz",
        ],
      },
    ],
    "properties": {
      "foo": {
        "type": "string",
      },
    },
    "type": "object",
    "unevaluatedProperties": false,
  },
  "ts": "{
    foo?: string;
    [key: string]: unknown;
}
",
}
`;

exports[`draft2019-09 uniqueItems.json Test uniqueItems validation 1`] = `
{
  "schema": {
    "uniqueItems": true,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 uniqueItems.json Test uniqueItems with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft2019-09 uniqueItems.json Test uniqueItems with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": true,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;

exports[`draft2019-09 uniqueItems.json Test uniqueItems=false validation 1`] = `
{
  "schema": {
    "uniqueItems": false,
  },
  "ts": "any
",
}
`;

exports[`draft2019-09 uniqueItems.json Test uniqueItems=false with an array of items 1`] = `
{
  "schema": {
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "(boolean | boolean)[]
",
}
`;

exports[`draft2019-09 uniqueItems.json Test uniqueItems=false with an array of items and additionalItems=false 1`] = `
{
  "schema": {
    "additionalItems": false,
    "items": [
      {
        "type": "boolean",
      },
      {
        "type": "boolean",
      },
    ],
    "uniqueItems": false,
  },
  "ts": "[
    boolean,
    boolean
]
",
}
`;
